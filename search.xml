<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>拼多多客户端暑期实习二面</title>
      <link href="/2020/06/16/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/"/>
      <url>/2020/06/16/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下面试过程，积累一下经验。</p><a id="more"></a><p>全程30分钟左右，因个人原因推迟了这次面试6天，感觉面试官没有特别上心，可能没有hc了？</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>反转一个int整型，溢出返回0。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>介绍一下个人情况和项目情况吧。</p><p>项目中的难点？</p><p>遇到难点如何去学习和解决？</p><p>Java面向对象的特性有哪些？</p><p>Java容器介绍一下，说些比较熟悉的就可以了。</p><p>计算机网络中比较熟悉的协议说一下。</p><p>TCP的三次握手？</p><p>TCP三次握手如果客户端的最后一次握手的ACK报文没有传到服务端，会发生什么？</p><p>TCP三次握手最后一次是可以携带数据的，如果ACK报文没有到达服务端，而数据到达了服务端，会发生什么？</p><h2 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h2><p>您那边负责的业务是什么呢？<br>安卓音视频开发。</p><p>您对我后面的学习有什么建议吗？<br>深度上继续下功夫（但是也没有问我深度的知识…）。对于一些底层相关的可以多看看，针对某个方面深入学习。</p><p>拼多多实习生或应届生进入公司如何培训？如何快速适应业务？<br>专门的导师帮助，各部门情况不同。</p>]]></content>
      
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拼多多客户端暑期实习一面</title>
      <link href="/2020/06/09/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
      <url>/2020/06/09/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下面试过程，积累一下经验。</p><a id="more"></a><p>全程57分钟</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>给一个链表，将链表排序后输出。不允许使用内置函数或者高级结构。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>介绍一下个人经历。</p><p>介绍一下项目经历。</p><p>安卓中如何添加一些依赖呢？（Gradle）</p><p>安卓的生命周期方法？</p><p>View的工作原理？流程是怎样的？调用了哪些方法？</p><p>安卓中如何添加/加载jar包？</p><p>安卓中如何将二进制流解析为图片并显示出来？</p><p>Handler消息机制介绍一下？</p><p>在一个普通线程中想要使用Looper需要做什么操作？</p><p>Looper在其他什么地方用过吗？举例说明。</p><p>事件分发机制介绍一下？</p><p>AsyncTask的原理（项目用）</p><p>进程间如何发送数据？</p><h2 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h2><p>您那边负责的业务是什么呢？<br>安卓底层SDK开发。</p><p>您对我后面的学习有什么建议吗？<br>多了解安卓底层的知识，去官网上看看源码，了解底层的架构。</p>]]></content>
      
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题自测</title>
      <link href="/2020/06/08/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/"/>
      <url>/2020/06/08/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>Java常见面试题整理，对答案进行了隐藏处理，可用于自测。</p><p>本处面试题来自于JavaGuide，在文末参考处添加了链接，可前往其GitHub项目主页查看更多信息。</p><a id="more"></a><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><ol><li><h3 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别?"></a><font color=red>面向对象和面向过程的区别?</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>面向过程就是将一个任务分解为多个步骤, 然后依次实现这些步骤以完成任务.<br>面向对象就是将任务划分为多个对象, 实现对象后可以通过组合小的对象来实现任务中的功能. 更有利于复用和维护应用.</p><p>标答<br>面向过程性能相对更高(类的调用需要实例化, 开销大, 耗资源)<br>不易维护, 复用, 扩展.<br>面向对象则易维护, 易复用, 易扩展.<br>有封装, 继承, 多态的特性, 低耦合, 更加灵活, 故易维护.<br>但是效率相对会较低.</p><p>可结合着回答.</p></blockquote></details><ol start="2"><li><h3 id="那么可以说面向过程语言的性能高于面向对象语言吗"><a href="#那么可以说面向过程语言的性能高于面向对象语言吗" class="headerlink" title="那么可以说面向过程语言的性能高于面向对象语言吗?"></a>那么可以说面向过程语言的性能高于面向对象语言吗?</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>与面向对象或面向过程语言类型并无关系，而是因为面向过程语言通常会直接编译为机器码, 而面向对象的Java语言是半编译语言，最终执行代码并不能直接被CPU执行。</p></blockquote></details><ol start="3"><li><h3 id="Java-语言的特点"><a href="#Java-语言的特点" class="headerlink" title="Java 语言的特点"></a><font color=red>Java 语言的特点</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>一次编译，到处运行。<br>是一种面向对象的语言，<br>拥有封装，继承和多态的特性。<br>简单易学，安全可靠，支持多线程，网络编程，并且解释和编译并存。</p></blockquote></details><ol start="4"><li><h3 id="JVM-JDK-JRE最详细通俗的解答"><a href="#JVM-JDK-JRE最详细通俗的解答" class="headerlink" title="JVM, JDK, JRE最详细通俗的解答?"></a><font color=red>JVM, JDK, JRE最详细通俗的解答?</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>JVM是指 Java 虚拟机，Java程序通过编译器编译为字节码（.class）文件，JVM可以运行这些字节码在不同的硬件环境下执行出相同的结果，也是“一次编译，到处运行”的基础。<br>JDK是指 Java Development Kit，即Java开发配套工具。其中包含了JRE的所有内容，增加了编译器和一些工具，可以创建和编译程序。<br>JRE是指 Java Runtime Environment，即Java运行时环境。包含了运行一个Java程序所需的一切，如果仅使用Java程序而不做开发，那么使用JRE就足够了。</p></blockquote></details><ol start="5"><li><h3 id="什么是字节码？源代码到运行的过程是怎样的？"><a href="#什么是字节码？源代码到运行的过程是怎样的？" class="headerlink" title="什么是字节码？源代码到运行的过程是怎样的？"></a>什么是字节码？源代码到运行的过程是怎样的？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>字节码就是.class文件，不面向任何处理器，只面向虚拟机。通过字节码的这种方式，Java不但使效率得到了提升还保留了解释型语言可以移植的特性。</p><p>首先源代码通过javac编译成字节码（.class)，输入虚拟机后，虚拟机会加载字节码文件，通过解释器逐行解释执行，但是这个方法效率低下，所以引入了JIT编译器，JIT编译器可以将热点代码进行编译，保存编译后的机器码，在下一次调用热点代码时可以直接使用已编译的机器码，所以执行次数越多效率就越高。<br>而在JDK 9时引入了AOT编译器，它会将字节码直接编译为机器码，避免JIT预热到热点代码的开销，但是会占用更大的空间，而且编译质量比不上JIT编译器。</p></blockquote></details><ol start="5"><li><h3 id="OpenJDK-和-OracleJDK-的区别？"><a href="#OpenJDK-和-OracleJDK-的区别？" class="headerlink" title="OpenJDK 和 OracleJDK 的区别？"></a>OpenJDK 和 OracleJDK 的区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>OpenJDK是完全开源的，而OracleJDK是OpenJDK的一个实现，并没有完全开源。<br>OpenJDK的性能和稳定性没有OracleJDK好。<br>OracleJDK对于已发布的版本不会提供长期的更新，需要手动的更新到最新版本来获得支持。</p></blockquote></details><ol start="6"><li><h3 id="Java-和-C-的区别？"><a href="#Java-和-C-的区别？" class="headerlink" title="Java 和 C++ 的区别？"></a>Java 和 C++ 的区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>都是面向对象的语言，即拥有封装，继承，多态的特性。<br>Java没有指针直接访问内存，所以更加安全。<br>Java有自动的垃圾回收机制，不需要手动管理内存。<br>Java中继承属于单继承，而C++可以多继承，但是Java中可以有多实现。<br>C++字符串和字符串数组的结尾会存在一个/o的结束符，而Java则没有这个结束符的概念。</p></blockquote></details><ol start="7"><li><h3 id="为什么Java没有结束符的概念？"><a href="#为什么Java没有结束符的概念？" class="headerlink" title="为什么Java没有结束符的概念？"></a>为什么Java没有结束符的概念？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java中一切都是对象，所以字符串和字符串数组都拥有一些方法或者属性可以确定其长度，就不需要再有一个结束符来浪费空间。</p></blockquote></details><ol start="8"><li><h3 id="什么是Java的主类？应用程序和小程序的主类有什么不同？"><a href="#什么是Java的主类？应用程序和小程序的主类有什么不同？" class="headerlink" title="什么是Java的主类？应用程序和小程序的主类有什么不同？"></a>什么是Java的主类？应用程序和小程序的主类有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>一个应用程序只能拥有一个主类，主类是Java程序的入口。<br>应用程序的主类是一个包含main()方法的类，而小程序的主类是继承自JApplet或者Applet的子类。<br>应用程序的主类可以不是public的，而小程序的主类必须是public。</p></blockquote></details><ol start="9"><li><h3 id="Java应用程序和小程序之间的差别是什么？"><a href="#Java应用程序和小程序之间的差别是什么？" class="headerlink" title="Java应用程序和小程序之间的差别是什么？"></a>Java应用程序和小程序之间的差别是什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>应用程序从主线程启动（main()方法启动）。<br>小程序是嵌入到浏览器中运行的（init()或run()方法）。</p></blockquote></details><ol start="10"><li><h3 id="字符型常量Character和字符串常量String的区别是什么？"><a href="#字符型常量Character和字符串常量String的区别是什么？" class="headerlink" title="字符型常量Character和字符串常量String的区别是什么？"></a><font color=red>字符型常量Character和字符串常量String的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>从形式上看，字符型常量是单引号包裹的，而字符串常量是双引号包裹的。<br>从含义上看，字符型常量是整型值（ASCII码），而字符串常量是地址值（字符串在内存中的地址）。<br>从大小上看，字符型常量是占用两个字节的内存，而字符串常量是占用不定长度的内存。</p></blockquote></details><ol start="11"><li><h3 id="Java中各个基本类型的大小和包装类？"><a href="#Java中各个基本类型的大小和包装类？" class="headerlink" title="Java中各个基本类型的大小和包装类？"></a><font color=red>Java中各个基本类型的大小和包装类？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java的基本类型共有8种。</p><table><thead><tr><th>基本数据类型</th><th>包装型</th><th>大小</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>-128 ~ 127</td></tr><tr><td>char</td><td>Character</td><td>unicode 0 ~ unicode $2^{16}-1$</td></tr><tr><td>short</td><td>Short</td><td>-$2^{15}$ ~ $2^{15}-1$</td></tr><tr><td>int</td><td>Integer</td><td>-$2^{31}$ ~ $2^{31}-1$</td></tr><tr><td>long</td><td>Long</td><td>-$2^{63}$ ~ $2^{63}-1$</td></tr><tr><td>float</td><td>Float</td><td>IEEE 754 ~ IEEE 754</td></tr><tr><td>double</td><td>Double</td><td>IEEE 754 ~ IEEE 754</td></tr><tr><td>boolean</td><td>Boolean</td><td>True / False</td></tr></tbody></table></blockquote></details><ol start="12"><li><h3 id="构造函数是否可以被重写override？"><a href="#构造函数是否可以被重写override？" class="headerlink" title="构造函数是否可以被重写override？"></a>构造函数是否可以被重写override？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>构造函数无法被重写，但是可以被重载，也就是一个类中可以有多个构造函数。</p></blockquote></details><ol start="13"><li><h3 id="重载和重写的区别是什么？"><a href="#重载和重写的区别是什么？" class="headerlink" title="重载和重写的区别是什么？"></a><font color=red>重载和重写的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>重写就是指子类可以对继承来的类进行修改或者增加新的逻辑，方法名和参数名称必须相同，返回值的范围应该小于等于父类的返回值范围，抛出的异常也应该小于等于父类，访问修饰符应该大于等于父类。（如果父类是private的，就无法重写）<br>重载就是指一个方法可以由多个同名的方法，参数，返回值和访问修饰符可以不同，编译器会匹配使用哪一个方法，如果无法匹配到方法就会产生编译时错误。</p></blockquote></details><ol start="14"><li><h3 id="Java面向对象编程的三大特性是什么？"><a href="#Java面向对象编程的三大特性是什么？" class="headerlink" title="Java面向对象编程的三大特性是什么？"></a><font color=red>Java面向对象编程的三大特性是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>封装性，对内部的代码进行封装以保证内部逻辑不会暴露在外。<br>继承性，继承是一种类与类之间的关系，如果一个类继承了另一个类，那么可以直接继承使用父类的方法而不需要重新实现，提升了开发效率。<br>多态性，多态是指一个类中实现的方法，在另一个类中可以表现出不同的行为。多态的两个代表，重写和重载。</p></blockquote></details><ol start="15"><li><h3 id="String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？"><a href="#String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？" class="headerlink" title="String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？"></a><font color=red>String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>String即字符串常量，确定值后就无法更改，想要修改就需要新建一个String常量，然后将指针指向新的常量。适合对字符串进行少量操作的场景。<br>StringBuilder，可以修改字符串的值，线程不安全，所以适合在单线程下对字符串有大量操作的情况。<br>StringBuffer，可以修改字符串的值，线程安全，所以适合在多线程下对字符串有大量操作的情况。</p><p>StringBuilder的速度优于StringBuffer大约10%~15%，但是线程不安全。</p></blockquote></details><ol start="16"><li><h3 id="String不可变的原因？"><a href="#String不可变的原因？" class="headerlink" title="String不可变的原因？"></a>String不可变的原因？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>String类中使用一个被final修饰的字符数组保存字符串（Java 9 之后改用byte[]而不是char[]），而StringBuilder和StringBuffer都没有使用final修饰，所以是可变的。</p></blockquote></details><ol start="17"><li><h3 id="什么是自动装箱和拆箱？"><a href="#什么是自动装箱和拆箱？" class="headerlink" title="什么是自动装箱和拆箱？"></a><font color=red>什么是自动装箱和拆箱？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>自动装箱就是指基本类型自动转换为其对应的包装类型，如int 自动装箱为 Integer 等同于自动调用了 Integer对象 = Integer.valueOf(int对象);<br>自动拆箱就是指包装类型自动转换为其对应的基本类型，如Integer 自动拆箱为 int 等同于自动调用了 int对象 = Integer对象.intValue();</p><p>如果是Byte，Character，Short，Integer，Long这五种包装类型，当包装类型的值处于-128 ~ 127这个范围内时，会指向缓存中已存在的对象的引用（地址对比结果是相等的），如果不在这个范围内就会新创建一个包装类型对象（地址对比，结果不等）。<br>对于Float，Double这两种包装类型，由于一个范围内的浮点数量是无限的，所以无法创建一个缓存。所以从地址上进行对比，两个浮点数永远不可能相等。</p><p>在进行包装类型比较时，==运算符的两个操作数都是包装类型的引用，就是比较这两个操作数是否指向同一个对象，而如果有一个操作数是表达式（包括算术运算），就会触发自动拆箱，变为比较数值。<br>而进行包装类型比较时，equals()方法不会进行类型的转换的工作。（不会触发自动装箱拆箱）</p></blockquote></details><ol start="18"><li><h3 id="什么是静态变量，使用静态变量修饰意味着什么？"><a href="#什么是静态变量，使用静态变量修饰意味着什么？" class="headerlink" title="什么是静态变量，使用静态变量修饰意味着什么？"></a><font color=red>什么是静态变量，使用静态变量修饰意味着什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>静态变量就是被static修饰的变量，不再属于某个对象，而是属于整个类。属于类就代表这个变量被所有对象共享。静态成员在类加载时就会被分配内存，可以使用类名直接访问（推荐），也可以实例化类对象后调用（不推荐，无意义）。<br>非静态成员属于类的对象，只有类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。</p></blockquote></details><ol start="19"><li><h3 id="在一个静态方法中调用一个非静态方法为什么是非法的？"><a href="#在一个静态方法中调用一个非静态方法为什么是非法的？" class="headerlink" title="在一个静态方法中调用一个非静态方法为什么是非法的？"></a><font color=red>在一个静态方法中调用一个非静态方法为什么是非法的？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>因为静态方法属于类，在类创建时就会生成，而非静态方法此时还未生成，让一个已生成的方法调用还未生成的方法自然就会报错。</p></blockquote></details><ol start="20"><li><h3 id="在Java中定义一个不做事也无参数的构造方法的作用？"><a href="#在Java中定义一个不做事也无参数的构造方法的作用？" class="headerlink" title="在Java中定义一个不做事也无参数的构造方法的作用？"></a>在Java中定义一个不做事也无参数的构造方法的作用？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java程序执行子类构造方法前，如果没有用使用super()调用父类特定的构造方法，就会调用父类中的无参构造方法。<br>如果子类的构造方法没有指定父类中的构造方法，就会默认调用这个空的构造方法来初始化父类。如果父类没有这个无参构造方法，那么子类没有使用父类构造方法时会出现编译时错误。因为Java程序无法找到无参构造方法执行，解决方法就是在父类中增加一个无参构造方法。<br>可理解为，无参构造方法就是一个默认的构造方法，如果不使用默认的，或者有特定需求，那么子类就应该去指定一个父类构造方法。</p></blockquote></details><ol start="21"><li><h3 id="import-java和javax有什么区别？"><a href="#import-java和javax有什么区别？" class="headerlink" title="import java和javax有什么区别？"></a>import java和javax有什么区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>最初，JavaAPI必须的包是java开头的包，而javax是扩展的包。但是逐渐javax扩展为JavaAPI的组成部分，最终成为了标准API的一部分。<br>所以，java和javax并没有什么区别。</p></blockquote></details><ol start="22"><li><h3 id="抽象和接口的区别是什么？"><a href="#抽象和接口的区别是什么？" class="headerlink" title="抽象和接口的区别是什么？"></a><font color=red>抽象和接口的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>抽象类内部的成员变量和方法可以不是抽象的，而接口中的成员变量是static final的，方法必须是抽象的。（也可以是默认方法，默认方法可以有方法体）<br>接口默认的访问修饰符是public，抽象可以是public，protected，default的，但是不能是private的，因为这个访问修饰符会是子类无法重写父类方法。<br>抽象类是单继承的，而接口是多实现的。<br>抽象类是对根源的抽象，描述一个事物是什么。而接口是对行为的抽象，描述一个事物可以干什么。例如人要吃饭喝水，那么人就是一种抽象，吃饭喝水的行为可以是一种接口。</p></blockquote></details><ol start="23"><li><h3 id="成员变量和局部变量的区别是什么？"><a href="#成员变量和局部变量的区别是什么？" class="headerlink" title="成员变量和局部变量的区别是什么？"></a><font color=red>成员变量和局部变量的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>成员变量属于类，而局部变量属于方法。<br>成员变量可以被public，private，static修饰，而局部变量不可被这些修饰。<br>成员变量和局部变量都可以被final修饰。<br>如果成员变量被static修饰，就属于类。如果没有被static修饰就属于实例（类对象），对象存储于堆内存中。而局部变量存储于栈内存中。<br>成员变量属于类对象的一部分，随着类对象的创建而存在，局部变量随着方法的调用而存在和消失。<br>成员变量如果没有被赋予初值，就会自动以类型的默认值赋值（除了final修饰的变量外），而局部变量不会自动赋值。</p></blockquote></details><ol start="24"><li><h3 id="创建一个对象使用什么关键字？对象实例和对象引用有什么不同？"><a href="#创建一个对象使用什么关键字？对象实例和对象引用有什么不同？" class="headerlink" title="创建一个对象使用什么关键字？对象实例和对象引用有什么不同？"></a>创建一个对象使用什么关键字？对象实例和对象引用有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>创建一个对象使用new关键字，可以用于创建对象实例。<br>对象的实例处于堆内存，而对象的引用指向对象的实例，被存处于栈内存上。<br>一个对象引用可以指向0个或者1个对象实例，而一个对象实例可以被多个对象引用指向。</p></blockquote></details><ol start="25"><li><h3 id="什么是方法的返回值？返回值在类的方法里的作用是什么？"><a href="#什么是方法的返回值？返回值在类的方法里的作用是什么？" class="headerlink" title="什么是方法的返回值？返回值在类的方法里的作用是什么？"></a>什么是方法的返回值？返回值在类的方法里的作用是什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>方法的返回值就是一个方法执行完成后的结果。返回值会被输出到调用这个方法的方法中被赋予给一个变量，进行进一步的运算。</p><p>标答: 获取到的某个方法体中的代码执行后产生的结果(如果该方法可以产生结果). 作用是可以输出结果, 使其可以用于其他操作.</p></blockquote></details><ol start="26"><li><h3 id="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？"><a href="#一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？" class="headerlink" title="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？"></a>一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>构造方法的作用就是初始化一些变量，如果没有构造方法是可以执行的，比如像是无参构造方法类似于没有构造方法。</p></blockquote></details><ol start="27"><li><h3 id="构造方法中有哪些特性？"><a href="#构造方法中有哪些特性？" class="headerlink" title="构造方法中有哪些特性？"></a>构造方法中有哪些特性？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>构造方法的名字与类名相同。<br>无返回值也不能声明返回值。<br>在类实例化时自动调用。</p></blockquote></details><ol start="28"><li><h3 id="静态方法和实例方法有什么不同？"><a href="#静态方法和实例方法有什么不同？" class="headerlink" title="静态方法和实例方法有什么不同？"></a>静态方法和实例方法有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>静态方法被static修饰，属于整个类，而不属于某个对象，可以直接通过类名进行调用，而不需要等待类被初始化后调用。静态方法可以调用静态成员变量和方法，但是不能调用非静态的成员变量和方法。<br>实例方法需要等待类被实例化后才可以被调用，需要通过实例化后的对象名去调用它。实例对象可以调用类中所有成员变量和方法。</p></blockquote></details><ol start="29"><li><h3 id="对象的相等与执行他们的引用相等有什么不同？"><a href="#对象的相等与执行他们的引用相等有什么不同？" class="headerlink" title="对象的相等与执行他们的引用相等有什么不同？"></a>对象的相等与执行他们的引用相等有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>对象的相等是指对象的类型和内容相等，而引用的相等是指内存地址相等。</p></blockquote></details><ol start="30"><li><h3 id="在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？"><a href="#在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？" class="headerlink" title="在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？"></a>在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>利用父类的构造方法来协助子类进行初始化工作。</p></blockquote></details><ol start="31"><li><h3 id="与equals的区别？"><a href="#与equals的区别？" class="headerlink" title="==与equals的区别？"></a><font color=red>==与equals的区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>==用于对比两个对象的引用是否相等。基本数据类型比较的是值是否相等，而引用类型比较的是内存地址是否相等。<br>equals()默认（Object中）也是用于对比两个对象的引用是否相等，但是一些类中重写了equals()使其变为比较两个对象的内容，比如String类。</p><p>延申，创建String对象时，虚拟机会先去常量池中查找是否有已存在的值与将要创建的String的内容相等的对象，如果存在就直接将其赋给新的String对象，不存在则在常量池中创建一个String对象。</p></blockquote></details><ol start="32"><li><h3 id="hashCode与equals的作用？"><a href="#hashCode与equals的作用？" class="headerlink" title="hashCode与equals的作用？"></a><font color=red>hashCode与equals的作用？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>hashCode()的作用是计算对象的散列值，并根据这个散列值得到索引。而equals()用于在HashMap中找到一个桶内的某个具体值。<br>hashCode()是Object中的一个方法，这意味着任何类都拥有这个方法，但是这个方法大部分情况下并不会起作用，正常使用时，equals()和hashCode()之间没有任何关系。<br>但是在使用哈希表结构的对象时，这两个方法才会互相产生作用。并且有几个特性：</p><ol><li>equals()相等时，hashCode()肯定相等。</li><li>equals()不等时，hashCode()可能相等，也可能不等。</li><li>hashCode()相等时，equals()不一定相等。此时就会发生哈希冲突。<br>所以一个哈希表中，如果equals()被重写了，那么hashCode()也需要被重写。如果没有重写，那么hashCode()会使用引用地址产生哈希码，因为hashCode()的目的就是产生独一无二的哈希值，这会导致两个对象比较的结果不等，即使他们本来是相等的。</li></ol></blockquote></details><ol start="33"><li><h3 id="为什么Java中只有值传递？"><a href="#为什么Java中只有值传递？" class="headerlink" title="为什么Java中只有值传递？"></a><font color=red>为什么Java中只有值传递？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>首先理解什么是值传递，什么是引用传递。<br>值传递就是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。<br>引用传递是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改将会影响到实际参数。</p><p>而Java中不管是值对象还是引用对象都是值传递·，在其他方法里面改变引用类型的值肯定是通过引用改变的·，当传递引用对象的时候传递的是复制过的对象句柄(引用)，注意这个引用是复制过的，也就是说又在内存中复制了一份句柄，这时候有两个句柄是指向同一个对象的，所以你改变这个句柄对应空间的数据会影响外部的变量的，虽然是复制的但是引用指向的是同一个地址，当你把这个句柄指向其他对象的引用时并不会改变原对象，因为你拿到的句柄是复制过的引用。总结Java中的句柄(引用)是复制过的，所以说Java只有值传递。</p></blockquote></details><ol start="34"><li><h3 id="简述线程，程序，进程的基本概念。它们之间的关系是什么？"><a href="#简述线程，程序，进程的基本概念。它们之间的关系是什么？" class="headerlink" title="简述线程，程序，进程的基本概念。它们之间的关系是什么？"></a><font color=red>简述线程，程序，进程的基本概念。它们之间的关系是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>线程，可以被视为轻量级进程，是一个比进程更小的执行单位，一个进程可以拥有多个线程，线程拥有线程私有的程序计数器，虚拟机栈，本地方法栈，同一进程下的线程共享Java堆和方法区资源。这就让线程切换的开销小于进程。所以可以使用线程来提高并发效率并且降低并发执行过程中的开销。</p><p>程序，有指令和数据的代码，被存在磁盘或者其他数据存储设备上，即程序就是静态的代码。</p><p>进程，程序执行一次的过程，是系统执行程序的基本单位，系统执行一个程序就是进程从创建，执行到销毁的过程。简单来说，一个进程就是一个运行中的程序，进程占有一些系统资源并且相互间独立。引入进程可以让多个程序并发执行，提高系统的资源利用率和吞吐量。</p></blockquote></details><ol start="34"><li><h3 id="线程有哪些基本状态？"><a href="#线程有哪些基本状态？" class="headerlink" title="线程有哪些基本状态？"></a><font color=red>线程有哪些基本状态？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>初始 new，线程被构建，但是还未调用start()方法。<br>运行 runnable，分为就绪ready和运行中running两个状态。<br>阻塞 blocked，线程被锁阻塞。<br>等待 waiting，线程调用了wait()进入等待状态，等待其他线程的通知或者中断。<br>超时等待 time waiting，线程调用了wait(long millis)或者sleep(long millis)，等待状态加上一个时间限制，超时自动返回。<br>终止 terminated，线程执行完毕。</p><p>流程，线程被创建后处于初始 new 状态，调用start()方法后开始执行，此时处于runnable状态的ready状态。获得时间片后进入runnable的running状态。如果线程调用同步方法，想要获取锁又无法获取时，会进入阻塞 blocked状态，获取锁后返回运行状态。如果线程执行了wait()方法，线程进入等待waiting状态，等待其他线程的通知才可以返回到运行状态。如果线程执行了wait(long millis)或者sleep(long millis)，则进入有时间限制的等待状态time waiting，获得通知或者超过时间就会返回运行状态。线程执行完运行状态的run()方法后会进入终止 terminated状态。</p></blockquote></details><ol start="35"><li><h3 id="关于final关键字的一些总结？"><a href="#关于final关键字的一些总结？" class="headerlink" title="关于final关键字的一些总结？"></a><font color=red>关于final关键字的一些总结？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>final关键字修饰变量时，变量不可被更改。基本数据类型的变量赋值后无法更改值，引用类型的变量初始化后不可用指向另一个对象。</p><p>final关键字修饰方法时，方法不可以被重写。</p><p>final关键字修饰类时，类不可以被继承。</p></blockquote></details><ol start="36"><li><h3 id="Java中的异常处理？"><a href="#Java中的异常处理？" class="headerlink" title="Java中的异常处理？"></a><font color=red>Java中的异常处理？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java中所有异常的父类是Throwable，其下分为Error和Exception两个部分。</p><p>Error，指程序自身无法解决的错误，一般是资源不足或者虚拟机出现错误等原因导致的。比如OutOfMemoryError与虚拟机错误。这种错误是不可查的，超出了程序控制和处理能力，并且大多数都是程序运行时不允许出现的状况。</p><p>Exception，是程序本身可以解决的异常，可以分为Runtime Exception和其他Exception。</p><p>Runtime Exception是指运行时异常，是运行时才会被检测出的异常，事前不会主动检查它，所以即使有问题也可以通过编译。有一些运算异常就属于运行时异常。通常可以通过try catch或者throws进行捕获，可以通过修改使其恢复正常。</p><p>其他Exception是指除运行时异常外的异常，这种异常又被称为被检查异常，在编译阶段会被主动检查，如果出现问题无法通过编译。</p></blockquote></details><ol start="37"><li><h3 id="Throwable类的常用方法？"><a href="#Throwable类的常用方法？" class="headerlink" title="Throwable类的常用方法？"></a>Throwable类的常用方法？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>getMessage() 返回异常发生时的简要描述。</p><p>toString() 返回异常发生时的详细信息。</p><p>getLocalizedMessage() 返回异常对象的本地化信息，使用Throwable子类覆盖这个方法，可以生成本地化信息。如果子类未覆盖这个方法，那么这个方法返回的信息和getMessage()返回的相同。</p><p>printStackTrace() 在控制台打印Throwable对象封装的异常信息。</p></blockquote></details><ol start="38"><li><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a><font color=red>异常处理总结</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>使用try catch来捕获和处理异常，try后面可以接多个catch，如果没有catch，则一定存在一个finally。</p><p>finally，不论是否捕获或者处理异常，finally都会被执行。如果 try / catch中存在return，那么 finally 会在执行 return 后，返回结果前执行。如果 try / catch和 finally 中都存在 return，则 try / catch返回值前会先执行 finally，finally的return返回值会覆盖掉try / catch的返回值。</p><p>有四种情况 finally 不会被执行，</p><ol><li>finally的第一行执行出现了问题，如果出现在其他行，则 finally 依然可以被执行。</li><li>使用了 System.exit(0) 来退出程序。</li><li>程序所在的线程死亡了。</li><li>关闭了CPU。</li></ol></blockquote></details><ol start="39"><li><h3 id="Java序列化中如果有字段不想要序列化怎么办？"><a href="#Java序列化中如果有字段不想要序列化怎么办？" class="headerlink" title="Java序列化中如果有字段不想要序列化怎么办？"></a><font color=red>Java序列化中如果有字段不想要序列化怎么办？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java序列化一般使用Serializable进行序列化，如果遇到不想序列化的字段，则可以使用Transient来阻止对这个字段的序列化。<br>Transient与Serializable配套使用，只能用于修饰变量，而不能修饰方法和类。</p></blockquote></details><ol start="40"><li><h3 id="获取键盘输入的两种方法？"><a href="#获取键盘输入的两种方法？" class="headerlink" title="获取键盘输入的两种方法？"></a><font color=red>获取键盘输入的两种方法？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>通过 Scanner 获取键盘输入。<br>通过 BufferReader 获取键盘输入。</p></blockquote></details><ol start="41"><li><h3 id="Java中IO流可被分为几种？"><a href="#Java中IO流可被分为几种？" class="headerlink" title="Java中IO流可被分为几种？"></a><font color=red>Java中IO流可被分为几种？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>按流向分，可以分为输入流和输出流。<br>按操作单元分，可以分为字节流和字符流。字节流可以处理任何类型的对象，而字符流只可以处理字符类型的对象。字符流存在的意义在于字符处理比较麻烦，使用自带的字符流去处理可以更加高效和统一。<br>按功能角色分，可以分为节点流和处理流，节点流就是指从/向一个IO设备中读取/写入数据的流，而处理流是对一个已存在的流进行一个封装，通过封装后的流实现数据读写的功能，好处是只要是相同的处理流，程序可以采用相同的输入输出代码来访问不同的数据源。</p><p>Java IO流有四大基类<br>用于字节流输入的 InputStream。<br>用于字节流输出的 OutputStream。<br>用于字符流输入的 Reader。<br>用于字符流输出的 Writer。<br>所有 Java IO 流都是从这四个基类派生出的。</p></blockquote></details><ol start="42"><li><h3 id="既然有了字节流，为什么还需要字符流呢？"><a href="#既然有了字节流，为什么还需要字符流呢？" class="headerlink" title="既然有了字节流，为什么还需要字符流呢？"></a><font color=red>既然有了字节流，为什么还需要字符流呢？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>因为字符流这个过程比较耗时，而且如果没有处理好就会导致乱码，所以 IO 流提供了一个直接操作的接口，可以更方便的对字符进行流操作。<br>如果是音视频等媒体文件（不涉及字符的文件）最好使用字节流，而涉及到字符的文件就最好使用字符流。</p></blockquote></details><ol start="43"><li><h3 id="BIO，NIO，AIO有什么区别？"><a href="#BIO，NIO，AIO有什么区别？" class="headerlink" title="BIO，NIO，AIO有什么区别？"></a><font color=red>BIO，NIO，AIO有什么区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>BIO 就是 Blocking IO，即同步阻塞IO模式，数据的读写都必须阻塞在一个线程内等待完成，在活动连接数不高的情况下，这种模式表现的很不错，可以让每个连接专注于自己的IO，并且编程简单，不需要考虑其他的问题。但是面对大量的连接时，这种IO就会显得无能为力了。</p><p>NIO 即 Non-Blocking IO，即同步非阻塞IO模式，提供了Channel，Buffer，Selector的抽象，支持面向缓冲的基于通道的IO操作方法。支持阻塞和非阻塞模式，阻塞模式的使用和传统的BIO一样，简单，但是性能和可靠性较差。非阻塞模式则相反。所以对于低负载低并发的情况可以使用同步阻塞IO，对于高负载，高并发的（网络）情况则使用非阻塞模式。</p><p>AIO即Asynchronous IO，即异步非阻塞IO模式，基于事件和回调机制实现的。应用在操作后会直接返回，而不会阻塞在那里。后台任务完成后，操作系统会通知相应的线程进行后续操作。虽然  NIO 提供了非阻塞方法，但是 IO 行为依然是同步的。其业务线程依然在  IO 操作准备好时才得到通知，然后由这个线程自行进行 IO 操作，IO操作本身是同步的。</p></blockquote></details><ol start="44"><li><h3 id="常见关键字有哪些？"><a href="#常见关键字有哪些？" class="headerlink" title="常见关键字有哪些？"></a><font color=red>常见关键字有哪些？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>final<br>修饰变量时，如果变量类型是基本数据类型，则不可更改值。如果变量类型是引用类型，则初始化后不可以指向另一个对象。<br>修饰方法时，方法不可以被重写。<br>修饰类时，类不可以被继承。</p><p>static<br>修饰成员变量和成员方法时（静态变量与静态方法），这些成员变量和方法会属于类，而不再属于某个对象，被整个类的所有对象共享。可以通过类名调用。注意，被static修饰的成员变量属于静态成员变量，静态变量会被存放在 Java 内存区域的方法区。而未被修饰的成员变量原本应该放在堆上。<br>修饰代码块时（静态代码块），静态代码块定义在类中方法外，静态代码块在非静态代码块之前执行，执行顺序是 静态代码块 -&gt;非静态代码块 -&gt; 构造方法。这个类不论创建多少对象，静态代码块都只执行一次。<br>修饰内部类（静态内部类），静态内部类和非静态内部类之间存在一个最大的区别。非静态内部类在编译完成后会隐含的保存一个执行外部类的引用，但是静态内部类却没有。没有这个引用就意味着：它的创建不需要依赖外部类的创建。它不能使用任何外部类的非static成员变量和方法。(可以达到延迟加载和线程安全的效果)<br>静态导包（导入类中的静态资源，是1.5后的新特性）， 格式是import static，可以指定导入某个类中的指定静态资源，而且不需要使用类名调用类中的静态成员，可以直接使用类中静态成员变量和静态成员方法。</p><p>有一个原则，方法体中的引用变量和基本类型的变量都在栈上，其他都在堆上。类的成员变量自然就在堆上，而方法的基本类型变量和引用类型的对象在堆中，而指针在栈上。</p><p>this<br>用于引用类的当前实例，使不使用这个关键字并不影响，但是可以使代码变得更加易读易懂。</p><p>super<br>子类访问父类的变量和方法。</p><p>延申</p><p>构造器中使用super()调用父类中其他构造方法时，语句必须处于构造器首行，否则报错。this调用本类中其他构造方法时也放在首行。</p><p>this，super不能用在 static 方法中，这是因为被 static 修饰的成员就属于类了，被类中所有对象共享。而 this 代表对本类对象的引用，指向本类对象，而 super 代表对父类对象的引用，指向父类对象，所以 this 和 super 都属于对象的范畴，而 static 属于类的范畴。</p><p>方法区如 Java堆一样，是各线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。方法区常被称为永久代，本质上并不等价，HotSpot使用永久代实现方法区，让垃圾收集器可以像管理 Java堆一样管理这部分内存。</p><p>如果方法执行的操作不依赖其类的各个变量和方法，则可将其设为静态，这会使程序占用的空间更小。否则, 应设为非静态的。</p></blockquote></details><ol start="45"><li><h3 id="静态方法和非静态方法（实例方法）的对比？"><a href="#静态方法和非静态方法（实例方法）的对比？" class="headerlink" title="静态方法和非静态方法（实例方法）的对比？"></a><font color=red>静态方法和非静态方法（实例方法）的对比？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>静态方法不需要实例化类对象就可以通过类名调用，而非静态方法必须实例化类对象，在通过类对象调用。</p><p>静态方法访问本类的成员时，只能访问静态成员（静态成员变量和静态成员方法），而无法访问非静态成员。非静态方法就没有这个限制。</p></blockquote></details><ol start="46"><li><h3 id="静态代码块和非静态代码块的对比？"><a href="#静态代码块和非静态代码块的对比？" class="headerlink" title="静态代码块和非静态代码块的对比？"></a><font color=red>静态代码块和非静态代码块的对比？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>都在 JVM 加载类时执行，并且都在构造方法前执行，都可以在类中定义多个，按顺序执行。一般会在代码块中对 static 变量进行赋值。</p><p>静态代码块在非静态代码块前执行，静态代码块只执行一次，之后不会再次执行（但是通过反射创建class对象会导致再次执行），非静态代码块每new一次类对象就会执行一次。</p><p>非静态代码块可以在普通方法中定义，而静态代码块不可以。</p><p>如果一些变量或者对象想要在项目启动时得到执行，那么就需要使用静态代码块，这种代码块属于主动执行。而非静态代码块需要被调用才会被执行。</p><p>非静态代码块是对所有对象进行统一的初始化，而构造函数是给对应的对象进行初始化，构造函数可以是多个，运行不同的构造函数建立不同的类对象。</p></blockquote></details><ol start="47"><li><h3 id="深拷贝与浅拷贝的对比？"><a href="#深拷贝与浅拷贝的对比？" class="headerlink" title="深拷贝与浅拷贝的对比？"></a><font color=red>深拷贝与浅拷贝的对比？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>浅拷贝就是只对对象的引用进行拷贝，即创建一个新的对象指向被拷贝对象所指向的地址。如果新对象改变地址的内容，不会改变基本数据类型的值，但是会改变引用类型的内容。</p><p>深拷贝就是完全的拷贝，即开辟了新的内存空间，即同时拷贝了引用和被指向的对象。对被拷贝的对象进行了完全的拷贝操作，修改内容对原来的对象没有任何影响。</p><p>标答：<br>浅拷贝，对基本数据类型进行值传递，对引用数据类型的变量进行引用传递的拷贝。<br>深拷贝，对基本数据类型进行值传递，对引用数据类型的变量则创建一个新的对象，复制其内容。</p></blockquote></details><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[JavaGuide]<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a></p><p>[为什么说Java中只有值传递]<a href="https://blog.csdn.net/bjweimengshu/article/details/79799485" target="_blank" rel="noopener">https://blog.csdn.net/bjweimengshu/article/details/79799485</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(11 - 15)</title>
      <link href="/2020/06/08/%E5%89%91%E6%8C%87offerPart3/"/>
      <url>/2020/06/08/%E5%89%91%E6%8C%87offerPart3/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第十一至第十五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a><a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二进制中1的个数</a></h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><p>方法一，暴力法。</p><p>直接将整型 n 的二进制串保存为一个字符串 String，然后统计这个 String 中 1 的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String str=Integer.toBinaryString(n); </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">'1'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，向右移位。<br>上一方法的基础上，很容易想到每一位都向右移位并补 0，通过统计每次 n 的值与 1 进行 &amp; 与运算时的结果是否为 1 来统计 1 的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，位运算的规律。</p><p>事实上，统计 1 的个数可以利用一个规律，即 n &amp; (n - 1) 可以消除 n 的二进制的最后一个 1，利用这个规律，每次消去一个最尾端的 1，并进行统计，直到 n = 0 时结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">数值的整数次方</a></h2><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><p>保证base和exponent不同时为0</p><p>方法一，暴力法。</p><p>因为 base<sup>exponent</sup> 实际上就是 exponent 个 base 相乘，所以可以根据这个规律得到解决方法。注意需要考虑 exponent 为负数的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(base == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// exponent 为负数时的情况需要被考虑</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            base = <span class="number">1</span> / base;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="comment">// 计算结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= exponent; i++)&#123;</span><br><span class="line">            res = res * base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><p>将 exponent 每次除以 2，达到减少计算量的目的。</p><p>在方法一中，很明显出现了大量的重复计算。</p><p>例如：$2^4$ = $(2^2)^2$，所以可见 $x^n = (x^{n/2})^2$，那么可以将指数通过递归的方式从 4 逐渐到 1，再将结果逐层计算返回到顶层。</p><p>当 exponent 为奇数时，有额外的一次相乘所以需要进行判断。</p><p>exponent 为奇数时，$x^n = (x^{n/2})^2 * x$。</p><p>exponent 为偶数时，$x^n = (x^{n/2})^2$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(base == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// exponent 为负数时的情况需要被考虑</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            base = <span class="number">1</span> / base;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pow(base, exponent);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">double</span> res = pow(base, exponent / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>((exponent &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res * res * base;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> res * res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，非递归的快速幂。</p><p>如果想要求 $x^6$，6 的二进制数是 110。</p><p>则可以表示为 $6 = 0 * 2^0 + 1 * 2^1 + 1 * 2^2$，所以 $x^6$可以被表示为</p><p>$x^6 = x^{0<em>2^0+1</em>2^1+1<em>2^2} = x^0 * x^{1</em>2^1} * x^{1*2^2}$，所以对于二进制数，如果通过移位得到的 exponent 的位数是1就将结果乘入答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(base == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// exponent 为负数时的情况需要被考虑</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            base = <span class="number">1</span> / base;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> x = base;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(exponent != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((exponent &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                res = res * x; <span class="comment">// 乘入答案</span></span><br><span class="line">            &#125;</span><br><span class="line">            x *= x; <span class="comment">// 计算每次的base值</span></span><br><span class="line">            exponent = exponent &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// exponent移位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a><a href="https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&tqId=11166&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">调整数组顺序使奇数位于偶数前面</a></h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><p>方法一，辅助数组。</p><p>利用一个辅助数组，先读取所有的奇数，按照顺序保存至结果数组，然后再遍历一遍将所有的偶数保存到辅助数组奇数后。最后将值赋给原数组。</p><p>也可以利用两个辅助数组，一次循环就得到奇数组和偶数组，然后将值赋给原数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                res[index++] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                res[index++] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            array[i] = res[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，插入排序。</p><p>由于插入排序的特性，很适合在此处使用。找到一个奇数后，将这个奇数暂存，从当前位向前搜索，其前方的偶数全部后移，直到找到第一个奇数，将暂存的奇数插入至找到的奇数后方即可。</p><p>也可以利用一个整型保存已排序的奇数的位置，找到新的奇数后，将中间的偶数范围整体后移一位，插入到记录的奇数后方，然后更新奇数的位置。实际原理与插入排序一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[i];</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(j = i; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((array[j - <span class="number">1</span>] &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                        array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表中倒数第K个结点"><a href="#链表中倒数第K个结点" class="headerlink" title="链表中倒数第K个结点"></a><a href="https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">链表中倒数第K个结点</a></h2><p>输入一个链表，输出该链表中倒数第 K 个结点。</p><p>方法一，暴力法。</p><p>首先确定链表的长度，然后根据链表长度和 K 值来得到目标结点的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">FindKthToTail</span><span class="params">(ListNode head,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">    <span class="comment">// 确定链表长度</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &lt; k) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 链表长度小于K，不存在目标结点。</span></span><br><span class="line">        <span class="keyword">if</span>(count == k) <span class="keyword">return</span> head; <span class="comment">// 链表长度等于K，首节点就是目标结点。</span></span><br><span class="line">    <span class="comment">// 链表长度大于K</span></span><br><span class="line">        <span class="keyword">int</span> dis = count - k; <span class="comment">// 得到目标结点的正向位置</span></span><br><span class="line">        ListNode res = head;</span><br><span class="line">        <span class="keyword">while</span>(dis != <span class="number">0</span>)&#123;</span><br><span class="line">            res = res.next;</span><br><span class="line">            dis--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，快慢指针法。</p><p>由于目标结点距离链表末端有K的距离，所以可以利用两个相距K个距离的指针来协助完成找到目标的任务。</p><p>定义快慢指针，快指针先走K步，然后快慢指针一起行动，当快指针抵达终点时，慢指针刚好到达目标结点的位置。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode FindKthToTail(ListNode head,<span class="built_in">int</span> k) &#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 快指针先走K步</span></span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果快指针抵达终点还需要继续向后，代表K的值大于了链表长度，这个目标结点不存在。</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当快指针抵达终点，慢指针正好指向倒数第K个结点</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">反转链表</a></h2><p>输入一个链表，反转链表后，输出新链表的表头。</p><p>方法一，辅助栈。</p><p>使用栈这种特殊的数据结构存储链表的所有数据。因为栈是后入先出的，所以从栈中输出时正好可以构成反转的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode newHead = stack.pop();</span><br><span class="line">        ListNode newCur = newHead;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            newCur.next = stack.pop();</span><br><span class="line">            newCur = newCur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newCur.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，逐步交换。</p><p>设置三个指针，从前向后依次进行交换。</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> ListNode ReverseList(ListNode head) &#123;</span><br><span class="line">        ListNode pre = <span class="literal">null</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode <span class="keyword">next</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">next</span> = cur.<span class="keyword">next</span>;</span><br><span class="line">            cur.<span class="keyword">next</span> = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="gt-gt-与-gt-gt-gt-运算符的区别"><a href="#gt-gt-与-gt-gt-gt-运算符的区别" class="headerlink" title="$&gt;&gt;$与 $&gt;&gt;&gt;$ 运算符的区别"></a>$&gt;&gt;$与 $&gt;&gt;&gt;$ 运算符的区别</h3><ol><li>$&gt;&gt;$ 是右移运算符，num &gt;&gt; 1，相当于 num / 2。按二进制形式把所有的数字向右移动对应位数，低位移出（舍弃），高位的空位补符号位，即正数补 0，负数补 1。符号位不变。如：-1在32位二进制中表示为：11111111 11111111 11111111 11111111，-1 &gt;&gt; 1：按位右移，符号位不变，仍旧得到11111111 11111111 11111111 11111111，因此值仍为 -1。</li><li>$&gt;&gt;&gt;$ 是二进制右移补零操作符，左操作数的值按右操作数指定的位数右移，移动得到的空位以 0 填充，如 value &gt;&gt;&gt; num 中，num 指定要移位值 value 移动的位数。</li></ol><p><img src="%E5%89%91%E6%8C%87offerPart3.assets/5edd879ac2a9a83be5a8e3a9.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(16 - 20)</title>
      <link href="/2020/06/08/%E5%89%91%E6%8C%87offerPart4/"/>
      <url>/2020/06/08/%E5%89%91%E6%8C%87offerPart4/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第十六至第二十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a><a href="https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&&tqId=11169&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">合并两个排序的链表</a></h2><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><p>方法一，迭代法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">        ListNode cur1 = list1;</span><br><span class="line">        ListNode cur2 = list2;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode newCur = newHead;</span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="keyword">null</span> &amp;&amp; cur2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur1.val &lt; cur2.val)&#123;</span><br><span class="line">                newCur.next = cur1;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                newCur.next = cur2;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            newCur = newCur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newCur.next = cur1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newCur.next = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="keyword">null</span>) <span class="keyword">return</span> list1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(list1.val &lt; list2.val)&#123;</span><br><span class="line">            list1.next = Merge(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            list2.next = Merge(list1,list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a><a href="https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88?tpId=13&tqId=11170&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">树的子结构</a></h2><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">HasSubtree</span><span class="params">(TreeNode root1,TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span> || root2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 采用了先序遍历的方式对比两个树状结构</span></span><br><span class="line">        <span class="keyword">return</span> dfs(root1, root2) || HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode root1,TreeNode root2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 如果root2是空,则不管root1是空还是非空,都是正确的.</span></span><br><span class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 如果root2不是空,而root1是空,则不是子结构.</span></span><br><span class="line">        <span class="comment">// 先比较当前节点是否相等,然后比较两者左节点,再比较两者右节点.</span></span><br><span class="line">        <span class="keyword">return</span> (root1.val == root2.val) &amp;&amp; dfs(root1.left, root2.left) &amp;&amp; dfs(root1.right, root2.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a><a href="https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二叉树的镜像</a></h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">二叉树的镜像定义：源二叉树 </span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       /  \</span><br><span class="line">      <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">     / \  / \</span><br><span class="line">    <span class="number">5</span>  <span class="number">7</span> <span class="number">9</span> <span class="number">11</span></span><br><span class="line">    镜像二叉树</span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       /  \</span><br><span class="line">      <span class="number">10</span>   <span class="number">6</span></span><br><span class="line">     / \  / \</span><br><span class="line">    <span class="number">11</span> <span class="number">9</span> <span class="number">7</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 左右子树交换</span></span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        <span class="comment">// 分别处理左右子树中的镜像</span></span><br><span class="line">        Mirror(root.left);</span><br><span class="line">        Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，非递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="comment">// 广度遍历</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode cur = queue.poll();</span><br><span class="line">            TreeNode temp = cur.left;</span><br><span class="line">            cur.left = cur.right;</span><br><span class="line">            cur.right = temp;</span><br><span class="line">            <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>) queue.offer(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>) queue.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a><a href="https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a?tpId=13&tqId=11172&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">顺时针打印矩阵</a></h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><p>方法一，按要求逐层读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 特殊情况直接退出</span></span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> high = <span class="number">0</span>; <span class="comment">// 最上行</span></span><br><span class="line">        <span class="keyword">int</span> low = matrix.length - <span class="number">1</span>; <span class="comment">// 最下行</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>; <span class="comment">// 最左列</span></span><br><span class="line">        <span class="keyword">int</span> right = matrix[<span class="number">0</span>].length - <span class="number">1</span>; <span class="comment">// 最右列</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 遍历当前最上行，从左到右</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = left; col &lt;= right; col++)&#123;</span><br><span class="line">                arr.add(matrix[high][col]);</span><br><span class="line">            &#125;</span><br><span class="line">            high++; <span class="comment">// 最上行更新</span></span><br><span class="line">            <span class="keyword">if</span>(high &gt; low) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">            <span class="comment">// 遍历当前最右列，从上到下</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> row = high; row &lt;= low; row++)&#123;</span><br><span class="line">                arr.add(matrix[row][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            right--; <span class="comment">// 最右列更新</span></span><br><span class="line">            <span class="keyword">if</span>(left &gt; right) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">            <span class="comment">// 遍历当前最下行，从右到左</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = right; col &gt;= left; col--)&#123;</span><br><span class="line">                arr.add(matrix[low][col]);</span><br><span class="line">            &#125;</span><br><span class="line">            low--; <span class="comment">// 最下行更新</span></span><br><span class="line">            <span class="keyword">if</span>(high &gt; low) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">            <span class="comment">// 遍历当前最左列，从下到上</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> row = low; row &gt;= high; row--)&#123;</span><br><span class="line">                arr.add(matrix[row][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            left++; <span class="comment">// 最左列更新</span></span><br><span class="line">            <span class="keyword">if</span>(left &gt; right) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">包含min函数的栈</a></h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><p>注意：保证测试中不会当栈为空的时候，对栈调用pop()或者min()或者top()方法。</p><p>方法一，利用辅助栈。</p><p>入栈时，每次比较辅助栈顶和入栈值中最小的一个入辅助栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 数据栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 辅助栈（最小值栈）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node); <span class="comment">// 数据栈直接入栈</span></span><br><span class="line">        <span class="comment">// 辅助栈比较后入栈</span></span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            stack2.push(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> min = Math.min(stack2.peek(), node);</span><br><span class="line">            stack2.push(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 出栈时两者都出栈</span></span><br><span class="line">        stack1.pop();</span><br><span class="line">        stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.peek(); <span class="comment">// 当前数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack2.peek(); <span class="comment">// 当前最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，辅助栈优化。</p><p>在数据有限制的情况下适用，否则差值会溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果栈内为空，则最小值就是其本身，推入元素和当前最小值的差值 0。</span></span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">            stack.push(<span class="number">0</span>);</span><br><span class="line">            min = node;</span><br><span class="line">        <span class="comment">// 如果栈内不为空</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> reduce = node - min; <span class="comment">// 计算当前元素和当前最小值的差值</span></span><br><span class="line">            stack.push(reduce); <span class="comment">// 差值入栈</span></span><br><span class="line">            <span class="comment">// 差值小于 0，代表node小于最小值，更新最小值</span></span><br><span class="line">            <span class="keyword">if</span>(reduce &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                min = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果栈顶小于0，代表如果当前栈顶出栈会导致最小值更新为上一个最小值。</span></span><br><span class="line">        <span class="keyword">if</span>(stack.peek() &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            min = min - stack.peek(); <span class="comment">// 计算出之前的最小值, min(老min) = node(当前min) - reduce</span></span><br><span class="line">        &#125;</span><br><span class="line">        stack.pop(); <span class="comment">// 出栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果栈顶小于0，代表当前栈顶元素就是最小元素。</span></span><br><span class="line">        <span class="keyword">if</span>(stack.peek() &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">        <span class="comment">// 否则，用当前最小值 + 栈顶元素可以得到对应的node值。</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> min + stack.peek(); <span class="comment">// node = reduce + min</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min; <span class="comment">// 返回当前最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(6 - 10)</title>
      <link href="/2020/06/07/%E5%89%91%E6%8C%87offerPart2/"/>
      <url>/2020/06/07/%E5%89%91%E6%8C%87offerPart2/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第六至第十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a><a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&tqId=11159&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">旋转数组的最小数字</a></h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><p>方法一，暴力法。</p><p>由于这个题目仅想要求得最小值，那么直接遍历求得最小值是最简单的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            min = Math.min(min, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，二分查找。</p><p>众所周知，二分查找的前提条件就是数组有序排列。但是在这个问题中依然可以使用二分查找，只要明确了二分查找时答案可以明确的在中间元素的某一侧就一样可以使用二分查找。</p><p>二分查找的比较原则是：</p><ol><li>如果存在目标值，则 mid 与目标值比较。</li><li>如果不存在目标值，则 mid 与端点进行比较。</li></ol><p>本题就利用端点来快速求得结果，利用 end 端点进行对比，共有三种情况。</p><ol><li>mid 元素小于 end 元素，此时可知最小值肯定不处于 [mid + 1, end] 这个区间中，所以可以将 end 移至 mid 处。</li><li>mid 元素大于 end 元素，此时可知最小值肯定不处于 [start, mid] 这个区间中，所以可以将 start移至 mid + 1 处。</li><li>而题干中指明未旋转时，这个数组是一个非递减排序的数组，所以有可能出现相等的情况，而在相等的情况出现时，无法确定最小值处于哪一边，所以就将 end 向前移动一位，逐渐缩小范围来得到答案。</li></ol><p>注意，在这一道题中并不可以使用 start 端点来进行对比，因为旋转后的数组无法利用这个端点准确知道结果处于哪一边。如：1，2，3，4，5 和 3，4，5，1，2，它们的 mid 元素都大于 start 元素，而最小值却没有规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = array.length;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[start] &lt; array[end])&#123;</span><br><span class="line">                <span class="keyword">return</span> array[start];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(array[mid] &lt; array[end])&#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid] &gt; array[end])&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&rp=1&ru=%2Factivity%2Foj&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=1" target="_blank" rel="noopener">斐波那契数列</a></h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。<br>n&lt;=39</p><p>斐波那契数列是一道非常经典的递归和动态规划题目。斐波那契数列简单来说就是：</p><p>第 N 项的值 = 第 N-1 项的值+第 N-2 项的值</p><p>方法一，递归法。</p><p>很容易想到使用递归来解决问题，因为通过递归可以从 N 到 0 逐层深入，然后再逐层返回，直到最外层即可得到结果。整个过程是自上而下，再逐层返回计算的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><p>递归可以用两行代码优雅的解决问题，但是中间出现了重复计算。比如 N = 3 时，N - 1 会计算 2，1。而 N - 2 也会计算 1。这样 1 就会被计算 2 次。如果在更大的 N 上就会出现更多重复的计算，所以就出现了可以保存计算过程中的各个状态的动态规划。而且与递归执行过程相反，动态规划的执行过程是自下而上的</p><p>使用了一个一维数组 dp 来保存每次计算的状态，后续就不再需要计算了，可以直接获取数组中已计算的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，计算过程中，每一位的计算都仅使用了前两位，而其他位被使用后就没有作用了，浪费了空间，所以可以进一步优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> dp0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp = dp0 + dp1; <span class="comment">// 计算新元素的值</span></span><br><span class="line">            <span class="comment">// 移除不再有效的 dp0 的值</span></span><br><span class="line">            dp0 = dp1; <span class="comment">// 后移一位</span></span><br><span class="line">            dp1 = dp; <span class="comment">// 后移一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a><a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">跳台阶</a></h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>实际上依然是一个斐波那契数列，只不过在外面套了一层皮。列举一些例子就可以很容易找到规律。比如：target = 1，1种走法。target = 2，2种走法，target = 3，3种走法，target = 4，5种走法。很明显就可以看出来这是一个斐波那契数列。</p><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">return</span> JumpFloor(target - <span class="number">1</span>) + JumpFloor(target - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp = dp1 + dp2;</span><br><span class="line">            dp1 = dp2;</span><br><span class="line">            dp2 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">变态跳台阶</a></h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>在上一题的基础上，步数变得更多了，那么最简单的方法就是将这些增加的可能性写入到对应位置。</p><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            count += JumpFloorII(target - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> || target == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                dp[i] += dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，优化方法二。</p><p>根据方法二中的规律，<br>$$<br>dp[target] = dp[target - 1] + dp[target - 2] + … + dp[0]<br>$$</p><p>$$<br>dp[target - 1] = dp[target - 2] + dp[target - 3] + … + dp[0]<br>$$</p><p>两者合并可得，<br>$$<br>dp[target] = 2 * dp[target - 1]<br>$$<br>故可利用这个规律进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> || target == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp0 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp = <span class="number">2</span> * dp0; <span class="comment">// 亦可使用位运算 dp0 &lt;&lt; 1</span></span><br><span class="line">            dp0 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法四，找规律。</p><p>通过列举，可以发现一个规律：<br>$$<br>dp[0] = dp[1] = 1，dp[2] = 2 = 2^1，dp[3] = 4 = 2^2，dp[4] = 8 = 2^3。<br>$$<br>所以可得 $dp[target] = 2^{target - 1}$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> || target == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, target - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">矩形覆盖</a></h2><p>我们可以用 2 * 1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2 * 1 的小矩形无重叠地覆盖一个 2 * n 的大矩形，总共有多少种方法？</p><p>比如 n = 3 时，2 * 3 的矩形块有 3 种覆盖方法：</p><p><img src="https://pic.downk.cc/item/5edd0a04c2a9a83be5ea3c66.png" alt=""></p><p>这道题依然是斐波那契数列的变形。因为小矩形可以有两种形态 2 * 1 或者 1 * 2，而目标是 2 * n。忽略掉高，只关注宽，因为高度在这道题中并没有什么作用，那么实际上就等价于可以爬一阶楼梯或者两阶楼梯爬到 n 的方法数量。</p><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">return</span> RectCover(target - <span class="number">1</span>) + RectCover(target - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp = dp1 + dp2;</span><br><span class="line">            dp1 = dp2;</span><br><span class="line">            dp2 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-动态规划简单题型</title>
      <link href="/2020/06/06/LeetCode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%80%E5%8D%95%E9%A2%98%E5%9E%8B/"/>
      <url>/2020/06/06/LeetCode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%80%E5%8D%95%E9%A2%98%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>����</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小红书2020校招Android方向笔试题卷三</title>
      <link href="/2020/06/06/%E5%B0%8F%E7%BA%A2%E4%B9%A62020%E5%8D%B7%E4%B8%89/"/>
      <url>/2020/06/06/%E5%B0%8F%E7%BA%A2%E4%B9%A62020%E5%8D%B7%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/test/23567675/summary" target="_blank" rel="noopener">牛客网小红书2020校招Android方向笔试题卷三</a><br>记录了一些解题思路及实现代码。<br>整体难度偏易。</p><a id="more"></a><h2 id="笔记草稿"><a href="#笔记草稿" class="headerlink" title="笔记草稿"></a>笔记草稿</h2><p>薯队长写了一篇笔记草稿，请你帮忙输出最后内容。<br>1.输入字符包括，”(“  ,  “)”  和  “&lt;”和其他字符。<br>2.其他字符表示笔记内容。<br>3.()之间表示注释内容，任何字符都无效。  括号保证成对出现。<br>4.”&lt;”表示退格,  删去前面一个笔记内容字符。括号不受”&lt;”影响  。 </p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一行字符串。长度&lt;=<span class="number">10000.</span></span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行字符串，表示最终的笔记内容。</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Corona</span><span class="params">(Trump)</span><span class="title">USA</span></span>&lt;&lt;&lt;Virus</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CoronaVirus</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题很简单的根据读取不同的元素内容执行不同操作即可。由于括号成对出现，可以用一个整型值代表是否出现括号，当没有括号时才向StringBuilder中增加字符，有括号时略过，遇到一个’&lt;’就删去StringBuilder最后一位即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String input = sc.nextLine();</span><br><span class="line">        <span class="keyword">char</span>[] arr = input.toCharArray();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> i : arr)&#123;.</span><br><span class="line">            <span class="comment">// 遇到正括号，flag++代表遇到括号了</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'('</span>)&#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遇到反括号，flag--代表结束了一个括号</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">')'</span>)&#123;</span><br><span class="line">                flag--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果flag不是0则代表依然处于括号内</span></span><br><span class="line">            <span class="keyword">if</span>(flag != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 遇到&lt;符号，代表需要移除前一位</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">                sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上述情况都不满足代表是一个正常字符，可以插入</span></span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="笔记精选"><a href="#笔记精选" class="headerlink" title="笔记精选"></a>笔记精选</h2><p>薯队长写了n篇笔记，编号从1~n,每篇笔记都获得了不少点赞数。<br>薯队长想从中选出一些笔记，作一个精选集合。挑选的时候有两个规则：<br>1.不能出现连续编号的笔记。<br>2.总点赞总数最多<br>如果满足1，2条件有多种方案，挑选笔记总数最少的那种</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包含两行。第一行整数n表示多少篇笔记。 第二行n个整数分别表示n篇笔记的获得的点赞数。   </span><br><span class="line"> （<span class="number">0</span>&lt;n&lt;=<span class="number">1000</span>,    <span class="number">0</span>&lt;=点赞数&lt;=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出两个整数<span class="symbol">x</span>,<span class="symbol">y</span>。空格分割。</span><br><span class="line"> <span class="symbol">x</span>表示总点赞数，<span class="symbol">y</span>表示挑选的笔记总数。</span><br></pre></td></tr></table></figure><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>实际上这道题与LeetCode上打家劫舍最简单的那一版是一样的。多了一个记录挑选笔记总数的部分。</p><p>本题利用动态规划思想，根据动态规划的三大要素，</p><p>第一步需要确定数组元素的含义，这个题中数组元素的含义就是点赞数达到最大。</p><p>第二步找出数组元素之间的关系式。易知，对于当前元素，要么选择它，则dp[i] = arr[i] + dp[i-2]，不能与相邻的一起选择，又想要达到最大点赞数，就只能与上上个的最大值相加。要么不选择它，则dp[i] = dp[i-1]，不选择它，那么当前元素上的最大点赞数应该与上一位的最大点赞数相同。那么找到两者结果最大的那一个作为当前元素的结果即可为最大点赞数。</p><p>第三步找出初始值，很容易知道，dp[1]的初始值就是它本身，因为没有前缀笔记本，可以作为初始值。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> nums = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] flag = <span class="keyword">new</span> <span class="keyword">int</span>[nums+<span class="number">1</span>]; <span class="comment">// 记录选择笔记本的数量</span></span><br><span class="line">        dp[<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nums; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> in = sc.nextInt();</span><br><span class="line">            dp[i] = Math.max(in + dp[i-<span class="number">2</span>], dp[i-<span class="number">1</span>]); <span class="comment">// 动态规划表达式，最大点赞数</span></span><br><span class="line">            <span class="comment">// 如果不选择当前笔记本</span></span><br><span class="line">            <span class="keyword">if</span>(dp[i] == dp[i-<span class="number">1</span>])&#123;</span><br><span class="line">                flag[i] = flag[i-<span class="number">1</span>]; <span class="comment">// 等于之前选择的笔记本数量</span></span><br><span class="line">            <span class="comment">// 如果选择了当前笔记本</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag[i] = flag[i-<span class="number">2</span>]+<span class="number">1</span>; <span class="comment">// 在之前基础上加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[nums] + <span class="string">" "</span> + flag[nums]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倒卖战利品"><a href="#倒卖战利品" class="headerlink" title="倒卖战利品"></a>倒卖战利品</h2><p>在游戏中，击败魔物后，薯队长获得了N件宝物，接下来得把这些宝物卖给宝物回收员来赚点小钱。这个回收员有个坏毛病，每次卖给他一件宝 物后，之后他就看不上比这件宝物差的宝物了。在这个世界中，衡量宝物的好坏有两个维度，稀有度X和实用度H，回收员在回收一个宝物A 后，下一个宝物的稀有度和实用度都不能低于宝物A。那么薯队长如何制定售卖顺序，才能卖给回收员宝物总个数最多。</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一行一个正整数N。 接下来N行。每行两个整数分别表示X和H </span><br><span class="line">X1 H1 X2 H2 … XN HN</span><br><span class="line">输入限制： 对于<span class="number">70</span>%的数据： </span><br><span class="line"><span class="number">0</span>&lt;N&lt;<span class="number">10</span>^<span class="number">4</span> </span><br><span class="line"><span class="number">0</span>&lt;Xi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">0</span>&lt;Hi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">100</span>%的数据：</span><br><span class="line"><span class="number">0</span>&lt;N&lt;<span class="number">10</span>^<span class="number">6</span></span><br><span class="line"><span class="number">0</span>&lt;Xi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">0</span>&lt;Hi&lt;<span class="number">10</span>^<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数，表示最多可以卖出的宝物数</span><br></pre></td></tr></table></figure><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题利用了单调栈的思想，首先将所有数据读取到一个二维整型数组中，然后对整型数组进行排序，依次对第一列X和第二列H进行排序，此时X列应为有序递增的，那么就只需要确定H列即可。首先从小到大输入H，直到新的H比最大的那一位小，这证明这一位需要取代之前的某一位才可以继续向后取值。通过二分查找找到已读取H数组中第一位大于新H值的那一位，将这一位的值替换为新值，然后继续向后输入新H值。反复这个过程，直到所有H都被插入过。此时H结果数组的长度就是最终的结果。</p><p>例子</p><p>(3,2), (1,1), (1,3), (1,2)</p><p>排序</p><p>(1,1), (1,2), (1,3), (3,2)</p><p>忽略X位，仅看H位，依次输入结果数组</p><p>1，2，3</p><p>最后一个2小于数组中最后一位3，则找到第一个不大于新H值的值，即数组中的第一位2，用新H替换掉这一位就可以继续输入后续的新H。</p><p>全部输入完成后结果数组的长度就是最终结果。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> nums = sc.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 读取数据，保存至二维数组</span></span><br><span class="line">            <span class="keyword">int</span>[][] baobei = <span class="keyword">new</span> <span class="keyword">int</span>[nums][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> h = sc.nextInt();</span><br><span class="line">                baobei[i][<span class="number">0</span>] = x;</span><br><span class="line">                baobei[i][<span class="number">1</span>] = h;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 自定义排序，排序第一列，并根据第一列排序第二列</span></span><br><span class="line">            Arrays.sort(baobei, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span></span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 结果List集合</span></span><br><span class="line">            <span class="comment">// 将所有H值依次处理到List集合中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)&#123;</span><br><span class="line">                <span class="comment">// 如果单调栈上是空的，或者新的H值大于最后一位（最大的）H值，直接插入到栈的尾端</span></span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty() || baobei[i][<span class="number">1</span>] &gt; stack.get(stack.size()-<span class="number">1</span>))&#123;</span><br><span class="line">                    stack.add(baobei[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 如果新的H值小于等于最后一位（最大的）H值，则需要找到第一个大于等于新H的位</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 二分查找，找到第一个大于等于新H的位</span></span><br><span class="line">                    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> r = stack.size();</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span>(stack.get(m) &gt;= baobei[i][<span class="number">1</span>]) r = m;</span><br><span class="line">                        <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.set(l, baobei[i][<span class="number">1</span>]); <span class="comment">// 将找到的这一位替换为新H值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(stack.size()); <span class="comment">// 打印结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="动态规划三大要素"><a href="#动态规划三大要素" class="headerlink" title="动态规划三大要素"></a>动态规划三大要素</h3><ol><li>定义数组元素的含义. 由于会使用一个数组来保存历史数据, 假设使用一个一维数组dp[], 有一个很重要的点就是规定这个数组元素的含义, 例如dp[i]是什么意思.</li><li>找出数组元素之间的关系式, 动态规划类似归纳法, 计算dp[n]时可以利用dp[n-1], dp[n-2], …, dp[1]来推出dp[n]的, 即利用历史数据来推断出新的元素值, 所以需要找到数组元素之间的关心式, 例如dp[n] = dp[n-1] + dp[n-2], 就是一种关系式. 这一步也是最难的一步.</li><li>找出初始值. 如同数学归纳法, 虽然知道了数组元素间的关系式, 如 dp[n] = dp[n-1] + dp[n-2], 则可以通过dp[n-1] 和 dp[n-2]计算dp[n], 但是需要知道初始值, 否则就会一直推下去. 例如dp[3] = dp[2] + dp[1]. 而dp[2] 和 dp[1]无法继续分解, 所以必须可以直接获取dp[2]和dp[1]的值, 这就是初始值.</li></ol><p>获得了初始值, 并且拥有了数组元素之间的关系式, 就可以得到dp[n]的值了. dp[n]的含义由自己定义, 想要求什么就可以定义成什么.</p><p>需要注意对初始值的严谨设置, 需要根据经验去进行判断.</p><p>90%的字符串问题可以使用动态规划解决, 且90%为二维数组.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[单调栈解题三]<a href="https://blog.csdn.net/Cyan1956/article/details/106577339/" target="_blank" rel="noopener">https://blog.csdn.net/Cyan1956/article/details/106577339/</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法之冒泡排序，选择排序，插入排序</title>
      <link href="/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part1/"/>
      <url>/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part1/</url>
      
        <content type="html"><![CDATA[<p>排序算法是面试中最常见的题目之一了, 目前网络上已经有很多博客写了相当不错的对于十大排序算法的解释和总结，而这篇文章仅仅作为自己复习排序算法这个部分使用。</p><p>这一篇首先解释和总结一下排序算法中最基础的三大算法</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是最简单的排序方式，也是最易理解的排序算法。冒泡的意思就是最大或最小值一个个冒出来最终形成有序数组。</p><p>概述：通过不断对相邻两个元素的比较和交换，达到排序的目的。</p><p>具体流程是，从前向后依次对每一对相邻的元素进行比较和交互，直到最后一位，此时最后一位上的值就会是最大值。那么再次对除最后一位的剩余所有位执行相同的操作。直到排序完成。</p><p>冒泡排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b3f7.gif" alt="冒泡排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">// 比较</span></span><br><span class="line">                <span class="keyword">if</span>(input[j] &gt; input[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = input[j];</span><br><span class="line">                    input[j] = input[j+<span class="number">1</span>];</span><br><span class="line">                    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序还可以进一步优化，如果在中间某一次循环时发现这一次循环没有进行任何交换，那么可以代表这一次循环以及实现了整个数组有序，则可以放弃剩余未执行的循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 检查是否提前完成排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">// 比较</span></span><br><span class="line">                <span class="keyword">if</span>(input[j] &gt; input[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>; <span class="comment">// 执行了交换操作, 不能提前终止排序算法</span></span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = input[j];</span><br><span class="line">                    input[j] = input[j+<span class="number">1</span>];</span><br><span class="line">                    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果未发生交换, 则提取终止排序算法</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O（N<sup>2</sup>)，空间复杂度：O(1)，稳定排序，原地排序。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序也非常容易理解，选择的意思就是通过不断的从已有数组中进行选择最小/最大值并与第一位/最后一位进行交换，从而达到使数组有序的目的。</p><p>概述：不断在数组中寻找当前最小值。</p><p>具体流程是，找到当前数组中最小值，将其与第一位交换位置。然后从第二位开始的数组寻找最小值，将其与第二位交换位置。依次循环直到数组有序。</p><p>选择排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b404.gif" alt="选择排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="comment">// 找到最小值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(input[min] &gt; input[j])&#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最小值与当前子数组第一位进行交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = input[min];</span><br><span class="line">            input[min] = input[i];</span><br><span class="line">            input[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N<sup>2</sup>)，空间复杂度：O(1)，非稳定排序，原地排序。</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序作为三大基本排序之一，同样十分容易理解。插入可以看作是斗地主整理手牌的过程，从第二张开始向前比较，找到合适的位置插入。</p><p>概述：从第二个元素开始至最后一个元素结束，每个元素不断向前比较以找到小于当前元素的第一个值后的位置。</p><p>具体流程是，第一个元素不需要比较，第二个元素向前比较，小于第一个元素，则第一个元素的值向后移动，原第二元素继续向前比较，此时前方没有值则结束比较并插入。第三个元素采用同样的方式，找到第一个小于自己的元素或向前已经没有元素时可插入其后的位置。依次处理每一位，直至所有位处理完毕即为有序数组。</p><p>插入排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b3fe.gif" alt="插入排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = input[i]; <span class="comment">// 取出需排序的元素</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = i; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp &lt; input[j - <span class="number">1</span>])&#123;</span><br><span class="line">                    input[j] = input[j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            input[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N<sup>2</sup>)，空间复杂度：O(1)，稳定排序，原地排序。</p><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><p>稳定排序</p><p>简单来说稳定排序就是指两个或多个相同的值在排序后，它们的相对位置依然保持不变。</p><p>原地排序</p><p>不使用任何辅助数据结构，仅在原数据结构上完成了排序操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[流程图示]<a href="https://blog.csdn.net/m0_37907797/article/details/102835456" target="_blank" rel="noopener">https://blog.csdn.net/m0_37907797/article/details/102835456</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法之希尔排序，堆排序，快速排序，归并排序</title>
      <link href="/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part2/"/>
      <url>/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part2/</url>
      
        <content type="html"><![CDATA[<p>这一部分排序代码在基础三大排序算法的基础上进行了优化和更新，性能大大提升，其中堆排序，快速排序和归并排序都是面试中的常客。</p><p>PS：我的第一次面试快排就写错了…，还是练习的太少了。</p><a id="more"></a><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是插入排序的一种优化。</p><p>在插入排序的基础上增加了一个控制比较步长的循环，内部与步长相关的也需要进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] input) &#123;</span><br><span class="line"><span class="keyword">int</span> len = input.length;</span><br><span class="line"><span class="comment">// 获得不同的比较步长</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> inc = len/<span class="number">2</span>; inc &gt; <span class="number">0</span>; inc = inc / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 插入排序，将所有与步长相关的改成新的步长，而不是普通插入排序的1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = inc; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = input[i];</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = i; j &gt;= inc; j = j - inc) &#123;</span><br><span class="line"><span class="comment">// j - 1位的元素与temp进行比较</span></span><br><span class="line"><span class="keyword">if</span>(temp &lt; input[j - inc]) &#123;</span><br><span class="line">input[j] = input[j - inc];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">input[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] input) &#123;</span><br><span class="line"><span class="keyword">int</span> len = input.length;</span><br><span class="line"><span class="comment">// 从最后一个父节点开始，依次下沉建大顶堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = (len - <span class="number">2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">input = heap(input, i, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 交换堆顶元素（最大元素）与最后一位元素</span></span><br><span class="line"><span class="keyword">int</span> temp = input[i];</span><br><span class="line">input[i] = input[<span class="number">0</span>];</span><br><span class="line">input[<span class="number">0</span>] = temp;</span><br><span class="line">input = heap(input, <span class="number">0</span>, i); <span class="comment">// 从根下沉，重构大顶堆，最后一位不算在内。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heap(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> parent, <span class="keyword">int</span> len) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[parent]; <span class="comment">// 保存父结点值</span></span><br><span class="line"><span class="keyword">int</span> child = <span class="number">2</span> * parent + <span class="number">1</span>; <span class="comment">// 父节点的左子节点</span></span><br><span class="line"><span class="comment">// 左子节点处于数组范围内</span></span><br><span class="line"><span class="keyword">while</span>(child &lt; len) &#123;</span><br><span class="line"><span class="comment">// 右子节点处于范围内，且大于左子节点，则取出右子节点去对比</span></span><br><span class="line"><span class="keyword">if</span>(child + <span class="number">1</span> &lt; len &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>]) &#123;</span><br><span class="line">child++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父节点大于最大子节点，当前位置就是正确位置，结束循环</span></span><br><span class="line"><span class="keyword">if</span>(temp &gt; arr[child]) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 否则，父节点处应该是最大子节点的位置</span></span><br><span class="line">arr[parent] = arr[child];</span><br><span class="line"><span class="comment">// 父节点下沉继续对比</span></span><br><span class="line">parent = child;</span><br><span class="line"><span class="comment">// 子节点下沉继续对比</span></span><br><span class="line">child = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当抵达最底层或者找到父节点正确的位置时</span></span><br><span class="line">arr[parent] = temp; <span class="comment">// 父节点被放置在新的位置</span></span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>利用了二分的思想，每次取一个值作为分割点，将所有比它小的放在左边，所有比他大的放在右边，此时这个点就已经是有序的了，不会再发生改变。然后再处理其它的点直到所有的点被处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] input) &#123;</span><br><span class="line"><span class="keyword">if</span>(input.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span>[] res = quick(input, <span class="number">0</span>, input.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quick(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span> arr; <span class="comment">// 递归结束条件</span></span><br><span class="line"><span class="keyword">int</span> mid = sort(arr, left, right); <span class="comment">// 获得已确定的值</span></span><br><span class="line"><span class="comment">// 递归处理左右两个部分</span></span><br><span class="line">quick(arr, left, mid - <span class="number">1</span>);</span><br><span class="line">quick(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[left]; <span class="comment">// 设第一位为分割点，也可以写成随机选择，避免特殊情况导致的效率降低。</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; arr[right] &gt; temp) right--; <span class="comment">// 右侧大于分割点的跳过</span></span><br><span class="line">arr[left] = arr[right]; <span class="comment">// 将发现的值赋给当前left下标的元素</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt; temp) left++; <span class="comment">// 左侧小于分割点的跳过</span></span><br><span class="line">arr[right] = arr[left]; <span class="comment">// 将发现的值赋给当前right下标的元素</span></span><br><span class="line">&#125;</span><br><span class="line">arr[left] = temp; <span class="comment">// left所处的位置就是分割点应在的位置</span></span><br><span class="line"><span class="keyword">return</span> left; <span class="comment">// 返回分割点坐标，以便处理左右两侧元素。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line"><span class="keyword">int</span> len = input.length;</span><br><span class="line"><span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span> input;</span><br><span class="line">input = sort(input, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] input, <span class="keyword">int</span> left, <span class="keyword">int</span> right)&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">sort(input, left, mid); <span class="comment">// 左侧分治</span></span><br><span class="line">sort(input, mid + <span class="number">1</span>, right); <span class="comment">// 右侧分治</span></span><br><span class="line"></span><br><span class="line">merge(input, left, mid, right); <span class="comment">// 左右归并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> left; <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>]; <span class="comment">// 辅助数组</span></span><br><span class="line"><span class="keyword">int</span> i = left;</span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="keyword">if</span>(input[i] &lt; input[j])&#123;</span><br><span class="line">temp[index++] = input[i++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp[index++] = input[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) temp[index++] = input[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= right) temp[index++] = input[j++];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将辅助数组中的值放回原数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> cur = <span class="number">0</span>; cur &lt; index; cur++)&#123;</span><br><span class="line">input[left++] = temp[cur];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关资源整合</title>
      <link href="/2020/06/01/%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/"/>
      <url>/2020/06/01/%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>各种书籍资源以及网络资源，备份用。</p><a id="more"></a><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="https://pan.baidu.com/s/1zKmakqZa_AMG_xpx8QkzeA" target="_blank" rel="noopener">Java编程思想</a>，提取码：8l7w<br><a href="https://pan.baidu.com/s/1kR6uhMeZl-HWL0BIKmkBig" target="_blank" rel="noopener">深入浅出Java多线程</a>，提取码：12da<br><a href="https://pan.baidu.com/s/19Hn1N2i-0Os8KX9pAIPTMg" target="_blank" rel="noopener">Java并发编程的艺术</a>，提取码：ye6e<br><a href="https://pan.baidu.com/s/1P_cuQWrL0_7t7Grp3lPZsA" target="_blank" rel="noopener">深入理解Java虚拟机</a>，提取码：ewzh</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><a href="https://pan.baidu.com/s/1Wm4eE-81sRl52R0cA3djMA" target="_blank" rel="noopener">AndroidStudio从入门到精通</a>，提取码：f2w2</p><p><a href="https://pan.baidu.com/s/1wsQUONF6ofEgTUP71rcevQ" target="_blank" rel="noopener">Android开发艺术探索</a>，提取码：73xa</p><p><a href="https://pan.baidu.com/s/1ajpuuz0HwbBhQE7KpoY1WQ" target="_blank" rel="noopener">阿里巴巴-Java开发手册</a>，提取码：hwrd</p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p><a href="https://pan.baidu.com/s/11tUrG8pd9VvYD2YUddHl_g" target="_blank" rel="noopener">算法书籍合集</a>，提取码：e66p</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p><a href="https://pan.baidu.com/s/1OLjm0S8YOy-8JhhFT6FajQ" target="_blank" rel="noopener">程序是怎样跑起来的</a>，提取码：aprn</p><p><a href="https://pan.baidu.com/s/1Gk0UJj04Xd4ttWlDDhdv7w" target="_blank" rel="noopener">计算机程序设计艺术</a>，提取码：9039</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><a href="https://pan.baidu.com/s/1Wc0RsSTexdtcPMXs7SUVjQ" target="_blank" rel="noopener">图解HTTP</a>，提取码：0bx5</p><p><a href="https://pan.baidu.com/s/1DPK4Wern4HUYAa_b2gRJzQ" target="_blank" rel="noopener">计算机网络-自顶向下方法</a>，提取码：la3q</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="https://pan.baidu.com/s/1_DBixi7j_up1nW53Dyg48A" target="_blank" rel="noopener">MySQL实战45讲</a>，提取码：3n9x</p><h2 id="面试突击"><a href="#面试突击" class="headerlink" title="面试突击"></a>面试突击</h2><p><a href="https://pan.baidu.com/s/166kEwVh8YT_hsu67s97xSg" target="_blank" rel="noopener">程序员内功修炼</a>，提取码：80f5</p><p><a href="https://pan.baidu.com/s/1V6Esp0ZnFm9OJPTU-Fm88A" target="_blank" rel="noopener">JavaGuide面试突击</a>，提取码：z6q2</p><p><a href="https://pan.baidu.com/s/1mS5QpOVat-XCLTfU4fmDjQ" target="_blank" rel="noopener">程序员代码面试指南：IT 名企算法与数据结构题目最优解</a>，提取码：idl6</p><h2 id="网络资源-博客"><a href="#网络资源-博客" class="headerlink" title="网络资源/博客"></a>网络资源/博客</h2><p><a href="https://blog.csdn.net/qq_19431333/category_6671933.html" target="_blank" rel="noopener">源码解析</a>：一个对各种Java源码解析的博客。</p><p><a href="https://www.jianshu.com/u/203b606b956c" target="_blank" rel="noopener">面试问题</a>：一个整合Android校招面试问题的博客。</p><p><a href="https://leetcode.jp/problems.php?keyword=" target="_blank" rel="noopener">LeetCode大全</a>：一个整合所有LeetCode的博客。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(1 - 5)</title>
      <link href="/2020/05/31/%E5%89%91%E6%8C%87offerPart1/"/>
      <url>/2020/05/31/%E5%89%91%E6%8C%87offerPart1/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第一至第五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a><a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二维数组中的查找</a></h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>方法一，暴力解法。</p><p>对每一行从前向后依次查找，没有利用到题目中给出的规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = array.length;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，二分查找。</p><p>对每一行执行二分查找，利用了每行递增的规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = array.length;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = col - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>); <span class="comment">//防止溢出, 使用位运算</span></span><br><span class="line">                <span class="comment">// 二分查找</span></span><br><span class="line">                <span class="keyword">if</span>(array[i][mid] &lt; target)&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid] &gt; target)&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，二分法优化。</p><p>根据规律可知，数组每列从上到下递增，每行从左到右递增，则可以从左下角或者右上角开始寻找，当当前指大于目标值时横向向右移动，当前值小于目标值时纵向向上移动，最终可以对目标值进行定位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左下角坐标</span></span><br><span class="line">        <span class="keyword">int</span> row = array.length - <span class="number">1</span>; <span class="comment">// row = 0;右上角坐标</span></span><br><span class="line">        <span class="keyword">int</span> col = <span class="number">0</span>; <span class="comment">// col = array[0].length - 1;右上角坐标</span></span><br><span class="line">        <span class="keyword">while</span>(row &gt;= <span class="number">0</span> &amp;&amp; col &lt;= array[<span class="number">0</span>].length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 当前位正好就是目标</span></span><br><span class="line">            <span class="keyword">if</span>(array[row][col] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 当前位大于目标值, 则目标值应在当前位上方</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[row][col] &gt; target)&#123;</span><br><span class="line">                row--;</span><br><span class="line">            <span class="comment">// 当前位小于目标值, 则目标值应在当前位右方</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[row][col] &lt; target)&#123;</span><br><span class="line">                col++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a><a href="https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">替换空格</a></h2><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p>方法一，调用内部函数。</p><p>通过调用内部方法直接进行替换操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toString().replace(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，使用一个新的StringBuffer保存结果。</p><p>创建一个新的StringBuffer，将原有的每一位复制到新的StringBuffer上，如果遇到空格，则追加“%20”。需要使用额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="comment">// 判断当前位是否是空格</span></span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != <span class="string">' '</span>)&#123;</span><br><span class="line">                sb.append(str.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(<span class="string">"%20"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，双指针法，从后向前搜素空格并替换。</p><p>从前向后搜素替换会导致后方元素被覆盖，而从后向前搜素替换可以避免这种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = str.length() - <span class="number">1</span>; <span class="comment">// 原长度</span></span><br><span class="line">        <span class="keyword">int</span> newLength = length; <span class="comment">// 新的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">' '</span>)&#123;</span><br><span class="line">                newLength += <span class="number">2</span>; <span class="comment">// %20是三位, 比空格多两位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str.setLength(newLength+<span class="number">1</span>); <span class="comment">// 扩展StringBuffer的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = length; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            <span class="comment">// 找到空格</span></span><br><span class="line">            <span class="keyword">if</span>(str.charAt(j) == <span class="string">' '</span>)&#123;</span><br><span class="line">                <span class="comment">// 依次加入StringBuffer的尾端</span></span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'%'</span>);</span><br><span class="line">            <span class="comment">// 不是空格则直接加入尾端</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                str.setCharAt(newLength--, str.charAt(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a><a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">从尾到头打印链表</a></h2><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><p>方法一，使用辅助栈。</p><p>栈的特性是后入先出，所以根据这个特性可以先将所有链表元素压入栈，再依次取出即可得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(listNode == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 辅助栈</span></span><br><span class="line">        ListNode newHead = listNode;</span><br><span class="line">        <span class="comment">// 将链表中节点的元素值依次插入栈</span></span><br><span class="line">        <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(newHead.val);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从栈中依次取出, 并存入ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><p>递归的特性是一层层深入，抵达最底层后再逐层返回，正好与题目的要求一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(listNode == <span class="keyword">null</span>) <span class="keyword">return</span> res; <span class="comment">// 递归终止条件</span></span><br><span class="line">        res = printListFromTailToHead(listNode.next); <span class="comment">// 深入</span></span><br><span class="line">        res.add(listNode.val); <span class="comment">// 返回途中将当前节点值添加到ArrayList</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，多指针反转链表。</p><p>利用多个指针从前到后依次进行反转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        ListNode pre = <span class="keyword">null</span>; <span class="comment">// 前缀节点指针</span></span><br><span class="line">        ListNode cur = listNode; <span class="comment">// 当前节点指针</span></span><br><span class="line">        ListNode next = listNode; <span class="comment">// 保存当前节点的下一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = cur.next; <span class="comment">// 保存下一个节点</span></span><br><span class="line">            cur.next = pre; <span class="comment">// 反转，指向前缀节点</span></span><br><span class="line">            pre = cur; <span class="comment">// 向后移动</span></span><br><span class="line">            cur = next; <span class="comment">// 向后移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        listNode = pre; <span class="comment">// 最终前缀节点处为头节点</span></span><br><span class="line">        <span class="comment">// 依次输出至ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(listNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.add(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&tqId=11157&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">重建二叉树</a></h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p>方法一，</p><p>由于输入了前序遍历序列和中序遍历序列，根据前序遍历的规律可得根节点位置。可知1是整棵树的根节点的值。在中序遍历中找到1，则1左边的4，7，2是左子树，1右边的5，3，8，6是右子树。再对左子树和右子树进行相同的操作即可得到最终的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用HashMap将所有中序遍历的结果保存，方便后续查询</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= in.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            map.put(in[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = getTree(pre, <span class="number">0</span>, pre.length - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> inLeft)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[left]); <span class="comment">// 前序遍历中根节点永远是最左边的元素</span></span><br><span class="line">        <span class="keyword">int</span> index = map.get(root.val); <span class="comment">// 中序遍历中根节点所处的位置</span></span><br><span class="line">        <span class="keyword">int</span> leftLen = index - inLeft; <span class="comment">// 左子树节点数量</span></span><br><span class="line">        root.left = getTree(pre, left + <span class="number">1</span>, left + leftLen, inLeft); <span class="comment">// 左子树</span></span><br><span class="line">        root.right = getTree(pre, left + leftLen + <span class="number">1</span>, right, index + <span class="number">1</span>); <span class="comment">// 右子树</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">用两个栈实现队列</a></h2><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p>方法一，两栈分工。</p><p>栈一负责接收输入数据，栈二负责输出。</p><p>栈的特性是先入后出，队列的特性是先入先出。所以可以使用两个栈的特性，第一个栈接收数据后，在第二个栈中转手，使其顺序变为正常顺序，然后再输出。</p><ol><li><p>接收数据时，直接压入栈一。</p><p> 栈一：{A,B,C}，栈二：{}</p></li><li><p>想要弹出数据时，如果栈二是空的，则将栈一内数据全部推出压入栈二。再从栈二推出一个数据。</p><p> 栈一：{}，栈二：{C,B,A} -&gt; 栈一：{}，栈二：{C,B}</p></li><li><p>继续弹出数据，栈二非空，直接弹出栈二顶端数据。</p><p> 栈一：{}，栈二：{C}</p></li><li><p>再压入一个数据，直接压入栈一。</p><p> 栈一：{D}，栈二：{C}</p></li><li><p>弹出数据，栈二非空，弹出C，继续弹出数据，栈二为空，则将栈一数据压入栈二，然后弹出。这样就可以实现一个队列。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="递归的三大要素"><a href="#递归的三大要素" class="headerlink" title="递归的三大要素"></a>递归的三大要素</h3><ol><li>明确递归的函数想要干什么？（函数的功能是什么）</li><li>寻找递归的结束条件，即参数是什么的时候递归结束，并将结果返回。此时应该可以根据这个参数的值知道函数的结果是什么。</li><li>找到函数的等价关系式，不断缩小参数的范围，缩小后，可以通过一些辅助的变量或操作使原函数的结果不变。</li></ol><p>每次第三步完成后都应该返回第二步检查是否出现了遗漏的条件。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/29/hello-world/"/>
      <url>/2020/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2020/05/29/Hexo/"/>
      <url>/2020/05/29/Hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2020/05/29/problems/"/>
      <url>/2020/05/29/problems/</url>
      
        <content type="html"><![CDATA[<p>第一篇文章测试</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
