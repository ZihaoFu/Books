<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小红书2020校招Android方向笔试题卷三</title>
      <link href="/2020/06/06/%E5%B0%8F%E7%BA%A2%E4%B9%A62020%E5%8D%B7%E4%B8%89/"/>
      <url>/2020/06/06/%E5%B0%8F%E7%BA%A2%E4%B9%A62020%E5%8D%B7%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/test/23567675/summary" target="_blank" rel="noopener">牛客网小红书2020校招Android方向笔试题卷三</a><br>记录了一些解题思路及实现代码。<br>整体难度偏易。</p><a id="more"></a><h2 id="笔记草稿"><a href="#笔记草稿" class="headerlink" title="笔记草稿"></a>笔记草稿</h2><p>薯队长写了一篇笔记草稿，请你帮忙输出最后内容。<br>1.输入字符包括，”(“  ,  “)”  和  “&lt;”和其他字符。<br>2.其他字符表示笔记内容。<br>3.()之间表示注释内容，任何字符都无效。  括号保证成对出现。<br>4.”&lt;”表示退格,  删去前面一个笔记内容字符。括号不受”&lt;”影响  。 </p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一行字符串。长度&lt;=<span class="number">10000.</span></span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行字符串，表示最终的笔记内容。</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Corona</span><span class="params">(Trump)</span><span class="title">USA</span></span>&lt;&lt;&lt;Virus</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CoronaVirus</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题很简单的根据读取不同的元素内容执行不同操作即可。由于括号成对出现，可以用一个整型值代表是否出现括号，当没有括号时才向StringBuilder中增加字符，有括号时略过，遇到一个’&lt;’就删去StringBuilder最后一位即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String input = sc.nextLine();</span><br><span class="line">        <span class="keyword">char</span>[] arr = input.toCharArray();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> i : arr)&#123;.</span><br><span class="line">            <span class="comment">// 遇到正括号，flag++代表遇到括号了</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'('</span>)&#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遇到反括号，flag--代表结束了一个括号</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">')'</span>)&#123;</span><br><span class="line">                flag--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果flag不是0则代表依然处于括号内</span></span><br><span class="line">            <span class="keyword">if</span>(flag != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 遇到&lt;符号，代表需要移除前一位</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">                sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上述情况都不满足代表是一个正常字符，可以插入</span></span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="笔记精选"><a href="#笔记精选" class="headerlink" title="笔记精选"></a>笔记精选</h2><p>薯队长写了n篇笔记，编号从1~n,每篇笔记都获得了不少点赞数。<br>薯队长想从中选出一些笔记，作一个精选集合。挑选的时候有两个规则：<br>1.不能出现连续编号的笔记。<br>2.总点赞总数最多<br>如果满足1，2条件有多种方案，挑选笔记总数最少的那种</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包含两行。第一行整数n表示多少篇笔记。 第二行n个整数分别表示n篇笔记的获得的点赞数。   </span><br><span class="line"> （<span class="number">0</span>&lt;n&lt;=<span class="number">1000</span>,    <span class="number">0</span>&lt;=点赞数&lt;=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出两个整数<span class="symbol">x</span>,<span class="symbol">y</span>。空格分割。</span><br><span class="line"> <span class="symbol">x</span>表示总点赞数，<span class="symbol">y</span>表示挑选的笔记总数。</span><br></pre></td></tr></table></figure><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>实际上这道题与LeetCode上打家劫舍最简单的那一版是一样的。多了一个记录挑选笔记总数的部分。</p><p>本题利用动态规划思想，根据动态规划的三大要素，</p><p>第一步需要确定数组元素的含义，这个题中数组元素的含义就是点赞数达到最大。</p><p>第二步找出数组元素之间的关系式。易知，对于当前元素，要么选择它，则dp[i] = arr[i] + dp[i-2]，不能与相邻的一起选择，又想要达到最大点赞数，就只能与上上个的最大值相加。要么不选择它，则dp[i] = dp[i-1]，不选择它，那么当前元素上的最大点赞数应该与上一位的最大点赞数相同。那么找到两者结果最大的那一个作为当前元素的结果即可为最大点赞数。</p><p>第三步找出初始值，很容易知道，dp[1]的初始值就是它本身，因为没有前缀笔记本，可以作为初始值。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> nums = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] flag = <span class="keyword">new</span> <span class="keyword">int</span>[nums+<span class="number">1</span>]; <span class="comment">// 记录选择笔记本的数量</span></span><br><span class="line">        dp[<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nums; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> in = sc.nextInt();</span><br><span class="line">            dp[i] = Math.max(in + dp[i-<span class="number">2</span>], dp[i-<span class="number">1</span>]); <span class="comment">// 动态规划表达式，最大点赞数</span></span><br><span class="line">            <span class="comment">// 如果不选择当前笔记本</span></span><br><span class="line">            <span class="keyword">if</span>(dp[i] == dp[i-<span class="number">1</span>])&#123;</span><br><span class="line">                flag[i] = flag[i-<span class="number">1</span>]; <span class="comment">// 等于之前选择的笔记本数量</span></span><br><span class="line">            <span class="comment">// 如果选择了当前笔记本</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag[i] = flag[i-<span class="number">2</span>]+<span class="number">1</span>; <span class="comment">// 在之前基础上加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[nums] + <span class="string">" "</span> + flag[nums]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倒卖战利品"><a href="#倒卖战利品" class="headerlink" title="倒卖战利品"></a>倒卖战利品</h2><p>在游戏中，击败魔物后，薯队长获得了N件宝物，接下来得把这些宝物卖给宝物回收员来赚点小钱。这个回收员有个坏毛病，每次卖给他一件宝 物后，之后他就看不上比这件宝物差的宝物了。在这个世界中，衡量宝物的好坏有两个维度，稀有度X和实用度H，回收员在回收一个宝物A 后，下一个宝物的稀有度和实用度都不能低于宝物A。那么薯队长如何制定售卖顺序，才能卖给回收员宝物总个数最多。</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一行一个正整数N。 接下来N行。每行两个整数分别表示X和H </span><br><span class="line">X1 H1 X2 H2 … XN HN</span><br><span class="line">输入限制： 对于<span class="number">70</span>%的数据： </span><br><span class="line"><span class="number">0</span>&lt;N&lt;<span class="number">10</span>^<span class="number">4</span> </span><br><span class="line"><span class="number">0</span>&lt;Xi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">0</span>&lt;Hi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">100</span>%的数据：</span><br><span class="line"><span class="number">0</span>&lt;N&lt;<span class="number">10</span>^<span class="number">6</span></span><br><span class="line"><span class="number">0</span>&lt;Xi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">0</span>&lt;Hi&lt;<span class="number">10</span>^<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数，表示最多可以卖出的宝物数</span><br></pre></td></tr></table></figure><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题利用了单调栈的思想，首先将所有数据读取到一个二维整型数组中，然后对整型数组进行排序，依次对第一列X和第二列H进行排序，此时X列应为有序递增的，那么就只需要确定H列即可。首先从小到大输入H，直到新的H比最大的那一位小，这证明这一位需要取代之前的某一位才可以继续向后取值。通过二分查找找到已读取H数组中第一位大于新H值的那一位，将这一位的值替换为新值，然后继续向后输入新H值。反复这个过程，直到所有H都被插入过。此时H结果数组的长度就是最终的结果。</p><p>例子</p><p>(3,2), (1,1), (1,3), (1,2)</p><p>排序</p><p>(1,1), (1,2), (1,3), (3,2)</p><p>忽略X位，仅看H位，依次输入结果数组</p><p>1，2，3</p><p>最后一个2小于数组中最后一位3，则找到第一个不大于新H值的值，即数组中的第一位2，用新H替换掉这一位就可以继续输入后续的新H。</p><p>全部输入完成后结果数组的长度就是最终结果。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> nums = sc.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 读取数据，保存至二维数组</span></span><br><span class="line">            <span class="keyword">int</span>[][] baobei = <span class="keyword">new</span> <span class="keyword">int</span>[nums][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> h = sc.nextInt();</span><br><span class="line">                baobei[i][<span class="number">0</span>] = x;</span><br><span class="line">                baobei[i][<span class="number">1</span>] = h;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 自定义排序，排序第一列，并根据第一列排序第二列</span></span><br><span class="line">            Arrays.sort(baobei, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span></span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 结果List集合</span></span><br><span class="line">            <span class="comment">// 将所有H值依次处理到List集合中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)&#123;</span><br><span class="line">                <span class="comment">// 如果单调栈上是空的，或者新的H值大于最后一位（最大的）H值，直接插入到栈的尾端</span></span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty() || baobei[i][<span class="number">1</span>] &gt; stack.get(stack.size()-<span class="number">1</span>))&#123;</span><br><span class="line">                    stack.add(baobei[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 如果新的H值小于等于最后一位（最大的）H值，则需要找到第一个大于等于新H的位</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 二分查找，找到第一个大于等于新H的位</span></span><br><span class="line">                    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> r = stack.size();</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span>(stack.get(m) &gt;= baobei[i][<span class="number">1</span>]) r = m;</span><br><span class="line">                        <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.set(l, baobei[i][<span class="number">1</span>]); <span class="comment">// 将找到的这一位替换为新H值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(stack.size()); <span class="comment">// 打印结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="动态规划三大要素"><a href="#动态规划三大要素" class="headerlink" title="动态规划三大要素"></a>动态规划三大要素</h3><ol><li>定义数组元素的含义. 由于会使用一个数组来保存历史数据, 假设使用一个一维数组dp[], 有一个很重要的点就是规定这个数组元素的含义, 例如dp[i]是什么意思.</li><li>找出数组元素之间的关系式, 动态规划类似归纳法, 计算dp[n]时可以利用dp[n-1], dp[n-2], …, dp[1]来推出dp[n]的, 即利用历史数据来推断出新的元素值, 所以需要找到数组元素之间的关心式, 例如dp[n] = dp[n-1] + dp[n-2], 就是一种关系式. 这一步也是最难的一步.</li><li>找出初始值. 如同数学归纳法, 虽然知道了数组元素间的关系式, 如 dp[n] = dp[n-1] + dp[n-2], 则可以通过dp[n-1] 和 dp[n-2]计算dp[n], 但是需要知道初始值, 否则就会一直推下去. 例如dp[3] = dp[2] + dp[1]. 而dp[2] 和 dp[1]无法继续分解, 所以必须可以直接获取dp[2]和dp[1]的值, 这就是初始值.</li></ol><p>获得了初始值, 并且拥有了数组元素之间的关系式, 就可以得到dp[n]的值了. dp[n]的含义由自己定义, 想要求什么就可以定义成什么.</p><p>需要注意对初始值的严谨设置, 需要根据经验去进行判断.</p><p>90%的字符串问题可以使用动态规划解决, 且90%为二维数组.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[单调栈解题三]<a href="https://blog.csdn.net/Cyan1956/article/details/106577339/" target="_blank" rel="noopener">https://blog.csdn.net/Cyan1956/article/details/106577339/</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法之冒泡排序，选择排序，插入排序</title>
      <link href="/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part1/"/>
      <url>/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part1/</url>
      
        <content type="html"><![CDATA[<p>排序算法是面试中最常见的题目之一了, 目前网络上已经有很多博客写了相当不错的对于十大排序算法的解释和总结，而这篇文章仅仅作为自己复习排序算法这个部分使用。</p><p>这一篇首先解释和总结一下排序算法中最基础的三大算法</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是最简单的排序方式，也是最易理解的排序算法。冒泡的意思就是最大或最小值一个个冒出来最终形成有序数组。</p><p>概述：通过不断对相邻两个元素的比较和交换，达到排序的目的。</p><p>具体流程是，从前向后依次对每一对相邻的元素进行比较和交互，直到最后一位，此时最后一位上的值就会是最大值。那么再次对除最后一位的剩余所有位执行相同的操作。直到排序完成。</p><p>冒泡排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b3f7.gif" alt="冒泡排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">// 比较</span></span><br><span class="line">                <span class="keyword">if</span>(input[j] &gt; input[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = input[j];</span><br><span class="line">                    input[j] = input[j+<span class="number">1</span>];</span><br><span class="line">                    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序还可以进一步优化，如果在中间某一次循环时发现这一次循环没有进行任何交换，那么可以代表这一次循环以及实现了整个数组有序，则可以放弃剩余未执行的循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 检查是否提前完成排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">// 比较</span></span><br><span class="line">                <span class="keyword">if</span>(input[j] &gt; input[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>; <span class="comment">// 执行了交换操作, 不能提前终止排序算法</span></span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = input[j];</span><br><span class="line">                    input[j] = input[j+<span class="number">1</span>];</span><br><span class="line">                    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果未发生交换, 则提取终止排序算法</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O（N<sup>2</sup>)，空间复杂度：O(1)，稳定排序，原地排序。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序也非常容易理解，选择的意思就是通过不断的从已有数组中进行选择最小/最大值并与第一位/最后一位进行交换，从而达到使数组有序的目的。</p><p>概述：不断在数组中寻找当前最小值。</p><p>具体流程是，找到当前数组中最小值，将其与第一位交换位置。然后从第二位开始的数组寻找最小值，将其与第二位交换位置。依次循环直到数组有序。</p><p>选择排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b404.gif" alt="选择排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="comment">// 找到最小值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(input[min] &gt; input[j])&#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最小值与当前子数组第一位进行交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = input[min];</span><br><span class="line">            input[min] = input[i];</span><br><span class="line">            input[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N<sup>2</sup>)，空间复杂度：O(1)，非稳定排序，原地排序。</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序作为三大基本排序之一，同样十分容易理解。插入可以看作是斗地主整理手牌的过程，从第二张开始向前比较，找到合适的位置插入。</p><p>概述：从第二个元素开始至最后一个元素结束，每个元素不断向前比较以找到小于当前元素的第一个值后的位置。</p><p>具体流程是，第一个元素不需要比较，第二个元素向前比较，小于第一个元素，则第一个元素的值向后移动，原第二元素继续向前比较，此时前方没有值则结束比较并插入。第三个元素采用同样的方式，找到第一个小于自己的元素或向前已经没有元素时可插入其后的位置。依次处理每一位，直至所有位处理完毕即为有序数组。</p><p>插入排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b3fe.gif" alt="插入排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = input[i]; <span class="comment">// 取出需排序的元素</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = i; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="comment">// 向前进行对比</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; input[j] &lt; input[j - <span class="number">1</span>])&#123;</span><br><span class="line">                    input[j] = input[j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 找到位置结束当前循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            input[j] = temp; <span class="comment">// 插入</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N<sup>2</sup>)，空间复杂度：O(1)，稳定排序，原地排序。</p><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><p>稳定排序</p><p>简单来说稳定排序就是指两个或多个相同的值在排序后，它们的相对位置依然保持不变。</p><p>原地排序</p><p>不使用任何辅助数据结构，仅在原数据结构上完成了排序操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[流程图示]<a href="https://blog.csdn.net/m0_37907797/article/details/102835456" target="_blank" rel="noopener">https://blog.csdn.net/m0_37907797/article/details/102835456</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关资源整合</title>
      <link href="/2020/06/01/%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/"/>
      <url>/2020/06/01/%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>各种书籍资源以及网络资源，备份用。</p><a id="more"></a><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="https://pan.baidu.com/s/1zKmakqZa_AMG_xpx8QkzeA" target="_blank" rel="noopener">Java编程思想</a>，提取码：8l7w<br><a href="https://pan.baidu.com/s/1kR6uhMeZl-HWL0BIKmkBig" target="_blank" rel="noopener">深入浅出Java多线程</a>，提取码：12da<br><a href="https://pan.baidu.com/s/19Hn1N2i-0Os8KX9pAIPTMg" target="_blank" rel="noopener">Java并发编程的艺术</a>，提取码：ye6e<br><a href="https://pan.baidu.com/s/1P_cuQWrL0_7t7Grp3lPZsA" target="_blank" rel="noopener">深入理解Java虚拟机</a>，提取码：ewzh</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><a href="https://pan.baidu.com/s/1Wm4eE-81sRl52R0cA3djMA" target="_blank" rel="noopener">AndroidStudio从入门到精通</a>，提取码：f2w2</p><p><a href="https://pan.baidu.com/s/1wsQUONF6ofEgTUP71rcevQ" target="_blank" rel="noopener">Android开发艺术探索</a>，提取码：73xa</p><p><a href="https://pan.baidu.com/s/1ajpuuz0HwbBhQE7KpoY1WQ" target="_blank" rel="noopener">阿里巴巴-Java开发手册</a>，提取码：hwrd</p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p><a href="https://pan.baidu.com/s/11tUrG8pd9VvYD2YUddHl_g" target="_blank" rel="noopener">算法书籍合集</a>，提取码：e66p</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p><a href="https://pan.baidu.com/s/1OLjm0S8YOy-8JhhFT6FajQ" target="_blank" rel="noopener">程序是怎样跑起来的</a>，提取码：aprn</p><p><a href="https://pan.baidu.com/s/1Gk0UJj04Xd4ttWlDDhdv7w" target="_blank" rel="noopener">计算机程序设计艺术</a>，提取码：9039</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><a href="https://pan.baidu.com/s/1Wc0RsSTexdtcPMXs7SUVjQ" target="_blank" rel="noopener">图解HTTP</a>，提取码：0bx5</p><p><a href="https://pan.baidu.com/s/1DPK4Wern4HUYAa_b2gRJzQ" target="_blank" rel="noopener">计算机网络-自顶向下方法</a>，提取码：la3q</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="https://pan.baidu.com/s/1_DBixi7j_up1nW53Dyg48A" target="_blank" rel="noopener">MySQL实战45讲</a>，提取码：3n9x</p><h2 id="面试突击"><a href="#面试突击" class="headerlink" title="面试突击"></a>面试突击</h2><p><a href="https://pan.baidu.com/s/166kEwVh8YT_hsu67s97xSg" target="_blank" rel="noopener">程序员内功修炼</a>，提取码：80f5</p><p><a href="https://pan.baidu.com/s/1V6Esp0ZnFm9OJPTU-Fm88A" target="_blank" rel="noopener">JavaGuide面试突击</a>，提取码：z6q2</p><p><a href="https://pan.baidu.com/s/1mS5QpOVat-XCLTfU4fmDjQ" target="_blank" rel="noopener">程序员代码面试指南：IT 名企算法与数据结构题目最优解</a>，提取码：idl6</p><h2 id="网络资源-博客"><a href="#网络资源-博客" class="headerlink" title="网络资源/博客"></a>网络资源/博客</h2><p><a href="https://blog.csdn.net/qq_19431333/category_6671933.html" target="_blank" rel="noopener">源码解析</a>: 一个对各种Java源码解析的博客。</p><p><a href="https://www.jianshu.com/u/203b606b956c" target="_blank" rel="noopener">面试问题</a>: 一个整合Android校招面试问题的博客。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(1 - 5)</title>
      <link href="/2020/05/31/%E5%89%91%E6%8C%87offerPart1/"/>
      <url>/2020/05/31/%E5%89%91%E6%8C%87offerPart1/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结每道题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>方法一，暴力解法。</p><p>对每一行从前向后依次查找，没有利用到题目中给出的规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = array.length;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，二分查找。</p><p>对每一行执行二分查找，利用了每行递增的规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = array.length;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = col - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>); <span class="comment">//防止溢出, 使用位运算</span></span><br><span class="line">                <span class="comment">// 二分查找</span></span><br><span class="line">                <span class="keyword">if</span>(array[i][mid] &lt; target)&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid] &gt; target)&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，二分法优化。</p><p>根据规律可知，数组每列从上到下递增，每行从左到右递增，则可以从左下角或者右上角开始寻找，当当前指大于目标值时横向向右移动，当前值小于目标值时纵向向上移动，最终可以对目标值进行定位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左下角坐标</span></span><br><span class="line">        <span class="keyword">int</span> row = array.length - <span class="number">1</span>; <span class="comment">// row = 0;右上角坐标</span></span><br><span class="line">        <span class="keyword">int</span> col = <span class="number">0</span>; <span class="comment">// col = array[0].length - 1;右上角坐标</span></span><br><span class="line">        <span class="keyword">while</span>(row &gt;= <span class="number">0</span> &amp;&amp; col &lt;= array[<span class="number">0</span>].length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 当前位正好就是目标</span></span><br><span class="line">            <span class="keyword">if</span>(array[row][col] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 当前位大于目标值, 则目标值应在当前位上方</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[row][col] &gt; target)&#123;</span><br><span class="line">                row--;</span><br><span class="line">            <span class="comment">// 当前位小于目标值, 则目标值应在当前位右方</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[row][col] &lt; target)&#123;</span><br><span class="line">                col++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p>方法一，调用内部函数。</p><p>通过调用内部方法直接进行替换操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toString().replace(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，使用一个新的StringBuffer保存结果。</p><p>创建一个新的StringBuffer，将原有的每一位复制到新的StringBuffer上，如果遇到空格，则追加“%20”。需要使用额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="comment">// 判断当前位是否是空格</span></span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != <span class="string">' '</span>)&#123;</span><br><span class="line">                sb.append(str.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(<span class="string">"%20"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，双指针法，从后向前搜素空格并替换。</p><p>从前向后搜素替换会导致后方元素被覆盖，而从后向前搜素替换可以避免这种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = str.length() - <span class="number">1</span>; <span class="comment">// 原长度</span></span><br><span class="line">        <span class="keyword">int</span> newLength = length; <span class="comment">// 新的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">' '</span>)&#123;</span><br><span class="line">                newLength += <span class="number">2</span>; <span class="comment">// %20是三位, 比空格多两位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str.setLength(newLength+<span class="number">1</span>); <span class="comment">// 扩展StringBuffer的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = length; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            <span class="comment">// 找到空格</span></span><br><span class="line">            <span class="keyword">if</span>(str.charAt(j) == <span class="string">' '</span>)&#123;</span><br><span class="line">                <span class="comment">// 依次加入StringBuffer的尾端</span></span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'%'</span>);</span><br><span class="line">            <span class="comment">// 不是空格则直接加入尾端</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                str.setCharAt(newLength--, str.charAt(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h2><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><p>方法一，使用辅助栈。</p><p>栈的特性是后入先出，所以根据这个特性可以先将所有链表元素压入栈，再依次取出即可得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(listNode == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 辅助栈</span></span><br><span class="line">        ListNode newHead = listNode;</span><br><span class="line">        <span class="comment">// 将链表中节点的元素值依次插入栈</span></span><br><span class="line">        <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(newHead.val);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从栈中依次取出, 并存入ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><p>递归的特性是一层层深入，抵达最底层后再逐层返回，正好与题目的要求一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(listNode == <span class="keyword">null</span>) <span class="keyword">return</span> res; <span class="comment">// 递归终止条件</span></span><br><span class="line">        res = printListFromTailToHead(listNode.next); <span class="comment">// 深入</span></span><br><span class="line">        res.add(listNode.val); <span class="comment">// 返回途中将当前节点值添加到ArrayList</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，多指针反转链表。</p><p>利用多个指针从前到后依次进行反转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        ListNode pre = <span class="keyword">null</span>; <span class="comment">// 前缀节点指针</span></span><br><span class="line">        ListNode cur = listNode; <span class="comment">// 当前节点指针</span></span><br><span class="line">        ListNode next = listNode; <span class="comment">// 保存当前节点的下一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = cur.next; <span class="comment">// 保存下一个节点</span></span><br><span class="line">            cur.next = pre; <span class="comment">// 反转，指向前缀节点</span></span><br><span class="line">            pre = cur; <span class="comment">// 向后移动</span></span><br><span class="line">            cur = next; <span class="comment">// 向后移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        listNode = pre; <span class="comment">// 最终前缀节点处为头节点</span></span><br><span class="line">        <span class="comment">// 依次输出至ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(listNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.add(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p>方法一，</p><p>由于输入了前序遍历序列和中序遍历序列，根据前序遍历的规律可得根节点位置。可知1是整棵树的根节点的值。在中序遍历中找到1，则1左边的4，7，2是左子树，1右边的5，3，8，6是右子树。再对左子树和右子树进行相同的操作即可得到最终的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用HashMap将所有中序遍历的结果保存，方便后续查询</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= in.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            map.put(in[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = getTree(pre, <span class="number">0</span>, pre.length - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> inLeft)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[left]); <span class="comment">// 前序遍历中根节点永远是最左边的元素</span></span><br><span class="line">        <span class="keyword">int</span> index = map.get(root.val); <span class="comment">// 中序遍历中根节点所处的位置</span></span><br><span class="line">        <span class="keyword">int</span> leftLen = index - inLeft; <span class="comment">// 左子树节点数量</span></span><br><span class="line">        root.left = getTree(pre, left + <span class="number">1</span>, left + leftLen, inLeft); <span class="comment">// 左子树</span></span><br><span class="line">        root.right = getTree(pre, left + leftLen + <span class="number">1</span>, right, index + <span class="number">1</span>); <span class="comment">// 右子树</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p>方法一，两栈分工。</p><p>栈一负责接收输入数据，栈二负责输出。</p><p>栈的特性是先入后出，队列的特性是先入先出。所以可以使用两个栈的特性，第一个栈接收数据后，在第二个栈中转手，使其顺序变为正常顺序，然后再输出。</p><ol><li><p>接收数据时，直接压入栈一。</p><p> 栈一：{A,B,C}，栈二：{}</p></li><li><p>想要弹出数据时，如果栈二是空的，则将栈一内数据全部推出压入栈二。再从栈二推出一个数据。</p><p> 栈一：{}，栈二：{C,B,A} -&gt; 栈一：{}，栈二：{C,B}</p></li><li><p>继续弹出数据，栈二非空，直接弹出栈二顶端数据。</p><p> 栈一：{}，栈二：{C}</p></li><li><p>再压入一个数据，直接压入栈一。</p><p> 栈一：{D}，栈二：{C}</p></li><li><p>弹出数据，栈二非空，弹出C，继续弹出数据，栈二为空，则将栈一数据压入栈二，然后弹出。这样就可以实现一个队列。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="递归的三大要素"><a href="#递归的三大要素" class="headerlink" title="递归的三大要素"></a>递归的三大要素</h3><ol><li>明确递归的函数想要干什么？（函数的功能是什么）</li><li>寻找递归的结束条件，即参数是什么的时候递归结束，并将结果返回。此时应该可以根据这个参数的值知道函数的结果是什么。</li><li>找到函数的等价关系式，不断缩小参数的范围，缩小后，可以通过一些辅助的变量或操作使原函数的结果不变。</li></ol><p>每次第三步完成后都应该返回第二步检查是否出现了遗漏的条件。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/29/hello-world/"/>
      <url>/2020/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2020/05/29/Hexo/"/>
      <url>/2020/05/29/Hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2020/05/29/problems/"/>
      <url>/2020/05/29/problems/</url>
      
        <content type="html"><![CDATA[<p>第一篇文章测试</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
