<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指Offer(61 - 67)</title>
      <link href="/2020/06/27/%E5%89%91%E6%8C%87offerPart13/"/>
      <url>/2020/06/27/%E5%89%91%E6%8C%87offerPart13/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第六十一至第六十七题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a><a href="https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">序列化二叉树</a></h2><p>请实现两个函数，分别用来序列化和反序列化二叉树。</p><p>二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。</p><p>二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果str，重构二叉树。</p><p>例如，我们可以把一个只有根节点为1的二叉树序列化为”1,”，然后通过自己的函数来解析回这个二叉树。</p><p>方法一，层序遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">Serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) queue.offer(root);</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(temp.left);</span><br><span class="line">                queue.offer(temp.right);</span><br><span class="line">                res.append(temp.val + <span class="string">","</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.append(<span class="string">"#"</span> + <span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res.length() != <span class="number">0</span>)</span><br><span class="line">            res.deleteCharAt(res.length()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode <span class="title">Deserialize</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String[] string = str.split(<span class="string">","</span>);</span><br><span class="line">        TreeNode[] node = <span class="keyword">new</span> TreeNode[string.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!string[i].equals(<span class="string">"#"</span>))&#123;</span><br><span class="line">                node[i] = <span class="keyword">new</span> TreeNode(Integer.parseInt(string[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node[i] != <span class="keyword">null</span>)&#123;</span><br><span class="line">                node[i].left = node[j++];</span><br><span class="line">                node[i].right = node[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，先序遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">Serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> sb.toString();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">                sb.append(temp.val + <span class="string">","</span>);</span><br><span class="line">                stack.push(temp.right);</span><br><span class="line">                stack.push(temp.left);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(<span class="string">"#"</span> + <span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="function">TreeNode <span class="title">Deserialize</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() == <span class="number">0</span> || str.length() ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String[] nodes = str.split(<span class="string">","</span>);</span><br><span class="line">        TreeNode node = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nodes[index].equals(<span class="string">"#"</span>))&#123;</span><br><span class="line">            node = <span class="keyword">new</span> TreeNode(Integer.parseInt(nodes[index]));</span><br><span class="line">            node.left = Deserialize(str);</span><br><span class="line">            node.right = Deserialize(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的第K个结点"><a href="#二叉搜索树的第K个结点" class="headerlink" title="二叉搜索树的第K个结点"></a><a href="https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">二叉搜索树的第K个结点</a></h2><p>给定一棵二叉搜索树，请找出其中的第k小的结点。例如，（5，3，7，2，4，6，8）中，按结点数值大小顺序第三小结点的值为4。</p><p>方法一，直接获取中序遍历的结果，按序得到目标节点。</p><p>方法二，部分中序遍历，中序遍历过程中使用一个计数器，到达计数器时直接返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function">TreeNode <span class="title">KthNode</span><span class="params">(TreeNode pRoot, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span> || k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pRoot != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(pRoot != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(pRoot);</span><br><span class="line">                pRoot = pRoot.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pRoot = stack.pop();</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">if</span>(index == k)&#123;</span><br><span class="line">                    <span class="keyword">return</span> pRoot;</span><br><span class="line">                &#125;</span><br><span class="line">                pRoot = pRoot.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a><a href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">数据流中的中位数</a></h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。</p><p>方法一，堆排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">    PriorityQueue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o2 - o1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line"><span class="comment">//个数为偶数的话，则先插入到大顶堆，然后将大顶堆中最大的数插入小顶堆中</span></span><br><span class="line">        <span class="keyword">if</span>(count % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            maxHeap.offer(num);</span><br><span class="line">            <span class="keyword">int</span> max = maxHeap.poll();</span><br><span class="line">            minHeap.offer(max);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//个数为奇数的话，则先插入到小顶堆，然后将小顶堆中最小的数插入大顶堆中</span></span><br><span class="line">            minHeap.offer(num);</span><br><span class="line">            <span class="keyword">int</span> min = minHeap.poll();</span><br><span class="line">            maxHeap.offer(min);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">GetMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//当前为偶数个，则取小顶堆和大顶堆的堆顶元素求平均</span></span><br><span class="line">        <span class="keyword">if</span>(count % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Double((minHeap.peek() + maxHeap.peek())/<span class="number">2.0</span>);</span><br><span class="line"><span class="comment">//当前为奇数个，则直接从小顶堆中取元素即可，</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Double(minHeap.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a><a href="https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">滑动窗口的最大值</a></h2><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p><p>方法一，暴力法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">maxInWindows</span><span class="params">(<span class="keyword">int</span> [] num, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = size - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(right &lt; num.length)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">                max = Math.max(max, num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(max);</span><br><span class="line">            left++;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，单调队列。</p><ol><li>遍历数组的每一个元素，</li><li>如果容器为空，则直接将当前元素加入到容器中。</li><li>如果容器不为空，则让当前元素和容器的最后一个元素比较，如果大于，则将容器的最后一个元素删除，然后继续讲当前元素和容器的最后一个元素比较</li><li>如果当前元素小于容器的最后一个元素，则直接将当前元素加入到容器的末尾</li><li>如果容器头部的元素已经不属于当前窗口的边界，则应该将头部元素删除<br>总结一下，首先容器中放的元素应该是单调递减的。然后还有删除容器头部元素和最后一个元素的操作。因此，这样的数据结构就是双端队列。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">maxInWindows</span><span class="params">(<span class="keyword">int</span> [] num, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> len = num.length;</span><br><span class="line">        <span class="comment">// 队列中队头始终保存当前最大值</span></span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="comment">// 从后向前移除所有小于当前元素的队列元素</span></span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; num[queue.peekLast()] &lt; num[i])&#123;</span><br><span class="line">                queue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 然后插入这个元素</span></span><br><span class="line">            queue.addLast(i);</span><br><span class="line">            <span class="comment">// 如果队头元素失效, 则移除</span></span><br><span class="line">            <span class="keyword">if</span>(queue.peekFirst() + size &lt;= i)&#123;</span><br><span class="line">                queue.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// size为3时, 从下标2开始统计最大元素</span></span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">1</span> &gt;= size)&#123;</span><br><span class="line">                res.add(num[queue.peekFirst()]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a><a href="https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">矩阵中的路径</a></h2><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如$\begin{bmatrix} a &amp; b &amp; c &amp;e \ s &amp; f &amp; c &amp; s \ a &amp; d &amp; e&amp; e\ \end{bmatrix}$矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p><p>方法一，DFS。</p><p>递归函数：就是当前处理的问题是什么，并且下一次在规模减小的情况下处理相同的问题。<br>比如此题：当前处理的问题是：判断字符串str[0 … len]是否在matrix中匹配，显然下一次递归处理的问题是:如果str[0]已经匹配，则判断字符串str[1 … len]是否在matrix中匹配。</p><p>DFS模板：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一步，检查下标是否满足条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：检查是否被访问过，或者是否满足当前匹配条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步：检查是否满足返回结果条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第四步：都没有返回，说明应该进行下一步递归</span></span><br><span class="line">    <span class="comment">// 标记</span></span><br><span class="line">    dfs(下一次)</span><br><span class="line">    <span class="comment">// 回溯</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (对所有可能情况) &#123;</span><br><span class="line">        dfs()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        h = rows;</span><br><span class="line">        w = cols;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(matrix, i, j, <span class="number">0</span>, str))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> pos, <span class="keyword">char</span>[] str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= h || j &lt; <span class="number">0</span> || j &gt;= w)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> ch = matrix[i * w + j];</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">'#'</span> || ch != str[pos])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos + <span class="number">1</span> == str.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        matrix[i * w + j] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">if</span>(dfs(matrix, i - <span class="number">1</span>, j, pos + <span class="number">1</span>, str) ||</span><br><span class="line">          dfs(matrix, i, j + <span class="number">1</span>, pos + <span class="number">1</span>, str)||</span><br><span class="line">          dfs(matrix, i + <span class="number">1</span>, j, pos + <span class="number">1</span>, str)||</span><br><span class="line">          dfs(matrix, i, j - <span class="number">1</span>, pos + <span class="number">1</span>, str))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        matrix[i * w + j] = ch;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a><a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">机器人的运动范围</a></h2><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><p>方法一，DFS。</p><p>本题的递归函数就是：首先站在(0,0)的视角，先往右试探，发现可以走，就以下一个为视角，继续做相同的事情。</p><p>递归函数模板为：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dfs</span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一步，检查下标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：检查是否被访问过，或者是否满足当前匹配条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步：检查是否满足返回结果条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第四步：都没有返回，说明应该进行下一步递归</span></span><br><span class="line">    <span class="comment">// 标记</span></span><br><span class="line">    <span class="selector-tag">dfs</span>(下一次)</span><br><span class="line">    <span class="comment">// 回溯</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">int</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line">    <span class="selector-tag">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(threshold &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[][] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, threshold, rows, cols, flag);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">boolean</span>[][] flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= rows || y &lt; <span class="number">0</span> || y &gt;= cols)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(flag[x][y])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(check(x) + check(y) &gt; threshold)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        flag[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        res++;</span><br><span class="line">        dfs(x - <span class="number">1</span>, y, threshold, rows, cols, flag);</span><br><span class="line">        dfs(x, y + <span class="number">1</span>, threshold, rows, cols, flag);</span><br><span class="line">        dfs(x + <span class="number">1</span>, y, threshold, rows, cols, flag);</span><br><span class="line">        dfs(x, y - <span class="number">1</span>, threshold, rows, cols, flag);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sum = sum + (n % <span class="number">10</span>);</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a><a href="https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">剪绳子</a></h2><p>给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&gt;1并且m&gt;1，m&lt;=n），每段绳子的长度记为k[1],…,k[m]。请问k[1]x…xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p>输入</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个数n，意义见题面。（<span class="number">2</span> &lt;= n &lt;= <span class="number">60</span>）</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出答案。</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p>方法一，找规律。</p><ul><li><p>先举几个例子，可以看出规律来。</p></li><li><p>4 ： 2*2</p></li><li><p>5 ： 2*3</p></li><li><p>6 ： 3*3</p></li><li><p>7 ： 2<em>2</em>3 或者4*3</p></li><li><p>8 ： 2<em>3</em>3</p></li><li><p>9 ： 3<em>3</em>3</p></li><li><p>10：2<em>2</em>3<em>3 或者4</em>3*3</p></li><li><p>11：2<em>3</em>3*3</p></li><li><p>12：3<em>3</em>3*3</p></li><li><p>13：2<em>2</em>3<em>3</em>3 或者4<em>3</em>3*3</p></li><li><p>下面是分析：</p></li><li><p>首先判断k[0]到k[m]可能有哪些数字，实际上只可能是2或者3。</p></li><li><p>当然也可能有4，但是4=2*2，我们就简单些不考虑了。</p></li><li><p>5&lt;2<em>3,6&lt;3</em>3,比6更大的数字我们就更不用考虑了，肯定要继续分。</p></li><li><p>其次看2和3的数量，2的数量肯定小于3个，为什么呢？因为2<em>2</em>2&lt;3*3，那么题目就简单了。</p></li><li><p>直接用n除以3，根据得到的余数判断是一个2还是两个2还是没有2就行了。</p></li><li><p>由于题目规定m&gt;1，所以2只能是1<em>1，3只能是2</em>1，这两个特殊情况直接返回就行了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cutRope</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> x = target % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = target / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">3</span>, y);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * <span class="number">2</span> * (<span class="keyword">int</span>)Math.pow(<span class="number">3</span>, y-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * (<span class="keyword">int</span>)Math.pow(<span class="number">3</span>, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><p>从前向后逐步计算得到最终结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cutRope</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 利用dp表存储从1到n的最大乘积</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i&lt;=target;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=i/<span class="number">2</span>;j++)&#123;</span><br><span class="line">                res = Math.max(res, dp[j]*dp[i-j]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(51 - 55)</title>
      <link href="/2020/06/26/%E5%89%91%E6%8C%87offerPart11/"/>
      <url>/2020/06/26/%E5%89%91%E6%8C%87offerPart11/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第五十一至第五十五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a><a href="https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">构建乘积数组</a></h2><p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]*A[i+1]</em>…*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * … * A[n-1]，B[n-1] = A[0] * A[1] * … * A[n-2];）</p><p>方法一，遍历两遍原数组得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] multiply(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; B.length; i++)&#123;</span><br><span class="line">            B[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.length; i++)&#123;</span><br><span class="line">            B[i] = B[i] * pre;</span><br><span class="line">            pre = pre * A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        pre = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = A.length - <span class="number">1</span>;i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            B[i] = B[i] * pre;</span><br><span class="line">            pre = pre * A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a><a href="https://www.nowcoder.com/practice/45327ae22b7b413ea21df13ee7d6429c?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">正则表达式匹配</a></h2><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p><p>方法一，递归实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">char</span>[] pattern)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || pattern == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matchStr(str, <span class="number">0</span>, pattern, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matchStr</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">int</span> strIndex, <span class="keyword">char</span>[] pattern, <span class="keyword">int</span> patIndex)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 两字符串都抵达结尾, 匹配成功.</span></span><br><span class="line">        <span class="keyword">if</span>(strIndex == str.length &amp;&amp; patIndex == pattern.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果pattern先抵达结尾, 匹配失败.</span></span><br><span class="line">        <span class="keyword">if</span>(strIndex != str.length &amp;&amp; patIndex == pattern.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模式第2个是*，且字符串第1个跟模式第1个匹配,分3种匹配模式；如不匹配，模式后移2位</span></span><br><span class="line">        <span class="keyword">if</span> (patIndex + <span class="number">1</span> &lt; pattern.length &amp;&amp; pattern[patIndex + <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((strIndex != str.length &amp;&amp; pattern[patIndex] == str[strIndex]) || (pattern[patIndex] == <span class="string">'.'</span> &amp;&amp; strIndex != str.length)) &#123;</span><br><span class="line">                <span class="keyword">return</span> matchStr(str, strIndex, pattern, patIndex + <span class="number">2</span>)<span class="comment">//模式后移2，视为x*匹配0个字符</span></span><br><span class="line">                    || matchStr(str, strIndex + <span class="number">1</span>, pattern, patIndex + <span class="number">2</span>)<span class="comment">//视为模式匹配1个字符</span></span><br><span class="line">                    || matchStr(str, strIndex + <span class="number">1</span>, pattern, patIndex);<span class="comment">//*匹配1个，再匹配str中的下一个</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> matchStr(str, strIndex, pattern, patIndex + <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模式第2个不是*，且字符串第1个跟模式第1个匹配，则都后移1位，否则直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> ((strIndex != str.length &amp;&amp; pattern[patIndex] == str[strIndex]) || (pattern[patIndex] == <span class="string">'.'</span> &amp;&amp; strIndex != str.length)) &#123;</span><br><span class="line">            <span class="keyword">return</span> matchStr(str, strIndex + <span class="number">1</span>, pattern, patIndex + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a><a href="https://www.nowcoder.com/practice/6f8c901d091949a5837e24bb82a731f2?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">表示数值的字符串</a></h2><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p><p>方法一，逐步判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(<span class="keyword">char</span>[] str)</span> </span>&#123;</span><br><span class="line"><span class="comment">//signal表示是否含有正负符号，decimal表示是否含有小数点，hasE表示是否含有符号e</span></span><br><span class="line">        <span class="keyword">boolean</span> signal = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> decimal = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> hasE = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">'E'</span> || str[i] == <span class="string">'e'</span>)&#123;</span><br><span class="line"><span class="comment">//e后面必须有数字，所以是最后一位肯定不通过</span></span><br><span class="line">                <span class="keyword">if</span>(i == str.length - <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//不能有两个e</span></span><br><span class="line">                <span class="keyword">if</span>(hasE)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                hasE = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'+'</span> || str[i] == <span class="string">'-'</span>)&#123;</span><br><span class="line"><span class="comment">//不是第一次出现，那么后面能出现符合的地方只有紧贴着e的后面一位，不是则不通过</span></span><br><span class="line">                <span class="keyword">if</span>(signal &amp;&amp; str[i - <span class="number">1</span>] != <span class="string">'E'</span> &amp;&amp; str[i - <span class="number">1</span>] != <span class="string">'e'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//第一次出现，如果不是出现在第一位，那么还是判断一下是不是出现在e的后面一位</span></span><br><span class="line">                <span class="keyword">if</span>(!signal &amp;&amp; i &gt; <span class="number">0</span> &amp;&amp; str[i - <span class="number">1</span>] != <span class="string">'E'</span> &amp;&amp; str[i - <span class="number">1</span>] != <span class="string">'e'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                signal = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'.'</span>)&#123;</span><br><span class="line"><span class="comment">//如果存在e并且e后面为小数则不通过</span></span><br><span class="line">                <span class="keyword">if</span>(hasE)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(str[i] == <span class="string">'e'</span> || str[i] == <span class="string">'E'</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//不能有两个小数点</span></span><br><span class="line">                <span class="keyword">if</span>(decimal)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                decimal = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i] &lt; <span class="string">'0'</span> || str[i] &gt; <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="comment">//不是e也不是+-符号也不是小数点，那么只能是数字，不是数字就是非法的字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流中第一个不重复的字符"><a href="#字符流中第一个不重复的字符" class="headerlink" title="字符流中第一个不重复的字符"></a><a href="https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">字符流中第一个不重复的字符</a></h2><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果当前字符流没有存在出现一次的字符，返回<span class="meta">#字符。</span></span><br></pre></td></tr></table></figure><p>方法一，使用HashMap统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">//Insert one char from stringstream</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sb.append(ch);</span><br><span class="line">        map.put(ch, map.getOrDefault(ch, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//return the first appearence once char in current stringstream</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">FirstAppearingOnce</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String str = sb.toString();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(str.charAt(i)) == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> str.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">链表中环的入口结点</a></h2><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p><p>方法一，双指针法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode slow = pHead;</span><br><span class="line">        ListNode fast = pHead;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        slow = pHead;</span><br><span class="line">        <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>��ָOffer(56 - 60)</title>
      <link href="/2020/06/26/%E5%89%91%E6%8C%87offerPart12/"/>
      <url>/2020/06/26/%E5%89%91%E6%8C%87offerPart12/</url>
      
        <content type="html"><![CDATA[<p>��ƪ������Ҫ�����ܽὣָoffer�е���ʮ��������ʮ��Ľ��ÿ���ⶼ��������ֱȽ������뵽�Ľ�𷽷�����Ϊ�Լ�׼���������Ե�һ���֡�</p><a id="more"></a><h2 id="ɾ���������ظ��L��"><a href="#ɾ���������ظ��L��" class="headerlink" title="ɾ���������ظ��Ľ��"></a><a href="https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">ɾ���������ظ��Ľ��</a></h2><p>��һ������������У������ظ��Ľ�㣬��ɾ�����������ظ��Ľ�㣬�ظ��Ľ�㲻��������������ͷָ�롣 ���磬����1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 ������Ϊ 1-&gt;2-&gt;5</p><p>����һ��HashSet�ж��ظ�ֵ��</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        ListNode cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == cur.next.val)&#123;</span><br><span class="line">                set.add(cur.val);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode pre = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        pre.next = pHead;</span><br><span class="line">        ListNode preHead = pre;</span><br><span class="line">        cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(cur.val))&#123;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = pre.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>��������ֱ��ɾ������</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode pre = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        pre.next = pHead;</span><br><span class="line">        ListNode preNode = pre;</span><br><span class="line">        ListNode cur = pHead;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                <span class="keyword">while</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val)&#123;</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                pre.next = cur;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="����������һ�����"><a href="#����������һ�����" class="headerlink" title="����������һ�����"></a><a href="https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">����������һ�����</a></h2><p>����һ�������������е�һ����㣬���ҳ��������˳�����һ����㲢�ҷ��ء�ע�⣬���еĽ�㲻�����������ӽ�㣬ͬʱ����ָ�򸸽���ָ�롣</p><p>����һ��ģ����̡�</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TreeLinkNode root = <span class="keyword">null</span>;</span><br><span class="line">        TreeLinkNode temp = pNode;</span><br><span class="line">        <span class="comment">// �ҵ����ڵ�</span></span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            root = temp;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// �������</span></span><br><span class="line">        ArrayList&lt;TreeLinkNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inOrder(root, list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// �ҵ���������ĺ�һ�����</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i) == pNode &amp;&amp; i + <span class="number">1</span> != list.size())&#123;</span><br><span class="line">                <span class="keyword">return</span> list.get(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeLinkNode root, ArrayList&lt;TreeLinkNode&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inOrder(root.left, list);</span><br><span class="line">        list.add(root);</span><br><span class="line">        inOrder(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>���������ҵ���̽�㡣</p><ol><li>��ǰ����Ǹ��׽������ӣ�����һ����ǵ�ǰ���ĸ���㡣</li><li>��ǰ������Һ��ӽ�㣬��ô��һ�ڵ���ǣ��Һ��ӽ��������ӽ�㣬����Һ��ӽ��û�����Ӿ����Լ���</li><li>��ǰ���Ϊ���׽����Һ��ӽ�㣬�����ҵ�����Ǹ�������ӵĽ��ĸ���㡣</li><li>��β���ĺ�̽ڵ�Ϊnull</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pNode == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// �ڶ���</span></span><br><span class="line">        <span class="keyword">if</span>(pNode.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pNode = pNode.right;</span><br><span class="line">            <span class="keyword">while</span>(pNode.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                pNode = pNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pNode;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// ��һ����������</span></span><br><span class="line">        <span class="keyword">while</span>(pNode.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeLinkNode root = pNode.next;</span><br><span class="line">            <span class="keyword">if</span>(root.left == pNode)&#123;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            pNode = pNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// ������</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="�ԳZK�����"><a href="#�ԳZK�����" class="headerlink" title="�ԳƵĶ�����"></a><a href="https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">�ԳƵĶ�����</a></h2><p>��ʵ��һ�������������ж�һ�ö������ǲ��ǶԳƵġ�ע�⣬���һ��������ͬ�˶������ľ�����ͬ���ģ�������Ϊ�ԳƵġ�</p><p>����һ���ݹ鷨��</p><p>������</p><ol><li>left.val == right.val</li><li>left.left.val == right.right.val</li><li>left.right.val == right.left.val</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> same(pRoot, pRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">same</span><span class="params">(TreeNode left, TreeNode right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="keyword">null</span> || right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> (left.val == right.val) &amp;&amp; same(left.left, right.right) &amp;&amp; same(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="��֮����˳���ӡ������"><a href="#��֮����˳���ӡ������" class="headerlink" title="��֮����˳���ӡ������"></a><a href="https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">��֮����˳���ӡ������</a></h2><p>��ʵ��һ����������֮���δ�ӡ������������һ�а��մ����ҵ�˳���ӡ���ڶ��㰴�մ��������˳���ӡ�������а��մ����ҵ�˳���ӡ���������Դ����ơ�</p><p>����һ������������塣</p><p>�����ż��ִ�в�ͬ�Ĳ���List������</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(pRoot);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>) queue.offer(temp.left);</span><br><span class="line">                <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>) queue.offer(temp.right);</span><br><span class="line">                <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                    list.add(temp.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    list.add(<span class="number">0</span>, temp.val);</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = !flag;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="�Ѷ�������ӡ�ɶ���"><a href="#�Ѷ�������ӡ�ɶ���" class="headerlink" title="�Ѷ�������ӡ�ɶ���"></a><a href="https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">�Ѷ�������ӡ�ɶ���</a></h2><p>���ϵ��°����ӡ��������ͬһ����������������ÿһ�����һ�С�</p><p>����һ�����������</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(pRoot);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>) queue.offer(temp.left);</span><br><span class="line">                <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>) queue.offer(temp.right);</span><br><span class="line">                list.add(temp.val);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ���ݽṹ���㷨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ��ָOffer </tag>
            
            <tag> ���ݽṹ���㷨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(46 - 50)</title>
      <link href="/2020/06/26/%E5%89%91%E6%8C%87offerPart10/"/>
      <url>/2020/06/26/%E5%89%91%E6%8C%87offerPart10/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第四十六至第五十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="孩子们的游戏（圆圈中最后剩下的数）"><a href="#孩子们的游戏（圆圈中最后剩下的数）" class="headerlink" title="孩子们的游戏（圆圈中最后剩下的数）"></a><a href="https://www.nowcoder.com/practice/f78a359491e64a50bce2d89cff857eb6?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">孩子们的游戏（圆圈中最后剩下的数）</a></h2><p>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p><p>如果没有小朋友，请返回-1。</p><p>方法一，使用一个ArrayList进行模拟。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LastRemaining_Solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            arr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cur = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(arr.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">                cur++;</span><br><span class="line">                <span class="keyword">if</span>(cur == arr.size())&#123;</span><br><span class="line">                    cur = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr.remove(cur); </span><br><span class="line">            cur--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><p>长度为 n 的序列会先删除第 m % n 个元素，然后剩下一个长度为 n - 1 的序列。那么，我们可以递归地求解 f(n - 1, m)，就可以知道对于剩下的 n - 1 个元素，最终会留下第几个元素，我们设答案为 x = f(n - 1, m)。</p><p>由于我们删除了第 m % n 个元素，将序列的长度变为 n - 1。当我们知道了 f(n - 1, m) 对应的答案 x 之后，我们也就可以知道，长度为 n 的序列最后一个删除的元素，应当是从 m % n 开始数的第 x 个元素。因此有 f(n, m) = (m % n + x) % n = (m + x) % n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LastRemaining_Solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x = recursive(n, m);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recursive</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = recursive(n - <span class="number">1</span>, m);</span><br><span class="line">        <span class="keyword">return</span> (x + m) % n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，非递归法。</p><p>根据方法二可知，<br>f[1] = 0<br>f[2] = (f{1] + m) % 2<br>f[3] = (f[2] + m) % 3<br>…<br>f[n] = (f[n-1] + m) % n</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LastRemaining_Solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            index = (index + m) % i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求1-2-3-…-n"><a href="#求1-2-3-…-n" class="headerlink" title="求1+2+3+…+n"></a><a href="https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">求1+2+3+…+n</a></h2><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><p>方法一，利用判断语句进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> x = ((n &gt; <span class="number">1</span>) &amp;&amp; (n += Sum_Solution(n - <span class="number">1</span>)) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a><a href="https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">不用加减乘除做加法</a></h2><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = num1;</span><br><span class="line">        <span class="keyword">int</span> imp = num2;</span><br><span class="line">        <span class="keyword">while</span> (imp != <span class="number">0</span>) &#123;</span><br><span class="line">            res = num1 ^ num2;</span><br><span class="line">            imp = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            num1 = res;</span><br><span class="line">            num2 = imp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a><a href="https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">把字符串转换成整数</a></h2><p>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个字符串,包括数字字母符号,可以为空</span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果是合法的数值表达则返回该数字，否则返回<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">2147483647</span></span><br><span class="line"><span class="number">1</span>a33</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>方法一，逐步判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">StrToInt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; str.charAt(i) == <span class="string">' '</span>) i++;</span><br><span class="line">        <span class="keyword">if</span>(i == len) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(i) != <span class="string">'+'</span> &amp;&amp; str.charAt(i) != <span class="string">'-'</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">'0'</span> &amp;&amp; str.charAt(i) &gt;= <span class="string">'9'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> neg = str.charAt(i) == <span class="string">'-'</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(i) == <span class="string">'+'</span> || str.charAt(i) == <span class="string">'-'</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> pre = <span class="number">0L</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; str.charAt(i) &gt;= <span class="string">'0'</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">            pre = pre * <span class="number">10</span> + (str.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(!neg &amp;&amp; (pre &gt; Integer.MAX_VALUE)) &#123;</span><br><span class="line">                pre = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(neg &amp;&amp; (pre &gt; Integer.MAX_VALUE + <span class="number">1L</span>)) &#123;</span><br><span class="line">                pre = Integer.MAX_VALUE + <span class="number">1L</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i != len) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> !neg ? (<span class="keyword">int</span>) pre : (<span class="keyword">int</span>) (<span class="number">0</span> - pre);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a><a href="https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">数组中重复的数字</a></h2><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p><p>方法一，使用数组或者HashMap/HashSet判断重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length,<span class="keyword">int</span> [] duplication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[numbers[i]] == <span class="number">0</span>)&#123;</span><br><span class="line">                arr[numbers[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                duplication[<span class="number">0</span>] = numbers[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> duplication[<span class="number">0</span>] &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，在原数组上利用特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length,<span class="keyword">int</span> [] duplication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i != numbers[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(numbers[i] != numbers[numbers[i]])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = numbers[i];</span><br><span class="line">                    numbers[i] = numbers[temp];</span><br><span class="line">                    numbers[temp] = temp;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    duplication[<span class="number">0</span>] = numbers[i];</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(41 - 45)</title>
      <link href="/2020/06/26/%E5%89%91%E6%8C%87offerPart9/"/>
      <url>/2020/06/26/%E5%89%91%E6%8C%87offerPart9/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第四十一至第四十五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="和为S的连续正数序列"><a href="#和为S的连续正数序列" class="headerlink" title="和为S的连续正数序列"></a><a href="https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">和为S的连续正数序列</a></h2><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序</span><br></pre></td></tr></table></figure><p>方法一，暴力法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; sum; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++)&#123;</span><br><span class="line">                    temp = temp + k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp == sum)&#123;</span><br><span class="line">                    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++)&#123;</span><br><span class="line">                        list.add(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.add(list);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp &gt; sum)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，前缀和法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; sum; j++)&#123;</span><br><span class="line">                temp = temp + j;</span><br><span class="line">                <span class="keyword">if</span>(temp == sum)&#123;</span><br><span class="line">                    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++)&#123;</span><br><span class="line">                        list.add(k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.add(list);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp &gt; sum)&#123;</span><br><span class="line">                    temp = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，滑动窗口。</p><ol><li>初始化，左边界为1，右边界为1，表示窗口大小为0。</li><li>如果窗口中值的和小于目标值sum， 表示需要扩大窗口，右边界加1。 </li><li>否则，如果狂口值和大于目标值sum，表示需要缩小窗口，左边界加1。 </li><li>否则，等于目标值，存结果，缩小窗口，继续进行步骤2，3，4。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= sum / <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp &lt; sum)&#123;</span><br><span class="line">                temp = temp + right;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp &gt; sum)&#123;</span><br><span class="line">                temp = temp - left;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt; right; i++)&#123;</span><br><span class="line">                    list.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(list);</span><br><span class="line">                temp = temp - left;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="和为S的两个数字"><a href="#和为S的两个数字" class="headerlink" title="和为S的两个数字"></a><a href="https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">和为S的两个数字</a></h2><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对应每个测试案例，输出两个数，小的先输出。</span><br></pre></td></tr></table></figure><p>方法一，双指针法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = array.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[left] + array[right];</span><br><span class="line">            <span class="keyword">if</span>(temp &lt; sum)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp &gt; sum)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(array[left]);</span><br><span class="line">                res.add(array[right]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a><a href="https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">左旋转字符串</a></h2><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><p>方法一，库函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">LeftRotateString</span><span class="params">(String str,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == str.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt; str.length())&#123;</span><br><span class="line">            n = n % str.length();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String str1 = str.substring(<span class="number">0</span>, n);</span><br><span class="line">        String str2 = str.substring(n);</span><br><span class="line">        <span class="keyword">return</span> str2 + str1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，不使用库函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">LeftRotateString</span><span class="params">(String str,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == str.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt; str.length())&#123;</span><br><span class="line">            n = n % str.length();</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &lt; str.length(); i++)&#123;</span><br><span class="line">            sb.append(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            sb.append(str.charAt(j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转单词顺序列"><a href="#翻转单词顺序列" class="headerlink" title="翻转单词顺序列"></a><a href="https://www.nowcoder.com/practice/3194a4f4cf814f63919d0790578d51f3?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">翻转单词顺序列</a></h2><p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p><p>方法一，暴力法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ReverseSentence</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != <span class="string">' '</span>)&#123;</span><br><span class="line">                sb.append(str.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                String temp = sb.toString();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = temp.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                    res.append(temp.charAt(j));</span><br><span class="line">                &#125;</span><br><span class="line">                res.append(<span class="string">" "</span>);</span><br><span class="line">                sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String temp = sb.toString();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = temp.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            res.append(temp.charAt(j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a><a href="https://www.nowcoder.com/practice/762836f4d43d43ca9deb273b3de8e1f4?tpId=13&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">扑克牌顺子</a></h2><p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。</p><p>方法一，HashSet和遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContinuous</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">14</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(numbers[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                set.add(numbers[i]);</span><br><span class="line">                max = Math.max(max, numbers[i]);</span><br><span class="line">                min = Math.min(min, numbers[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (max - min) &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，排序和遍历。</p><p>利用排序代替HashSet的作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContinuous</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line">        <span class="keyword">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                minIndex++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i + <span class="number">1</span> &lt; numbers.length &amp;&amp; numbers[i] == numbers[i + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (numbers[numbers.length - <span class="number">1</span>] - numbers[minIndex]) &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode热题100之栈</title>
      <link href="/2020/06/24/LeetCode-HOT100-%E6%A0%88/"/>
      <url>/2020/06/24/LeetCode-HOT100-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结LeetCode中热题100分类中栈类型题目的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></h3><p>方法一，依次读取字符，遇到正括号就压入栈，遇到反括号就进行判断，首先判断栈是否为空，为空直接返回false，不为空再判断栈出栈的括号与遇到的括号是否可以凑成一对，不可用就返回false，可以就比较下一个字符。所有字符比对完毕，如果栈是空，则返回true，否则返回false。</p><h3 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack/" target="_blank" rel="noopener">155. 最小栈</a></h3><p>方法一，使用两个栈分别保存当前元素和当前最小元素。</p><p>方法二，栈内保存Node，Node有元素值和最小值两个变量。</p><h2 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h2><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></h3><p>方法一，直接使用递归算法。</p><p>中序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inOrder(root.left);</span><br><span class="line">System.out.print(root.val);</span><br><span class="line">inOrder(root.right);</span><br></pre></td></tr></table></figure><p>前序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(root.val);</span><br><span class="line">preOrder(root.left);</span><br><span class="line">preOrder(root.right);</span><br></pre></td></tr></table></figure><p>后序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postOrder(root.left);</span><br><span class="line">postOrder(root.right);</span><br><span class="line">System.out.print(root.val);</span><br></pre></td></tr></table></figure><p>方法二，利用栈实现非递归版。</p><p>中序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = stack.pop();</span><br><span class="line">list.add(temp.val);</span><br><span class="line"><span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">stack.push(temp.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">stack.push(temp.left);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode temp = stack.pop();</span><br><span class="line">list.addFirst(temp.val);</span><br><span class="line"><span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">stack.push(temp.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">stack.push(temp.right);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394. 字符串解码"></a><a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">394. 字符串解码</a></h3><p>方法一，辅助栈法。</p><p>使用两个栈，分别记录数字和字母。</p><p>分四种情况：</p><ol><li>当读到的字符是数字时，将数字记录下来。</li><li>当读到的字符是普通字母时，将字母记录下来。</li><li>当读到的字符是’[‘时，将数字记录和字母记录分别推入对应的栈，并重置两个记录。</li><li>当读到的字符是’]’时，从数字栈推出一个数字N，将当前的字母记录循环N次得到一个解码的记录，再从字母栈中取出前缀字母与这个解码的记录组合得到当前的结果。重复这些操作得到最终结果。</li></ol><p>方法二，递归法。</p><p>利用’[‘作为递归开始，’]’作为递归结束，每次递归得到一对括号中的字符，然后返回到上一层与数字进行解码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String[] res = dfs(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] dfs(String s, <span class="keyword">int</span> i)&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> multi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) &gt;= <span class="string">'0'</span> &amp;&amp; s.charAt(i) &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="comment">// 获得数字</span></span><br><span class="line">                multi = multi * <span class="number">10</span> + Integer.parseInt(String.valueOf(s.charAt(i)));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'['</span>)&#123;</span><br><span class="line"><span class="comment">// 递归开始</span></span><br><span class="line">                String[] temp = dfs(s, i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 更新位置</span></span><br><span class="line">                i = Integer.parseInt(temp[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 解码展开</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; multi; m++)&#123;</span><br><span class="line">                    res.append(temp[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// 重置数字</span></span><br><span class="line">                multi = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">']'</span>)&#123;</span><br><span class="line">递归结束，返回当前位置和字符结果</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;String.valueOf(i), res.toString()&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 扩展字符</span></span><br><span class="line">                res.append(String.valueOf(s.charAt(i)));</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;res.toString()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">739. 每日温度</a></h3><p>方法一，暴力法。</p><p>直接查找后面第一个最大值。</p><p>方法二，单调栈法。</p><p>用一个栈记录单调递减的下标，每次入栈时会先将所有小于新入栈的栈元素出栈，并更新结果数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 单调递减栈</span></span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[T.length]; <span class="comment">// 结果数组</span></span><br><span class="line"><span class="comment">// 遍历一遍原始数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T.length; i++)&#123;</span><br><span class="line"><span class="comment">// 将所有小于新元素的栈元素出栈，更新结果数组</span></span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; T[i] &gt; T[stack.peek()])&#123;</span><br><span class="line">                <span class="keyword">int</span> index = stack.pop();</span><br><span class="line">                ans[index] = i - index;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 压入新元素到栈内</span></span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯PCG移动客户端开发实习一面</title>
      <link href="/2020/06/24/%E8%85%BE%E8%AE%AFPCG%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
      <url>/2020/06/24/%E8%85%BE%E8%AE%AFPCG%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下面试过程，积累一下经验。</p><a id="more"></a><p>全程48分钟，电话面试。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>长度为N的数组，将正数全部放在数组左边，负数全部放在数组右边。（解释即可）</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>介绍一下个人经历。</p><p>介绍一下项目经历。</p><p>AsyncTask底层原理。</p><p>AsyncTask内部Handler的作用？Handler如何发挥作用？</p><p>消息机制</p><p>除了AsyncTask还有什么其他的接口或者方法可以实现子线程加载数据更新主线程？</p><p>bitmap尺寸如何确定？</p><p>bitmap图片压缩质量参数RGB_565和ARGB_8888的区别？<br>答案：<br>色彩的存储方法：我们知道ARGB指的是一种色彩模式，里面A代表Alpha，R表示red，G表示green，B表示blue，其实所有的可见色都是右红绿蓝组成的，所以红绿蓝又称为三原色，每个原色都存储着所表示颜色的信息值<br>ALPHA_8就是Alpha由8位组成<br>ARGB_4444就是由4个4位组成即16位，<br>ARGB_8888就是由4个8位组成即32位，<br>RGB_565就是R为5位，G为6位，B为5位共16位<br>所以<br>ALPHA_8 代表8位Alpha位图<br>ARGB_4444 代表16位ARGB位图<br>ARGB_8888 代表32位ARGB位图<br>RGB_565 代表16位RGB位图</p><p>bitmap生成的对象是保存在Java堆中还是方法区？（误导题）</p><p>== 和 equals()的区别?</p><p>介绍一下进程和线程?</p><p>如何判断可回收的对象？</p><p>为什么需要Stop the world？</p><p>介绍一下软引用和弱引用.</p><p>HTTP和HTTPS的区别？</p><p>HTTPS如何保证安全？</p><p>对称加密和非对称加密是什么？</p><p>知道中间人攻击吗？</p><p>HTTPS可以保证不受到中间人攻击吗？</p><p>项目中说回收了一些资源，说说回收了什么？</p><p>LruCache的底层实现是什么？</p><p>LinkedHashMap的底层实现是怎样的呢？</p><p>LinkedHashMap的扩容机制是怎样的？</p><p>ConcurrentHashMap和HashMap的区别是什么？</p><p>项目中出现内存泄漏的情况举例？</p><p>如何在项目中检测内存泄漏的呢？</p><p>还有什么情况会导致内存泄漏？</p><p>你说很多内存泄漏的情况都与Activity的引用相关，那么如何通过Activity判断是否有内存泄漏呢？（提示：根据Activity的生命周期来判断）</p><p>可能还有忘记了。。。</p><h2 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h2><p>您那边是什么部门呢？<br>腾讯PCG事业群，动漫相关。</p><p>您对我后面的学习有什么建议吗？<br>多了解一些底层的知识，多了解一些框架的内容，多去扩展知识。</p>]]></content>
      
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android面试题自测</title>
      <link href="/2020/06/19/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/"/>
      <url>/2020/06/19/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>Android常见面试题整理，对答案进行了隐藏处理，可用于自测。</p><p>本处面试题来自于一些博客，在文末参考处添加了链接，可前往对应网站查看更多信息。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络面试题自测</title>
      <link href="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/"/>
      <url>/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>计算机网络常见面试题整理，对答案进行了隐藏处理，可用于自测。</p><p>本处面试题来自于JavaGuide以及一些博客，在文末参考处添加了链接，可前往对应网站查看更多信息。</p><a id="more"></a><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ol><li><h3 id="OSI的七层协议有什么层？TCP-IP的四层协议？五层协议？简单介绍一下各层作用以及拥有的协议？"><a href="#OSI的七层协议有什么层？TCP-IP的四层协议？五层协议？简单介绍一下各层作用以及拥有的协议？" class="headerlink" title="OSI的七层协议有什么层？TCP/IP的四层协议？五层协议？简单介绍一下各层作用以及拥有的协议？"></a><font color=red>OSI的七层协议有什么层？TCP/IP的四层协议？五层协议？简单介绍一下各层作用以及拥有的协议？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>OSI的七层协议从上至下有：应用层，表示层，会话层，传输层，网络层，数据链路层，物理层。</p><p>TCP/IP的四层协议从上至下有：应用层，传输层，网络层，网络接口层。</p><p>五层协议从上至下有：应用层，传输层，网络层，数据链路层，物理层。</p><p>应用层：将传输层传输过来的数据按照数据的类型分别进行渲染和显示，有HTTP协议，FTP协议等。<br>传输层：建立端口至端口的通信，指明数据应被哪个应用程序接收处理。有TCP协议，UDP协议等。<br>网络层：建立主机至主机的通信，在大量的计算机中找到指定计算机的位置。有IP协议。<br>数据链路层，将数据分组为数据包，分为多个帧，每个帧拥有head和data两个部分，head中持有一些说明数据，发送方，接收方的信息。有以太网协议。<br>物理层，在物理层面上在两台主机之间建立连接，传输电信号。</p></blockquote></details><ol start="2"><li><h3 id="为什么有了MAC地址还需要IP地址？"><a href="#为什么有了MAC地址还需要IP地址？" class="headerlink" title="为什么有了MAC地址还需要IP地址？"></a>为什么有了MAC地址还需要IP地址？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>MAC地址是主机的唯一标识，而通常无法直接获得。通过使用ARP协议将IP地址转换至MAC地址可以方便的进行数据传输。</p><ol><li>每台主机出厂时存在一个唯一的MAC地址，是基于设备制造商的。而IP地址的分配基于网络拓扑结构，用于保证路由选择方案。两者所代表的含义并不相同。</li><li>使用IP地址更加方便数据的传输，数据包在网络节点之间的移动都是使用ARP协议将IP地址映射到MAC地址完成的。</li></ol></blockquote></details><ol start="3"><li><h3 id="ARP是地址解析协议，简单语言解释一下工作原理。"><a href="#ARP是地址解析协议，简单语言解释一下工作原理。" class="headerlink" title="ARP是地址解析协议，简单语言解释一下工作原理。"></a><font color=red>ARP是地址解析协议，简单语言解释一下工作原理。</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><ol><li><p><strong>每个主机</strong>都会在自己的ARP缓冲区中建立<strong>一个ARP列表</strong>，以<strong>表示IP地址和MAC地址之间的对应关系</strong>。</p></li><li><p>当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。（广播）</p></li><li><p>当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到自己的ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。（单播）</p></li><li><p>源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p></li></ol><p>广播发送ARP请求，单播发送ARP响应。</p><p>每个主机有自己的ARP表用于记录IP地址与MAC地址的关系。发送方想要发送一个数据给一个IP地址的主机，先去自己的ARP表查找，找不到就向本网段的所有主机发送ARP数据包来获得目标MAC地址。目标主机收到数据包后，先在自己的ARP表中记录发送方的IP地址和MAC地址，然后返回自己的MAC地址，发送方主机记录下这个MAC地址和IP地址的关系，然后开始发送数据。</p></blockquote></details><ol start="2"><li><h3 id="IP地址的分类？"><a href="#IP地址的分类？" class="headerlink" title="IP地址的分类？"></a>IP地址的分类？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>IP地址被划分为 0 ~ 126/128 ~ 191/192 ~ 223/224 ~ 239/240 ~ 255这五类，A，B，C，D，E类。其中正常使用ABC类，D，E用作科研或者其他工作。客户机一般在局域网中相互间通信，一般采用自己配置的IP地址，与局域网中其他客户机通信。还可以采用DHCP协议自动获取IP。</p></blockquote></details><ol start="4"><li><h3 id="TCP和UDP的区别是什么？"><a href="#TCP和UDP的区别是什么？" class="headerlink" title="TCP和UDP的区别是什么？"></a><font color=red>TCP和UDP的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>TCP，传输控制协议，面向连接，使用全双工的可靠信道，提供可靠服务，即无差错，不丢失，不重复且按序抵达。拥有拥塞控制，流量控制，超时重发等可靠性检测手段。面向字节流，每条TCP连接只能是点到点的，一般用于传输对可靠性要求高的数据。</p><p>UDP，用户数据报协议，无连接，使用不可靠信道，尽最大努力交付，不保证可靠交付。无可靠性检测手段。面向报文，支持一对一，一对多，多对一，多对多的交互通信，用于传输对可靠性要不高的数据。</p><p>总结，由于TCP拥有各种保证可靠性的手段，所以其传输效率低于UDP。TCP协议适用于对效率要求相对低，但对准确性要求相对高的场景下。而UDP协议适用于对效率要求相对高，对准确性要求相对低的场景。</p></blockquote></details><ol start="5"><li><h3 id="TCP与UDP有哪些协议和应用？"><a href="#TCP与UDP有哪些协议和应用？" class="headerlink" title="TCP与UDP有哪些协议和应用？"></a><font color=red>TCP与UDP有哪些协议和应用？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>TCP有HTTP，FTP等协议。<br>UDP有DNS，DHCP等协议。<br>由于TCP和UDP的特性可以推出：<br>TCP：</p><ol><li>文件传输（FTP，HTTP对数据准确性要求高，速度可以相对慢）。</li><li>邮件传输（POP，IMAP，SMTP对数据准确性要求高，非紧急应用）。</li><li>远程登陆（TELNET，SSH对数据准确性有一定的要求，有连接的概念）。</li></ol><p>UDP：</p><ol><li>即时通信（QQ聊天，对数据准确性和丢包要求较低，但是速度必须快，会进行优化，使用TCP辅助来保证一定的可靠性）。</li><li>在线视频（微信视频，网络视频，速度必须快，要求实时性以保证视频连续，但是偶尔会遗失一个图像帧，可接受）</li><li>网络语音电话（语音数据包较小，需要高速发送，偶尔断音或者串音也不会有很大影响）</li></ol></blockquote></details><ol start="6"><li><h3 id="TCP协议如何来保证传输的可靠性"><a href="#TCP协议如何来保证传输的可靠性" class="headerlink" title="TCP协议如何来保证传输的可靠性"></a><font color=red>TCP协议如何来保证传输的可靠性</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>重传机制，回退N步协议，选择重传协议。<br>拥塞控制。<br>流量控制。</p><p>回退N步协议，可以同时发送多个数据包，数据包按序接收，接收后，发送窗口会向后移动。如果某个数据包没有传到接受端，则所有已发送还未接收的数据包会被重传。<br>选择重传协议，回退N步会重传很多正常的数据包，而选择重传只重传丢失的数据包，其他不是按序的数据包先抵达接受端会被缓存，等到重传的数据包抵达再一起被接收。</p></blockquote></details><ol start="7"><li><h3 id="拥塞控制和流量控制是什么？两者的区别？"><a href="#拥塞控制和流量控制是什么？两者的区别？" class="headerlink" title="拥塞控制和流量控制是什么？两者的区别？"></a><font color=red>拥塞控制和流量控制是什么？两者的区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>拥塞控制是针对网络传输过程中可能遇到拥塞情况的处理机制，拥有慢启动，拥塞避免，快重传和快恢复几个过程。</p><p>慢启动，主机传输数据时会从1个数据包的速度开始，每次增长两倍，以指数的增长速度快速增长。慢启动不是指速度增长的慢，而是指每次都是从1个数据包的传输开始。<br>拥塞避免，慢启动抵达阈值后，会被切换为拥塞避免，即从指数增长转变为线性增长，每次增长1个数据包，其目的是为了探测可能导致拥塞的最大值。<br>找到拥塞的最大限制值后，阈值会变为最大值的一半，然后重新从1开始重复慢启动和拥塞避免的过程。<br>如果某个数据包因为某些原因无法抵达目的主机，会通过使用快重传机制迅速发现和处理，而不用等待超时重传。<br>快重传和快恢复，一个数据包遗失，则目标主机会返回确认上一个数据包的报文，返回三次确认报文，则发送端主机可知此数据包丢失，就会进行快恢复机制，阈值会直接被指定为当前数据包发送量的一半，然后从阈值量开始进行线性增长。</p><p>流量控制是针对发送方发送数据动态调整以适应接收方处理速度的限制。</p><p>每次接收方接受数据返回确认信息时，会附带有接收方还可以处理的数据大小，发送方根据这个接受窗口动态的调整发送数据包的速率，如果接收窗口为0，则发送方会被阻塞。<br>发送方阻塞后会使用一个定时器计时，计时结束会发送一个探测数据包查看接收方是否可以重新接收数据，如果可以则启动发送方发送数据，否则重置定时器继续阻塞等待。</p></blockquote></details><ol start="8"><li><h3 id="TCP的三次握手和四次挥手过程和状态变化？"><a href="#TCP的三次握手和四次挥手过程和状态变化？" class="headerlink" title="TCP的三次握手和四次挥手过程和状态变化？"></a><font color=red>TCP的三次握手和四次挥手过程和状态变化？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>三次握手：</p><ol><li>客户端向服务端发送SYN报文请求连接，SYN（请求）报文会带有客户端的ISN（初始化序列号），客户端的状态会变为SYN_SENT。</li><li>服务端接收到客户端发来的SYN报文后，会返回客户端一个SYN报文和一个ACK（确认）报文，其中SYN报文带有服务端的ISN，ACK报文会返回客户端ISN+1作为已接收报文的回应，服务端状态会变为SYN_RCVD状态。</li><li>客户端接收到服务端发来的SYN+ACK报文后，会给服务端发送ACK报文，ACK报文带有服务端ISN+1作为响应，客户端状态会变为ESTABLISHED状态。</li><li>服务端接收到ACK报文后，会进入ESTABLISHED状态，此时连接建立。</li></ol><p>四次挥手：</p><ol><li>客户端向服务端发送FIN（结束）报文，带有客户端ISN。客户端状态变为FIN_WAIT_1。</li><li>服务端接收到FIN报文后，向客户端返回ACK报文，ACK报文带有客户端ISN+1作为回应，服务端状态变为CLOSE_WAIT状态，客户端变为FIN_WAIT_2状态。此时客户端无法向服务端发送数据，服务端还可以向客户端发送数据。</li><li>服务端向客户端发送FIN报文，带有服务端ISN，代表此时服务端想要结束连接了。服务端进入LAST_ACK状态。</li><li>客户端收到FIN报文后，返回一个ACK报文，带有服务端ISN+1作为响应，客户端进入TIME_WAIT状态。客户端会在等待一次报文往返的时间后进入CLOSED状态。</li><li>服务端收到ACK报文后进入CLOSED状态。</li></ol></blockquote></details><ol start="9"><li><h3 id="为什么TCP链接需要三次握手，两次不可以么，为什么？"><a href="#为什么TCP链接需要三次握手，两次不可以么，为什么？" class="headerlink" title="为什么TCP链接需要三次握手，两次不可以么，为什么？"></a><font color=red>为什么TCP链接需要三次握手，两次不可以么，为什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>如果客户端向服务端发送一个请求建立连接，而这个请求因为某个原因未抵达服务端，客户端会误认为遗失，重发一个请求报文，建立连接后，之前未抵达的请求报文抵达了服务端，则服务端会再次与客户端建立连接，这就导致了重复建立连接的问题。</p><p>而且三次握手的理念就是客户端和服务端互相得到对方的序列号，如果没有第三次握手，服务端无法确定客户端是否知道服务端的序列号，就会导致无法建立可靠的传输。</p></blockquote></details><ol start="10"><li><h3 id="为什么四次挥手中客户端发送ACK后不直接进入CLOSED状态？"><a href="#为什么四次挥手中客户端发送ACK后不直接进入CLOSED状态？" class="headerlink" title="为什么四次挥手中客户端发送ACK后不直接进入CLOSED状态？"></a><font color=red>为什么四次挥手中客户端发送ACK后不直接进入CLOSED状态？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>因为客户端需要等待服务端完全关闭，如果第四次挥手的ACK报文发送后遇到特殊情况遗失，当客户端直接关闭时，服务端就无法得到这个ACK报文了就会一直处于LAST_ACK状态。而有这个等待后，如果服务端没有收到ACK报文就会重发FIN报文，再次请求，客户端会重新发送ACK报文并重置TIME_WAIT计时器。</p><p>还可以确保网络中此次连接的无用数据从网络中完全消失，避免本次的数据包传输到下一次连接的服务端的问题。</p></blockquote></details><ol start="11"><li><h3 id="播放视频应该使用TCP还是UDP？为什么？"><a href="#播放视频应该使用TCP还是UDP？为什么？" class="headerlink" title="播放视频应该使用TCP还是UDP？为什么？"></a>播放视频应该使用TCP还是UDP？为什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>播放视频一般使用UDP，UDP对于网络通信的质量要求不高，适用于要求网络通讯速度可以尽量快的实时性应用，而TCP适用于对网络通讯质量有要求的可靠性应用。视频一般分为关键帧和普通帧，虽然UDP会出现丢帧，但仅仅是普通帧不会导致很大的损失，但拥有了高速率和实时性的特性。</p></blockquote></details><ol start="12"><li><h3 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a><font color=red>HTTP是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>计算机通过网络进行通信的规则，是一个基于请求和响应，无状态的，应用层的协议。</p><p>HTTP有四个基于：</p><ol><li>请求和响应，客户端发送请求，服务端响应数据。</li><li>无状态的，对事务处理无记忆能力，本次连接的各种状态断开连接后都会被遗忘，不会影响到下一次连接。</li><li>处于应用层，需要配合TCP/IP使用。</li><li>底层TCP/IP，HTTP使用TCP/IP作为其支撑运输的协议。</li></ol></blockquote></details><ol start="13"><li><h3 id="HTTP报文结构？"><a href="#HTTP报文结构？" class="headerlink" title="HTTP报文结构？"></a><font color=red>HTTP报文结构？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>HTTP请求报文，四个部分组成：请求行，请求头，空行，请求数据。<br>请求行由请求方法字段，URL字段，HTTP协议版本组成，使用空格分隔。</p><ol><li>请求方法字段：GET，POST等。</li><li>HTTP协议版本：HTTP 1.0（短连接），HTTP 1.1（长连接）</li></ol><p>请求头包括一系列信息，常见的有Host主机信息，Cookie，Connection，Range（指定范围，断点续传）等。<br>空行，用于提示请求头到此为止。<br>请求数据，GET请求此项为空，POST请求，此项为要提交的数据。</p><p>HTTP响应报文，四部分组成：响应行，响应头，空行，响应体。<br>响应行由协议版本，状态码及其描述组成。<br>响应头用于描述服务器基本信息和对数据的描述，客户端可以根据这些信息了解如何处理发回的数据。<br>空行，用于提示响应头到此为止。<br>响应体，响应的消息体，纯数据就返回纯数据，请求的是HTML页面就返回HTML页面，JS就返回JS代码等等。</p></blockquote></details><ol start="14"><li><h3 id="了解哪些响应码？"><a href="#了解哪些响应码？" class="headerlink" title="了解哪些响应码？"></a>了解哪些响应码？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>1xx：服务器已接收客户端请求，正在处理，客户端可以继续发送请求。<br>2xx：服务器已成功接收客户端请求，并进行了处理。<br>3xx：服务器要求客户端重定向。<br>4xx：客户端的请求有非法内容。<br>5xx：服务端无法处理客户端请求，服务端出现异常。</p><p>200：OK，客户端请求成功。<br>400：Bad Request，客户端请求有语法错误。<br>401：Unauthorized，请求未授权。<br>403：Forbidden，服务器拒绝提供服务。<br>404：Not Found，请求的资源不存在，输入错误的URL。<br>500：Internet Server Error，服务器出现不可预期的错误，无法完成客户端请求。<br>503：Server Unavailable，服务器当前无法处理客户端请求，一段时间后可能可以恢复正常。</p></blockquote></details><ol start="15"><li><h3 id="Get和Post的区别？"><a href="#Get和Post的区别？" class="headerlink" title="Get和Post的区别？"></a>Get和Post的区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>GET：客户端从服务器读取某个资源时使用GET，一般用于获取/查询资源信息。GET参数通过URL传递（写在了URL上），传递参数有长度限制，不可传递敏感信息。</p><p>POST：客户端给服务器提供信息使用POST，POST会附带用户数据，一般用于更新资源信息，POST将请求参数封装在HTTP的请求数据中，可传输大量数据，传参方式比GET更安全。</p><p>POST比GET方式的安全性要高，通过GET提交数据，用户名和密码将明文出现在URL上，因为一下几个原因GET方式安全性会比POST弱：</p><ol><li>登录页面有可能被浏览器缓存。</li><li>其他人查看浏览器的历史纪录，那么别人就可 以拿到你的账号和密码了。</li><li>当遇上跨站的攻击时，安全性的表现更差。</li></ol></blockquote></details><ol start="16"><li><h3 id="HTTP-1-0，HTTP-1-1，HTTP-2-0的区别？"><a href="#HTTP-1-0，HTTP-1-1，HTTP-2-0的区别？" class="headerlink" title="HTTP 1.0，HTTP 1.1，HTTP 2.0的区别？"></a>HTTP 1.0，HTTP 1.1，HTTP 2.0的区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>HTTP 1.0与HTTP 1.1的区别：<br>HTTP 1.0默认使用短连接，HTTP 1.1默认使用长连接。<br>HTTP 1.1增加了更多请求头和响应头来改进和扩充HTTP 1.0的功能，比如身份认证，状态管理，Cache缓存等。</p><p>HTTP 2.0与HTTP 1.x的区别：<br>新的二进制格式：HTTP 2.0采用二进制格式，实现方便且健壮，不同于HTTP 1.x的解析是基于文本。<br>多路复用：连接共享，每个请求都是用作连接共享机制的。<br>服务端推送：服务器主动向客户端推送消息。</p></blockquote></details><ol start="17"><li><h3 id="HTTP和TCP的区别？"><a href="#HTTP和TCP的区别？" class="headerlink" title="HTTP和TCP的区别？"></a><font color=red>HTTP和TCP的区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>TCP是传输层协议，定义数据传输和连接方式的规范。通过三次握手建立连接，四次挥手释放连接。</p><p>HTTP是应用层协议，定义传输的数据内容的规范。HTTP使用请求-响应方式，基于TCP协议传输，默认端口是80。</p></blockquote></details><ol start="18"><li><h3 id="HTTP和HTTPS的区别？"><a href="#HTTP和HTTPS的区别？" class="headerlink" title="HTTP和HTTPS的区别？"></a><font color=red>HTTP和HTTPS的区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>HTTP，运行在TCP上，传输内容是明文，主端口是80。</p><p>HTTPS，运行在SSL/TLS上，SSL/TLS运行在TCP上，传输内容是加密后的，端口是443。</p></blockquote></details><ol start="19"><li><h3 id="什么是HTTP长连接和短连接？它们的优缺点和适用场景是什么？"><a href="#什么是HTTP长连接和短连接？它们的优缺点和适用场景是什么？" class="headerlink" title="什么是HTTP长连接和短连接？它们的优缺点和适用场景是什么？"></a><font color=red>什么是HTTP长连接和短连接？它们的优缺点和适用场景是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>HTTP短连接是指连接建立并且执行一次请求后就会断开，如果还有新的请求需要重新建立连接。在HTTP 1.0中是默认的连接方式。</p><p>HTTP长连接是指连接建立并且执行一次请求后不会断开，如果还有新的请求可以重复使用这个连接通道。在HTTP 1.1中成为默认的连接方式。在响应头中加入Connection:keep_alive。</p><p>keep_alive不会永久保持连接，有一个保持时间，可以在不同的服务器软件(Apache)中设定这个时间。想要实现长连接需要客户端和服务端都支持长连接。</p><p>短连接优点：<br>服务器管理简单。<br>所有留存的连接都是有用的连接，不需要额外控制手段。</p><p>短连接缺点：<br>如果客户端请求频繁，则会在TCP的建立和释放上浪费大量时间和带宽。</p><p>长连接优点：<br>不需要重复建立和释放连接，开销小。</p><p>长连接缺点：<br>一直不中断连接会导致随着客户端的连接越来越多，服务器最终会崩溃。</p><p>短连接适用场景：并发量大且用户无需频繁操作的情况使用短链接，如web网站的HTTP服务一般会使用短连接。</p><p>长连接适用场景：操作频繁，点对点的通讯，连接数不多的情况。比如数据库的连接。</p></blockquote></details><ol start="20"><li><h3 id="HTTP协议和TCP-IP协议的关系？"><a href="#HTTP协议和TCP-IP协议的关系？" class="headerlink" title="HTTP协议和TCP/IP协议的关系？"></a><font color=red>HTTP协议和TCP/IP协议的关系？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。IP协议主要解决<strong>网络路由和寻址</strong>问题，TCP协议主要解决如何在IP层上<strong>可靠的传递数据包</strong>，使得在网络的另一端可以收到发送端发出的所有包，而且顺序和发送出去的顺序是一致的。TCP协议具有可靠，面向连接的特点。</p></blockquote></details><ol start="21"><li><h3 id="HTTP协议无状态的理解？"><a href="#HTTP协议无状态的理解？" class="headerlink" title="HTTP协议无状态的理解？"></a><font color=red>HTTP协议无状态的理解？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>无状态就是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。打开一个服务器上的网页与之前打开这个服务器上的网页没有任何联系。</p></blockquote></details><ol start="22"><li><h3 id="HTTPS协议的具体过程？"><a href="#HTTPS协议的具体过程？" class="headerlink" title="HTTPS协议的具体过程？"></a><font color=red>HTTPS协议的具体过程？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><ol><li>客户端向服务器发出HTTPS请求。</li><li>服务端接收到HTTPS请求后，向CA签发机构申请证书。对个人信息和服务器公钥进行Hash得到信息摘要，然后使用从CA获取的私钥对信息摘要进行加密，形成数字签名。服务器将个人信息，服务器公钥和数字签名打包发送给客户端。</li><li>客户端接收到发来的数据后，使用CA公钥解析数字签名，得到信息摘要，将发来的个人信息和服务器公钥进行hash得到另一份信息摘要，对比两个摘要确认信息来源是否正确合法。</li><li>确认合法后，客户端生成一个随机数，使用服务器公钥加密这个随机数，并发送给服务端。</li><li>服务端使用服务器私钥解密得到随机数。使用随机数对需要发送的数据进行加密，传给客户端。</li><li>客户端使用随机数解密，得到响应的数据。</li></ol></blockquote></details><ol start="23"><li><h3 id="如何验证证书的合法性"><a href="#如何验证证书的合法性" class="headerlink" title="如何验证证书的合法性?"></a><font color=red>如何验证证书的合法性?</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><ol><li>可信性验证/合法性验证：验证证书来源（CA机构）的合法性。</li><li>完整性验证：信息摘要的比较。</li><li>有效性验证：证书的有效期的验证。</li></ol></blockquote></details><ol start="24"><li><h3 id="HTTP协议和Socket的区别是什么？"><a href="#HTTP协议和Socket的区别是什么？" class="headerlink" title="HTTP协议和Socket的区别是什么？"></a>HTTP协议和Socket的区别是什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>HTTP是应用层协议，基于TCP协议，使用<strong>请求-响应</strong>方式建立连接，在请求是需要先建立连接且客户端需要先发出请求，可见服务器需要等待到客户端发送一次请求后才可以将数据传回给客户端。</p><p>Socket，套接字是对TCP/IP协议的封装，是接口而非协议。创建Socket连接时可以指定传输层协议为TCP或UDP。Socket建立连接的三步骤：服务器监听 -&gt; 客户端请求 -&gt; 连接确认。可见服务器直接将数据传送给客户端。</p></blockquote></details><ol start="25"><li><h3 id="地址栏输入URL会发生什么？"><a href="#地址栏输入URL会发生什么？" class="headerlink" title="地址栏输入URL会发生什么？"></a><font color=red>地址栏输入URL会发生什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><ol><li>根据URL在DNS服务器解析得到IP地址。从浏览器缓存，操作系统缓存，路由器缓存，本地域名服务器缓存，域名服务器缓存。</li><li>获得IP地址后，使用TCP的三次握手建立连接。</li><li>连接成功建立后，客户端向服务端发送HTTP GET请求，请求包含主机信息，用户代理（浏览器）信息，连接属性（keep_alive，Cookies）等。</li><li>服务器接收到请求后，处理请求，生成响应头和具体的响应内容。发送给客户端。</li><li>客户端接收到响应数据后，先解析响应头，里面有响应码，页面编码等信息。然后将响应内容根据数据类型渲染和展示到用户界面。</li><li>客户端通过TCP四次挥手断开连接。</li></ol></blockquote></details><ol start="26"><li><h3 id="如果建立连接后突然出现故障怎么办？"><a href="#如果建立连接后突然出现故障怎么办？" class="headerlink" title="如果建立连接后突然出现故障怎么办？"></a><font color=red>如果建立连接后突然出现故障怎么办？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>TCP有保活计时器，客户端如果出现故障，服务器不会一直等下去，会浪费资源。服务器每收到一次客户端请求就会复位这个计时器，计时器时间通常是2小时，如果2小时都未收到客户端的任何数据，服务器就会发送一个探测报文到客户端，每75秒发送一次，如果发10次探测报文都没有反应，就会任务客户端出现故障，就会关闭连接。</p></blockquote></details><ol start="27"><li><h3 id="Cookie和Session的区别？"><a href="#Cookie和Session的区别？" class="headerlink" title="Cookie和Session的区别？"></a><font color=red>Cookie和Session的区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Cookie一般用于保存用户信息。其主要作用是：</p><ol><li>保存用户基本信息，下次自动写入。</li><li>保持登陆，存放了token在Cookie中，下次登陆根据token值查找用户。</li><li>登陆后访问网站其他页面无需再次登陆。</li></ol><p>Session通过服务端记录用户状态。比如购物车，想要添加商品时，系统并不知道是哪个用户操作的，因为HTTP无状态。而服务端给特定用户创建特定的Session后就可以标识这个用户并且跟踪这个用户了。</p><p>Cookie保存在客户端，而Session保存在服务端。相对而言，Session的安全性更高。如果想要在Cookie中存储敏感信息，不要直接写入，而是先加密Cookie信息，使用时再在服务端解密。</p></blockquote></details><ol start="28"><li><h3 id="从网络加载一个10M的图片，说下注意事项。"><a href="#从网络加载一个10M的图片，说下注意事项。" class="headerlink" title="从网络加载一个10M的图片，说下注意事项。"></a><font color=red>从网络加载一个10M的图片，说下注意事项。</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>分块加载处理，首先读取图像的格式信息，根据格式信息对图片进行分块，每次仅加载某一块区域的图像，使用LruCache来对图像的缓存进行限制。而查看全图时，可以对图像进行质量压缩。（猜测答案）</p></blockquote></details><p>网络接口卡（网卡）的功能？<br>IO中同步与异步，阻塞与非阻塞区别<br>URI和URL的区别<br>GET请求中URL编码的意义<br>如何避免浏览器缓存<br>什么是分块传送。<br>谈谈SQL 注入<br>DDos 攻击<br>DDos攻击有那些预防方法？<br>什么是XSS 攻击</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[JavaGuide]<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a></p><p>[帅地CSDN博客]<a href="https://blog.csdn.net/m0_37907797/article/details/105106732" target="_blank" rel="noopener">https://blog.csdn.net/m0_37907797/article/details/105106732</a></p><p>[牛客网试题广场]<a href="https://www.nowcoder.com/questionCenter" target="_blank" rel="noopener">https://www.nowcoder.com/questionCenter</a></p><p>[交换机、集线器与路由器，网桥，网关的介绍]<a href="https://blog.csdn.net/pcwl1206/article/details/83856741" target="_blank" rel="noopener">https://blog.csdn.net/pcwl1206/article/details/83856741</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(31 - 35)</title>
      <link href="/2020/06/18/%E5%89%91%E6%8C%87offerPart7/"/>
      <url>/2020/06/18/%E5%89%91%E6%8C%87offerPart7/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第三十一至第三十五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="整数中1出现的次数（从1到n整数中1出现的次数）"><a href="#整数中1出现的次数（从1到n整数中1出现的次数）" class="headerlink" title="整数中1出现的次数（从1到n整数中1出现的次数）"></a><a href="https://www.nowcoder.com/practice/bd7f978302044eee894445e244c7eee6?tpId=13&&tqId=11184&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">整数中1出现的次数（从1到n整数中1出现的次数）</a></h2><p>求出1<del>13的整数中1出现的次数，并算出100</del>1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次，但是对于后面问题他就没辙了。ACMer希望你们帮帮他，并把问题更加普遍化，可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</p><p>方法一，暴力法。</p><p>直接以遍历的方式来统计每个数字中1出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1Between1AndN_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            String str = String.valueOf(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str.length(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.charAt(j) == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，依次统计每一位上1的个数。</p><p>high：当前位之前高位上的数字<br>low：当前位之后低位上的数字<br>cur：当前位<br>根据规律可得：<br>当cur为0时，1的个数是high * digit;<br>当cur为1时，1的个数是high * digit + low + 1;<br>当cur大于1时，1的个数是(high + 1) * digit;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1Between1AndN_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = n / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(high != <span class="number">0</span> || cur != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur == <span class="number">0</span>)&#123;</span><br><span class="line">                res = res + high * digit;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur == <span class="number">1</span>)&#123;</span><br><span class="line">                res = res + high * digit + low + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                res = res + high * digit + digit;</span><br><span class="line">            &#125;</span><br><span class="line">            low = low + cur * digit;</span><br><span class="line">            cur = high % <span class="number">10</span>;</span><br><span class="line">            high = high / <span class="number">10</span>;</span><br><span class="line">            digit = digit * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a><a href="https://www.nowcoder.com/practice/8fecd3f8ba334add803bf2a06af1b993?tpId=13&tqId=11185&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">把数组排成最小的数</a></h2><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p><p>方法一，暴力DFS法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Long min = Long.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        dfs(numbers, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(min);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length - <span class="number">1</span> == begin)&#123;</span><br><span class="line">            String str = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">                str = str + String.valueOf(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            min = Math.min(min, Long.parseLong(str));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[begin];</span><br><span class="line">            arr[begin] = temp;</span><br><span class="line">            </span><br><span class="line">            dfs(arr, begin + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[begin];</span><br><span class="line">            arr[begin] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，贪心算法。</p><p>如果有两个字符串a，b，如果a + b &lt; b + a，显然希望a排在b的前面，因为a排在前面可以使结果更小。</p><p>于是我们就自定义排序规则，使得String数组中字符串都满足如上规则，那么最后的结果肯定是最小的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">1</span>) <span class="keyword">return</span> String.valueOf(numbers[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 转为一个String数组</span></span><br><span class="line">        String[] str = <span class="keyword">new</span> String[numbers.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            str[i] = String.valueOf(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可视为一个冒泡排序, 使得两两拼接的数字是最小的.</span></span><br><span class="line">        Arrays.sort(str, <span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span></span>&#123;</span><br><span class="line">                String s1 = str1 + str2;</span><br><span class="line">                String s2 = str2 + str1;</span><br><span class="line">                <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 依次接上即可</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">            sb.append(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a><a href="https://www.nowcoder.com/practice/6aa9e04fc3794f68acf8778237ba065b?tpId=13&tqId=11186&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">丑数</a></h2><p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p><p>方法一，使用一个数组保存计算过的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetUglyNumber_Solution</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> two = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> three = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> five = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[index]; <span class="comment">// 保存状态，避免重复取值和取值错误的情况</span></span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; index; i++)&#123;</span><br><span class="line">            res[i] = Math.min(res[two] * <span class="number">2</span>, Math.min(res[three] * <span class="number">3</span>, res[five] * <span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(res[i] == res[two] * <span class="number">2</span>) two++;</span><br><span class="line">            <span class="keyword">if</span>(res[i] == res[three] * <span class="number">3</span>) three++;</span><br><span class="line">            <span class="keyword">if</span>(res[i] == res[five] * <span class="number">5</span>) five++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[index - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第一个只出现一次的字符"><a href="#第一个只出现一次的字符" class="headerlink" title="第一个只出现一次的字符"></a><a href="https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c?tpId=13&tqId=11187&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">第一个只出现一次的字符</a></h2><p>在一个字符串（0&lt;=字符串长度&lt;=10000，全部由字母组成）中找到第一个只出现一次的字符，并返回它的位置，如果没有则返回 -1（需要区分大小写）。（从0开始计数）</p><p>方法一，使用HashMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            map.put(str.charAt(i), map.getOrDefault(str.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(str.charAt(i)) == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，使用int数组。</p><p>类似方法一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            res[str.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[str.charAt(i)] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，使用BitSet。</p><p>相比于前两个方法更节省空间。</p><p>使用两个BitSet来判断字符出现一次还是多次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        BitSet b1 = <span class="keyword">new</span> BitSet(<span class="number">128</span>);</span><br><span class="line">        BitSet b2 = <span class="keyword">new</span> BitSet(<span class="number">128</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!b1.get(str.charAt(i)) &amp;&amp; !b2.get(str.charAt(i)))&#123;</span><br><span class="line">                b1.set(str.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b1.get(str.charAt(i)) &amp;&amp; !b2.get(str.charAt(i)))&#123;</span><br><span class="line">                b2.set(str.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b1.get(str.charAt(i)) &amp;&amp; !b2.get(str.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a><a href="https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=13&tqId=11188&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">数组中的逆序对</a></h2><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目保证输入的数组中没有的相同的数字数据范围：对于%<span class="number">50</span>的数据,size&lt;=<span class="number">10</span>^<span class="number">4</span>对于%<span class="number">75</span>的数据,size&lt;=<span class="number">10</span>^<span class="number">5</span>对于%<span class="number">100</span>的数据,size&lt;=<span class="number">2</span>*<span class="number">10</span>^<span class="number">5</span></span><br></pre></td></tr></table></figure><p>示例1<br>输入</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>方法一，暴力法。（超时）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">InversePairs</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[start] &gt; array[end])&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            start = <span class="number">0</span>;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，归并排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">InversePairs</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        sort(array, <span class="number">0</span>, array.length - <span class="number">1</span>); <span class="comment">// 归并排序</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line"><span class="comment">// 递归分割</span></span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            sort(array, left, mid);</span><br><span class="line">            sort(array, mid + <span class="number">1</span>, right);</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 逐层合并</span></span><br><span class="line">            merge(array, left, mid, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; array[j])&#123;</span><br><span class="line">                temp[index++] = array[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 合并时如果左侧部分的当前位大于右侧部分的某位，则左侧当前位及之后位都大于右侧部分那一位</span></span><br><span class="line"><span class="comment">// 所以使用mid - i + 1直接全部添加到计数器中</span></span><br><span class="line">                temp[index++] = array[j++];</span><br><span class="line">                res = res + (mid - i + <span class="number">1</span>);</span><br><span class="line">                res = res % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid) temp[index++] = array[i++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= right) temp[index++] = array[j++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cur = <span class="number">0</span>; cur &lt; index; cur++)&#123;</span><br><span class="line">            array[left++] = temp[cur];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(36 - 40)</title>
      <link href="/2020/06/18/%E5%89%91%E6%8C%87offerPart8/"/>
      <url>/2020/06/18/%E5%89%91%E6%8C%87offerPart8/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第三十六至第四十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="两个链表的第一个公共结点"><a href="#两个链表的第一个公共结点" class="headerlink" title="两个链表的第一个公共结点"></a><a href="https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46?tpId=13&tqId=11189&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">两个链表的第一个公共结点</a></h2><p>输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p><p>方法一，暴力法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(pHead1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode temp = pHead2;</span><br><span class="line">            <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pHead1 == temp)&#123;</span><br><span class="line">                    <span class="keyword">return</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pHead1 = pHead1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，辅助栈。</p><p>如果有公共结点则两个链表的尾部应该是相同的。由于两链表长度不一致，所以可以采用两个辅助栈分别读取两个链表，然后从后向前比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 辅助栈</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;ListNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="comment">// 将链表节点入栈</span></span><br><span class="line">        <span class="keyword">while</span>(pHead1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack1.push(pHead1);</span><br><span class="line">            pHead1 = pHead1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pHead2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack2.push(pHead2);</span><br><span class="line">            pHead2 = pHead2.next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 从链表尾部开始比较，找到第一个公共节点</span></span><br><span class="line">        ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty() &amp;&amp; !stack2.isEmpty())&#123;</span><br><span class="line">            ListNode n1 = stack1.pop();</span><br><span class="line">            ListNode n2 = stack2.pop();</span><br><span class="line">            <span class="keyword">if</span>(n1 == n2)&#123;</span><br><span class="line">                temp = n1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，同步长度法。</p><p>首先让长的链表走到剩余长度与短链表长度一致的位置，然后再同步进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="keyword">null</span> || pHead2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 获取两链表表头</span></span><br><span class="line">        ListNode longList = pHead1;</span><br><span class="line">        ListNode shortList = pHead2;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 计算两链表长度并得到两者长度之差</span></span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pHead1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            len1++;</span><br><span class="line">            pHead1 = pHead1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pHead2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            len2++;</span><br><span class="line">            pHead2 = pHead2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> gap = Math.abs(len1 - len2);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 判断哪个链表更长</span></span><br><span class="line">        <span class="keyword">if</span>(len1 &lt; len2)&#123;</span><br><span class="line">            ListNode temp = longList;</span><br><span class="line">            longList = shortList;</span><br><span class="line">            shortList = temp;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 长链表先走多余的部分</span></span><br><span class="line">        <span class="keyword">while</span>(gap &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            longList = longList.next;</span><br><span class="line">            gap--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两链表同步进行查找，得到结果</span></span><br><span class="line">        <span class="keyword">while</span>(longList != <span class="keyword">null</span> &amp;&amp; shortList != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(longList == shortList)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                longList = longList.next;</span><br><span class="line">                shortList = shortList.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法四，双指针法。</p><p>使用两个指针对两链表同时执行遍历，一个指针遍历完一个链表后就会遍历另一个链表，达到两者长度相等的目的。</p><p>与方法三的目的相同，只是过程变为使用双指针了。利用了 $a + b = b + a$ 的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="keyword">null</span> || pHead2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode p1 = pHead1;</span><br><span class="line">        ListNode p2 = pHead2;</span><br><span class="line">        <span class="keyword">while</span>(p1 != p2)&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">            <span class="keyword">if</span>(p1 != p2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    p1 = pHead2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(p2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    p2 = pHead1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a><a href="https://www.nowcoder.com/practice/70610bf967994b22bb1c26f9ae901fa2?tpId=13&tqId=11190&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">数字在排序数组中出现的次数</a></h2><p>统计一个数字在排序数组中出现的次数。</p><p>方法一，暴力法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNumberOfK</span><span class="params">(<span class="keyword">int</span> [] array , <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] == k)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，二分查找。</p><p>利用题目中有序数组的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNumberOfK</span><span class="params">(<span class="keyword">int</span> [] array , <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 找到下界</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = array.length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[mid] &lt; k)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lBound = left;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 找到上界</span></span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = array.length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[mid] &lt;= k)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rBound = left;</span><br><span class="line"><span class="comment">// 相减即可得到结果</span></span><br><span class="line">        <span class="keyword">return</span> rBound - lBound;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a><a href="https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">二叉树的深度</a></h2><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><p>方法一，深度优先搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            max = Math.max(level, max);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left, level + <span class="number">1</span>);</span><br><span class="line">        dfs(root.right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，层次遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size != <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>) queue.offer(temp.left);</span><br><span class="line">                <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>) queue.offer(temp.right);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a><a href="https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">平衡二叉树</a></h2><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p><p>在这里，我们只需要考虑其平衡性，不需要考虑其是不是排序二叉树</p><p>方法一，递归法。</p><p>分别求得两个子树的高度计算是否为平衡树。然后再分别对左右子树进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> maxL = level(root.left, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 左子树高度</span></span><br><span class="line">        <span class="keyword">int</span> maxR = level(root.right, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 右子树高度</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 左右子树高度差小于等于1 &amp;&amp; 左子树为平衡树 &amp;&amp; 右子树为平衡树</span></span><br><span class="line">        <span class="keyword">return</span> (Math.abs(maxL - maxR) &lt;= <span class="number">1</span> &amp;&amp; IsBalanced_Solution(root.left) &amp;&amp; IsBalanced_Solution(root.right));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 计算高度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">level</span><span class="params">(TreeNode root, <span class="keyword">int</span> lev, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            max = Math.max(max,lev);</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">        max = level(root.left, lev + <span class="number">1</span>, max);</span><br><span class="line">        max = level(root.right, lev + <span class="number">1</span>, max);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a><a href="https://www.nowcoder.com/practice/e02fdb54d7524710a7d664d082bb7811?tpId=13&tqId=11193&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">数组中只出现一次的数字</a></h2><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p><p>方法一，哈希法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindNumsAppearOnce</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> num1[] , <span class="keyword">int</span> num2[])</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            map.put(array[i], map.getOrDefault(array[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(array[i]) == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">                    num1[<span class="number">0</span>] = array[i];</span><br><span class="line">                    flag++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    num2[<span class="number">0</span>] = array[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，异或法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindNumsAppearOnce</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> num1[] , <span class="keyword">int</span> num2[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 全部进行异或，res = num1 ^ num2</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            res = res ^ array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 找到异或后结果res中最后一个1的位置</span></span><br><span class="line"><span class="comment">// 因为异或结果为1代表两个仅出现一次的数字在这一位上是不同的</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((index &amp; res) == <span class="number">0</span>)&#123;</span><br><span class="line">            index = index &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据这个位置将数组分为两个单独部分进行异或，得到两个结果</span></span><br><span class="line">        <span class="keyword">int</span> res1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; index) == <span class="number">0</span>)&#123;</span><br><span class="line">                res1 = res1 ^ array[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res2 = res2 ^ array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num1[<span class="number">0</span>] = res1;</span><br><span class="line">        num2[<span class="number">0</span>] = res2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(26 - 30)</title>
      <link href="/2020/06/17/%E5%89%91%E6%8C%87offerPart6/"/>
      <url>/2020/06/17/%E5%89%91%E6%8C%87offerPart6/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第二十六至第三十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a><a href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&&tqId=11179&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二叉搜索树与双向链表</a></h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><p>方法一，额外空间。</p><p>使用一个额外的数据结构来保存中序遍历的结果，然后将保存的结果输出为一个链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;TreeNode&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        preOrder(pRootOfTree);</span><br><span class="line">        TreeNode newHead = arr.get(<span class="number">0</span>);</span><br><span class="line">        TreeNode cur = newHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); i++)&#123;</span><br><span class="line">            TreeNode node = arr.get(i);</span><br><span class="line">            cur.right = node;</span><br><span class="line">            node.left = cur;</span><br><span class="line">            cur = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        preOrder(root.left);</span><br><span class="line">        arr.add(root);</span><br><span class="line">        preOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，正向中序遍历。</p><p>使用中序遍历，使用一个变量保存最左节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Convert(pRootOfTree.left);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            root = pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pRootOfTree.left = pre;</span><br><span class="line">            pre.right = pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = pRootOfTree;</span><br><span class="line">        Convert(pRootOfTree.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，反向中序遍历。</p><p>先右再左的中序遍历。用一个变量记录上一个递归的节点，不需要额外使用一个变量保存最左节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Convert(pRootOfTree.right);</span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pRootOfTree.right = pre;</span><br><span class="line">            pre.left = pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = pRootOfTree;</span><br><span class="line">        Convert(pRootOfTree.left);</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a><a href="https://www.nowcoder.com/practice/fe6b651b66ae47d7acce78ffdd9a96c7?tpId=13&&tqId=11180&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">字符串的排列</a></h2><p>输入一个字符串，按字典序打印出该字符串中字符的所有排列。例如输入字符串abc，则打印出由字符a,b,c所能排列出来的所有字符串abc，acb，bac，bca，cab和cba。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个字符串，长度不超过<span class="number">9</span>(可能有字符重复)，字符只包括大小写字母。</span><br></pre></td></tr></table></figure><p>方法一，DFS。</p><p>注意，字符有可能是重复的，所以需要去重操作。</p><p>可以利用一个set集合来去重，然后按序输出到ArrayList中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    TreeSet&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(); <span class="comment">// 去重并排序。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">Permutation</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] c = str.toCharArray();</span><br><span class="line">        dfs(c, <span class="number">0</span>); <span class="comment">// DFS</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出到ArrayList中</span></span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterator it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = (String) it.next();</span><br><span class="line">            res.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[] c, <span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 递归结束条件，抵达最后一位字符</span></span><br><span class="line">        <span class="keyword">if</span>(c.length - <span class="number">1</span> == begin)&#123;</span><br><span class="line">            set.add(<span class="keyword">new</span> String(c)); <span class="comment">// 输出结果到TreeSet中</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环和交换的含义：对于“ABC”，</span></span><br><span class="line">        <span class="comment">// 第一次'A' 与 'A'交换，字符串为"ABC", pos为0， 相当于固定'A'</span></span><br><span class="line">        <span class="comment">// 第二次'A' 与 'B'交换，字符串为"BAC", pos为0， 相当于固定'B'</span></span><br><span class="line">        <span class="comment">// 第三次'A' 与 'C'交换，字符串为"CBA", pos为0， 相当于固定'C'</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt; c.length; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = c[i];</span><br><span class="line">            c[i] = c[begin];</span><br><span class="line">            c[begin] = temp;</span><br><span class="line">                </span><br><span class="line">            dfs(c, begin + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 回溯的原因：比如第二次交换后是"BAC"，需要回溯到"ABC"</span></span><br><span class="line">            <span class="comment">// 然后进行第三次交换，才能得到"CBA"</span></span><br><span class="line">            temp = c[i];</span><br><span class="line">            c[i] = c[begin];</span><br><span class="line">            c[begin] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a><a href="https://www.nowcoder.com/practice/e8a1b01a2df14cb2b228b30ee6a92163?tpId=13&tags=&title=&diffculty=0&judgeStatus=0&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">数组中出现次数超过一半的数字</a></h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p><p>方法一，使用HashMap统计。</p><p>利用HashMap的特性去统计每个数字出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 将数据依次插入到HashMap中</span></span><br><span class="line">            map.put(array[i], map.getOrDefault(array[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 一旦某个数字的个数大于了数组长度的一半，则直接退出</span></span><br><span class="line">            <span class="keyword">if</span>(map.get(array[i]) &gt; array.length / <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 不存在大于数组长度一半的数字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，排序法。</p><p>如果某个数字个数大于数组的一半，则排序后中位数上的数字肯定是目标数字。获取排序后中位数，然后判断这个数的个数是否大于了数组的一半即可得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        <span class="keyword">int</span> cond = array[array.length / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] == cond)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &gt; array.length / <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> cond;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，众数法。</p><p>首先找到众数，然后判断众数的个数是否大于数组的一半。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cond = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 找到众数，如果两数不等，就移除这一对，最后剩下的就是众数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                cond = array[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(cond == array[i])&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到众数的个数</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] == cond)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断众数的长度</span></span><br><span class="line">        <span class="keyword">if</span>(count &gt; array.length / <span class="number">2</span>) <span class="keyword">return</span> cond;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小的K个数"><a href="#最小的K个数" class="headerlink" title="最小的K个数"></a><a href="https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&tqId=11182&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">最小的K个数</a></h2><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p><p>方法一，使用大顶堆找最小的K个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span> [] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(input.length &lt; k || k == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">// 利用优先级队列生成一个大顶堆</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, <span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; input.length)&#123;</span><br><span class="line">            <span class="comment">// 初始化堆内数据</span></span><br><span class="line">            <span class="keyword">if</span>(index &lt; k)&#123;</span><br><span class="line">                queue.offer(input[index]);</span><br><span class="line">            <span class="comment">// 比较堆顶和新数据，新数据小于堆顶元素，就替换堆顶元素</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(queue.peek() &gt; input[index])&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.offer(input[index]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将堆中数据移至ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            res.add(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，使用快速排序的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span> [] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(input.length &lt; k || k == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = input.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = getMid(input, left, right); <span class="comment">// 获得快排分割点</span></span><br><span class="line">        <span class="comment">// 分割点不是K-1位时，需继续查找</span></span><br><span class="line">        <span class="keyword">while</span>(mid != k - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// mid小于K-1，代表目标mid处于mid右侧</span></span><br><span class="line">            <span class="keyword">if</span>(mid &lt; k - <span class="number">1</span>)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// mid大于K-1，代表目标mid处于mid左侧</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新计算</span></span><br><span class="line">            mid = getMid(input, left, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将得到的1结果输入ArrayList</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mid + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            res.add(input[i]);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快排，指针交换法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMid</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = input[left];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; input[right] &gt; temp) right--;</span><br><span class="line">            input[left] = input[right];</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; input[left] &lt;= temp) left++;</span><br><span class="line">            input[right] = input[left];</span><br><span class="line">        &#125;</span><br><span class="line">        input[left] = temp;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a><a href="https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">连续子数组的最大和</a></h2><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p><p>方法一，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line"><span class="comment">// 状态一，当前位与之前的dp结果相加</span></span><br><span class="line"><span class="comment">// 状态二，当前位不与之前dp的结果相加</span></span><br><span class="line">            dp = Math.max(dp + array[i], array[i]); <span class="comment">// 两种状态，取最大的一种状态为当前位的dp状态</span></span><br><span class="line">            max = Math.max(max, dp); <span class="comment">// 与历史最大值相比</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拼多多客户端暑期实习二面</title>
      <link href="/2020/06/16/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/"/>
      <url>/2020/06/16/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%BA%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下面试过程，积累一下经验。</p><a id="more"></a><p>全程30分钟左右，因个人原因推迟了这次面试6天，感觉面试官没有特别上心，可能没有hc了？</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>反转一个int整型，溢出返回0。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>介绍一下个人情况和项目情况吧。</p><p>项目中的难点？</p><p>遇到难点如何去学习和解决？</p><p>Java面向对象的特性有哪些？</p><p>Java容器介绍一下，说些比较熟悉的就可以了。</p><p>计算机网络中比较熟悉的协议说一下。</p><p>TCP的三次握手？</p><p>TCP三次握手如果客户端的最后一次握手的ACK报文没有传到服务端，会发生什么？</p><p>TCP三次握手最后一次是可以携带数据的，如果ACK报文没有到达服务端，而数据到达了服务端，会发生什么？</p><h2 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h2><p>您那边负责的业务是什么呢？<br>安卓音视频开发。</p><p>您对我后面的学习有什么建议吗？<br>深度上继续下功夫（但是也没有问我深度的知识…）。对于一些底层相关的可以多看看，针对某个方面深入学习。</p><p>拼多多实习生或应届生进入公司如何培训？如何快速适应业务？<br>专门的导师帮助，各部门情况不同。</p>]]></content>
      
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(21 - 25)</title>
      <link href="/2020/06/16/%E5%89%91%E6%8C%87offerPart5/"/>
      <url>/2020/06/16/%E5%89%91%E6%8C%87offerPart5/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第二十一至第二十五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="栈的压入，弹出序列"><a href="#栈的压入，弹出序列" class="headerlink" title="栈的压入，弹出序列"></a><a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&&tqId=11174&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">栈的压入，弹出序列</a></h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><p>方法一，模拟栈的入栈和出栈。</p><p>简单的将栈的入栈和出栈进行模拟即可，最后栈内如果没有剩余元素，就可以证明出栈数组是入栈数组的弹出序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 特殊情况判断</span></span><br><span class="line">        <span class="keyword">if</span>(pushA.length == <span class="number">0</span>||popA.length == <span class="number">0</span>||popA.length != pushA.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Stack&lt;Integer&gt; aa = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 模拟栈</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>; <span class="comment">// 出栈数组索引</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;pushA.length; i++)&#123;</span><br><span class="line">            aa.push(pushA[i]); <span class="comment">// 入栈</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 如果栈顶与出栈数组index位相同，则出栈。</span></span><br><span class="line">            <span class="keyword">while</span>(!aa.isEmpty() &amp;&amp; aa.peek() == popA[index])&#123;</span><br><span class="line">                aa.pop();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> aa.isEmpty(); <span class="comment">// 如果模拟栈是空的，则返回true，不是空的，则返回false。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&tqId=11175&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">从上往下打印二叉树</a></h2><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><p>方法一，层序遍历。</p><p>使用层序遍历就可以按照要求获得所有的节点。</p><p>层序遍历也就是广度遍历，通过使用队列 Queue 的数据结构就可以轻松的得到层序遍历结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res; <span class="comment">// 特殊情况</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// 辅助队列</span></span><br><span class="line">        queue.offer(root); <span class="comment">// 插入根节点</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line"><span class="comment">// 从队首取出一个节点，可以实现从左到右的打印的目标</span></span><br><span class="line">            TreeNode temp = queue.poll();</span><br><span class="line">            res.add(temp.val); <span class="comment">// 加入结果List</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前节点的左右子节点插入队列尾部，达到从上向下打印的目标</span></span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a><a href="https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&tqId=11176&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">二叉搜索树的后序遍历序列</a></h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p><p>方法一，后序遍历。</p><p>套用后序遍历的规则，反向解析数组。</p><p>数组最后一位一定是根节点，那么找到第一个大于根节点值的位置，可以确定左右子树。左右子树确定后，检查右子树中是否都大于根节点，如果不是就返回false。如果都是大于根节点的，那么对左右子树分别进行判断，直到叶节点为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="keyword">int</span> [] sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = sequence.length;</span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ver(sequence, <span class="number">0</span>, length - <span class="number">1</span>); <span class="comment">// 判断当前数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">ver</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 递归结束条件，左右边界相等代表只有一个元素，抵达叶子节点</span></span><br><span class="line">        <span class="keyword">int</span> root = arr[right]; <span class="comment">// 后序遍历，根节点位于最右侧</span></span><br><span class="line"><span class="comment">// 从左向右遍历，找到第一个大于根节点的元素位置，即可确认左右子树的范围</span></span><br><span class="line">        <span class="keyword">int</span> index = left;</span><br><span class="line">        <span class="keyword">while</span>(arr[index] &lt; root &amp;&amp; index &lt; right)&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 遍历右子树范围，查看是否都大于根节点。</span></span><br><span class="line">        <span class="keyword">int</span> j = index;</span><br><span class="line">        <span class="keyword">while</span>(arr[j] &gt; root &amp;&amp; j &lt; right)&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// (j == right) 代表右子树所有元素都大于根节点，则可以对左右子树分别进行后序遍历的判断。</span></span><br><span class="line"><span class="comment">// (j != right) 代表右子树不是所有元素都大于根节点，则可以直接返回false。</span></span><br><span class="line">        <span class="keyword">return</span> (j == right) &amp;&amp; ver(arr, left, index - <span class="number">1</span>) &amp;&amp; ver(arr, index, right-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a><a href="https://www.nowcoder.com/practice/b736e784e3e34731af99065031301bca?tpId=13&tqId=11177&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">二叉树中和为某一值的路径</a></h2><p>输入一颗二叉树的根节点和一个整数，按字典序打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p><p>方法一，深度遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root,<span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res; <span class="comment">// 递归结束条件，找到叶子节点了就返回到上一层</span></span><br><span class="line"></span><br><span class="line">        list.add(root.val); <span class="comment">// 添加到集合中</span></span><br><span class="line">        target = target - root.val; <span class="comment">// 计算剩余目标</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 计算结果相等且为叶子节点，则添加到结果集合中</span></span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        FindPath(root.left, target); <span class="comment">// 去左子树找</span></span><br><span class="line">        FindPath(root.right, target); <span class="comment">// 去右子树找</span></span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>); <span class="comment">// 回溯，移除当前添加的节点</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a><a href="https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&tqId=11178&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2" target="_blank" rel="noopener">复杂链表的复制</a></h2><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针random指向一个随机节点），请对此链表进行深拷贝，并返回拷贝后的头结点。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><p>方法一，利用HashMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">Clone</span><span class="params">(RandomListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HashMap&lt;RandomListNode, RandomListNode&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        RandomListNode cur = pHead;</span><br><span class="line">        RandomListNode newHead = <span class="keyword">new</span> RandomListNode(-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            RandomListNode cloneNode = <span class="keyword">new</span> RandomListNode(cur.label);</span><br><span class="line">            map.put(cur, cloneNode);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            newHead.next = cloneNode;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(pHead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，原地复制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">Clone</span><span class="params">(RandomListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RandomListNode cur = pHead;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            RandomListNode cloneNode = <span class="keyword">new</span> RandomListNode(cur.label);</span><br><span class="line">            RandomListNode temp = cur.next;</span><br><span class="line">            cur.next = cloneNode;</span><br><span class="line">            cloneNode.next = temp;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        cur = pHead;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.random != <span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cur = pHead;</span><br><span class="line">        RandomListNode newHead = pHead.next;</span><br><span class="line">        RandomListNode cur2 = newHead;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            <span class="keyword">if</span>(cur2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                cur2.next = cur2.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拼多多客户端暑期实习一面</title>
      <link href="/2020/06/09/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
      <url>/2020/06/09/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下面试过程，积累一下经验。</p><a id="more"></a><p>全程57分钟</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>给一个链表，将链表排序后输出。不允许使用内置函数或者高级结构。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>介绍一下个人经历。</p><p>介绍一下项目经历。</p><p>安卓中如何添加一些依赖呢？（Gradle）</p><p>安卓的生命周期方法？</p><p>View的工作原理？流程是怎样的？调用了哪些方法？</p><p>安卓中如何添加/加载jar包？</p><p>安卓中如何将二进制流解析为图片并显示出来？</p><p>Handler消息机制介绍一下？</p><p>在一个普通线程中想要使用Looper需要做什么操作？</p><p>Looper在其他什么地方用过吗？举例说明。</p><p>事件分发机制介绍一下？</p><p>AsyncTask的原理（项目用）</p><p>进程间如何发送数据？</p><h2 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h2><p>您那边负责的业务是什么呢？<br>安卓底层SDK开发。</p><p>您对我后面的学习有什么建议吗？<br>多了解安卓底层的知识，去官网上看看源码，了解底层的架构。</p>]]></content>
      
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题自测</title>
      <link href="/2020/06/08/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/"/>
      <url>/2020/06/08/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E8%87%AA%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>Java常见面试题整理，对答案进行了隐藏处理，可用于自测。</p><p>本处面试题来自于JavaGuide，在文末参考处添加了链接，可前往其GitHub项目主页查看更多信息。</p><a id="more"></a><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><ol><li><h3 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别?"></a><font color=red>面向对象和面向过程的区别?</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>面向过程就是将一个任务分解为多个步骤, 然后依次实现这些步骤以完成任务.<br>面向对象就是将任务划分为多个对象, 实现对象后可以通过组合小的对象来实现任务中的功能. 更有利于复用和维护应用.</p><p>标答<br>面向过程性能相对更高(类的调用需要实例化, 开销大, 耗资源)<br>不易维护, 复用, 扩展.<br>面向对象则易维护, 易复用, 易扩展.<br>有封装, 继承, 多态的特性, 低耦合, 更加灵活, 故易维护.<br>但是效率相对会较低.</p><p>可结合着回答.</p></blockquote></details><ol start="2"><li><h3 id="那么可以说面向过程语言的性能高于面向对象语言吗"><a href="#那么可以说面向过程语言的性能高于面向对象语言吗" class="headerlink" title="那么可以说面向过程语言的性能高于面向对象语言吗?"></a>那么可以说面向过程语言的性能高于面向对象语言吗?</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>与面向对象或面向过程语言类型并无关系，而是因为面向过程语言通常会直接编译为机器码, 而面向对象的Java语言是半编译语言，最终执行代码并不能直接被CPU执行。</p></blockquote></details><ol start="3"><li><h3 id="Java-语言的特点"><a href="#Java-语言的特点" class="headerlink" title="Java 语言的特点"></a><font color=red>Java 语言的特点</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>一次编译，到处运行。<br>是一种面向对象的语言，<br>拥有封装，继承和多态的特性。<br>简单易学，安全可靠，支持多线程，网络编程，并且解释和编译并存。</p></blockquote></details><ol start="4"><li><h3 id="JVM-JDK-JRE最详细通俗的解答"><a href="#JVM-JDK-JRE最详细通俗的解答" class="headerlink" title="JVM, JDK, JRE最详细通俗的解答?"></a><font color=red>JVM, JDK, JRE最详细通俗的解答?</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>JVM是指 Java 虚拟机，Java程序通过编译器编译为字节码（.class）文件，JVM可以运行这些字节码在不同的硬件环境下执行出相同的结果，也是“一次编译，到处运行”的基础。<br>JDK是指 Java Development Kit，即Java开发配套工具。其中包含了JRE的所有内容，增加了编译器和一些工具，可以创建和编译程序。<br>JRE是指 Java Runtime Environment，即Java运行时环境。包含了运行一个Java程序所需的一切，如果仅使用Java程序而不做开发，那么使用JRE就足够了。</p></blockquote></details><ol start="5"><li><h3 id="什么是字节码？源代码到运行的过程是怎样的？"><a href="#什么是字节码？源代码到运行的过程是怎样的？" class="headerlink" title="什么是字节码？源代码到运行的过程是怎样的？"></a>什么是字节码？源代码到运行的过程是怎样的？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>字节码就是.class文件，不面向任何处理器，只面向虚拟机。通过字节码的这种方式，Java不但使效率得到了提升还保留了解释型语言可以移植的特性。</p><p>首先源代码通过javac编译成字节码（.class)，输入虚拟机后，虚拟机会加载字节码文件，通过解释器逐行解释执行，但是这个方法效率低下，所以引入了JIT编译器，JIT编译器可以将热点代码进行编译，保存编译后的机器码，在下一次调用热点代码时可以直接使用已编译的机器码，所以执行次数越多效率就越高。<br>而在JDK 9时引入了AOT编译器，它会将字节码直接编译为机器码，避免JIT预热到热点代码的开销，但是会占用更大的空间，而且编译质量比不上JIT编译器。</p></blockquote></details><ol start="5"><li><h3 id="OpenJDK-和-OracleJDK-的区别？"><a href="#OpenJDK-和-OracleJDK-的区别？" class="headerlink" title="OpenJDK 和 OracleJDK 的区别？"></a>OpenJDK 和 OracleJDK 的区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>OpenJDK是完全开源的，而OracleJDK是OpenJDK的一个实现，并没有完全开源。<br>OpenJDK的性能和稳定性没有OracleJDK好。<br>OracleJDK对于已发布的版本不会提供长期的更新，需要手动的更新到最新版本来获得支持。</p></blockquote></details><ol start="6"><li><h3 id="Java-和-C-的区别？"><a href="#Java-和-C-的区别？" class="headerlink" title="Java 和 C++ 的区别？"></a>Java 和 C++ 的区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>都是面向对象的语言，即拥有封装，继承，多态的特性。<br>Java没有指针直接访问内存，所以更加安全。<br>Java有自动的垃圾回收机制，不需要手动管理内存。<br>Java中继承属于单继承，而C++可以多继承，但是Java中可以有多实现。<br>C++字符串和字符串数组的结尾会存在一个/o的结束符，而Java则没有这个结束符的概念。</p></blockquote></details><ol start="7"><li><h3 id="为什么Java没有结束符的概念？"><a href="#为什么Java没有结束符的概念？" class="headerlink" title="为什么Java没有结束符的概念？"></a>为什么Java没有结束符的概念？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java中一切都是对象，所以字符串和字符串数组都拥有一些方法或者属性可以确定其长度，就不需要再有一个结束符来浪费空间。</p></blockquote></details><ol start="8"><li><h3 id="什么是Java的主类？应用程序和小程序的主类有什么不同？"><a href="#什么是Java的主类？应用程序和小程序的主类有什么不同？" class="headerlink" title="什么是Java的主类？应用程序和小程序的主类有什么不同？"></a>什么是Java的主类？应用程序和小程序的主类有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>一个应用程序只能拥有一个主类，主类是Java程序的入口。<br>应用程序的主类是一个包含main()方法的类，而小程序的主类是继承自JApplet或者Applet的子类。<br>应用程序的主类可以不是public的，而小程序的主类必须是public。</p></blockquote></details><ol start="9"><li><h3 id="Java应用程序和小程序之间的差别是什么？"><a href="#Java应用程序和小程序之间的差别是什么？" class="headerlink" title="Java应用程序和小程序之间的差别是什么？"></a>Java应用程序和小程序之间的差别是什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>应用程序从主线程启动（main()方法启动）。<br>小程序是嵌入到浏览器中运行的（init()或run()方法）。</p></blockquote></details><ol start="10"><li><h3 id="字符型常量Character和字符串常量String的区别是什么？"><a href="#字符型常量Character和字符串常量String的区别是什么？" class="headerlink" title="字符型常量Character和字符串常量String的区别是什么？"></a><font color=red>字符型常量Character和字符串常量String的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>从形式上看，字符型常量是单引号包裹的，而字符串常量是双引号包裹的。<br>从含义上看，字符型常量是整型值（ASCII码），而字符串常量是地址值（字符串在内存中的地址）。<br>从大小上看，字符型常量是占用两个字节的内存，而字符串常量是占用不定长度的内存。</p></blockquote></details><ol start="11"><li><h3 id="Java中各个基本类型的大小和包装类？"><a href="#Java中各个基本类型的大小和包装类？" class="headerlink" title="Java中各个基本类型的大小和包装类？"></a><font color=red>Java中各个基本类型的大小和包装类？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java的基本类型共有8种。</p><table><thead><tr><th>基本数据类型</th><th>包装型</th><th>大小</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>-128 ~ 127</td></tr><tr><td>char</td><td>Character</td><td>unicode 0 ~ unicode $2^{16}-1$</td></tr><tr><td>short</td><td>Short</td><td>-$2^{15}$ ~ $2^{15}-1$</td></tr><tr><td>int</td><td>Integer</td><td>-$2^{31}$ ~ $2^{31}-1$</td></tr><tr><td>long</td><td>Long</td><td>-$2^{63}$ ~ $2^{63}-1$</td></tr><tr><td>float</td><td>Float</td><td>IEEE 754 ~ IEEE 754</td></tr><tr><td>double</td><td>Double</td><td>IEEE 754 ~ IEEE 754</td></tr><tr><td>boolean</td><td>Boolean</td><td>True / False</td></tr></tbody></table></blockquote></details><ol start="12"><li><h3 id="构造函数是否可以被重写override？"><a href="#构造函数是否可以被重写override？" class="headerlink" title="构造函数是否可以被重写override？"></a>构造函数是否可以被重写override？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>构造函数无法被重写，但是可以被重载，也就是一个类中可以有多个构造函数。</p></blockquote></details><ol start="13"><li><h3 id="重载和重写的区别是什么？"><a href="#重载和重写的区别是什么？" class="headerlink" title="重载和重写的区别是什么？"></a><font color=red>重载和重写的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>重写就是指子类可以对继承来的类进行修改或者增加新的逻辑，方法名和参数名称必须相同，返回值的范围应该小于等于父类的返回值范围，抛出的异常也应该小于等于父类，访问修饰符应该大于等于父类。（如果父类是private的，就无法重写）<br>重载就是指一个方法可以由多个同名的方法，参数，返回值和访问修饰符可以不同，编译器会匹配使用哪一个方法，如果无法匹配到方法就会产生编译时错误。</p></blockquote></details><ol start="14"><li><h3 id="Java面向对象编程的三大特性是什么？"><a href="#Java面向对象编程的三大特性是什么？" class="headerlink" title="Java面向对象编程的三大特性是什么？"></a><font color=red>Java面向对象编程的三大特性是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>封装性，对内部的代码进行封装以保证内部逻辑不会暴露在外。<br>继承性，继承是一种类与类之间的关系，如果一个类继承了另一个类，那么可以直接继承使用父类的方法而不需要重新实现，提升了开发效率。<br>多态性，多态是指一个类中实现的方法，在另一个类中可以表现出不同的行为。多态的两个代表，重写和重载。</p></blockquote></details><ol start="15"><li><h3 id="String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？"><a href="#String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？" class="headerlink" title="String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？"></a><font color=red>String，StringBuffer，StringBuilder的区别是什么？String为什么是不可变的？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>String即字符串常量，确定值后就无法更改，想要修改就需要新建一个String常量，然后将指针指向新的常量。适合对字符串进行少量操作的场景。<br>StringBuilder，可以修改字符串的值，线程不安全，所以适合在单线程下对字符串有大量操作的情况。<br>StringBuffer，可以修改字符串的值，线程安全，所以适合在多线程下对字符串有大量操作的情况。</p><p>StringBuilder的速度优于StringBuffer大约10%~15%，但是线程不安全。</p></blockquote></details><ol start="16"><li><h3 id="String不可变的原因？"><a href="#String不可变的原因？" class="headerlink" title="String不可变的原因？"></a>String不可变的原因？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>String类中使用一个被final修饰的字符数组保存字符串（Java 9 之后改用byte[]而不是char[]），而StringBuilder和StringBuffer都没有使用final修饰，所以是可变的。</p></blockquote></details><ol start="17"><li><h3 id="什么是自动装箱和拆箱？"><a href="#什么是自动装箱和拆箱？" class="headerlink" title="什么是自动装箱和拆箱？"></a><font color=red>什么是自动装箱和拆箱？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>自动装箱就是指基本类型自动转换为其对应的包装类型，如int 自动装箱为 Integer 等同于自动调用了 Integer对象 = Integer.valueOf(int对象);<br>自动拆箱就是指包装类型自动转换为其对应的基本类型，如Integer 自动拆箱为 int 等同于自动调用了 int对象 = Integer对象.intValue();</p><p>如果是Byte，Character，Short，Integer，Long这五种包装类型，当包装类型的值处于-128 ~ 127这个范围内时，会指向缓存中已存在的对象的引用（地址对比结果是相等的），如果不在这个范围内就会新创建一个包装类型对象（地址对比，结果不等）。<br>对于Float，Double这两种包装类型，由于一个范围内的浮点数量是无限的，所以无法创建一个缓存。所以从地址上进行对比，两个浮点数永远不可能相等。</p><p>在进行包装类型比较时，==运算符的两个操作数都是包装类型的引用，就是比较这两个操作数是否指向同一个对象，而如果有一个操作数是表达式（包括算术运算），就会触发自动拆箱，变为比较数值。<br>而进行包装类型比较时，equals()方法不会进行类型的转换的工作。（不会触发自动装箱拆箱）</p></blockquote></details><ol start="18"><li><h3 id="什么是静态变量，使用静态变量修饰意味着什么？"><a href="#什么是静态变量，使用静态变量修饰意味着什么？" class="headerlink" title="什么是静态变量，使用静态变量修饰意味着什么？"></a><font color=red>什么是静态变量，使用静态变量修饰意味着什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>静态变量就是被static修饰的变量，不再属于某个对象，而是属于整个类。属于类就代表这个变量被所有对象共享。静态成员在类加载时就会被分配内存，可以使用类名直接访问（推荐），也可以实例化类对象后调用（不推荐，无意义）。<br>非静态成员属于类的对象，只有类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。</p></blockquote></details><ol start="19"><li><h3 id="在一个静态方法中调用一个非静态方法为什么是非法的？"><a href="#在一个静态方法中调用一个非静态方法为什么是非法的？" class="headerlink" title="在一个静态方法中调用一个非静态方法为什么是非法的？"></a><font color=red>在一个静态方法中调用一个非静态方法为什么是非法的？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>因为静态方法属于类，在类创建时就会生成，而非静态方法此时还未生成，让一个已生成的方法调用还未生成的方法自然就会报错。</p></blockquote></details><ol start="20"><li><h3 id="在Java中定义一个不做事也无参数的构造方法的作用？"><a href="#在Java中定义一个不做事也无参数的构造方法的作用？" class="headerlink" title="在Java中定义一个不做事也无参数的构造方法的作用？"></a>在Java中定义一个不做事也无参数的构造方法的作用？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java程序执行子类构造方法前，如果没有用使用super()调用父类特定的构造方法，就会调用父类中的无参构造方法。<br>如果子类的构造方法没有指定父类中的构造方法，就会默认调用这个空的构造方法来初始化父类。如果父类没有这个无参构造方法，那么子类没有使用父类构造方法时会出现编译时错误。因为Java程序无法找到无参构造方法执行，解决方法就是在父类中增加一个无参构造方法。<br>可理解为，无参构造方法就是一个默认的构造方法，如果不使用默认的，或者有特定需求，那么子类就应该去指定一个父类构造方法。</p></blockquote></details><ol start="21"><li><h3 id="import-java和javax有什么区别？"><a href="#import-java和javax有什么区别？" class="headerlink" title="import java和javax有什么区别？"></a>import java和javax有什么区别？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>最初，JavaAPI必须的包是java开头的包，而javax是扩展的包。但是逐渐javax扩展为JavaAPI的组成部分，最终成为了标准API的一部分。<br>所以，java和javax并没有什么区别。</p></blockquote></details><ol start="22"><li><h3 id="抽象和接口的区别是什么？"><a href="#抽象和接口的区别是什么？" class="headerlink" title="抽象和接口的区别是什么？"></a><font color=red>抽象和接口的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>抽象类内部的成员变量和方法可以不是抽象的，而接口中的成员变量是static final的，方法必须是抽象的。（也可以是默认方法，默认方法可以有方法体）<br>接口默认的访问修饰符是public，抽象可以是public，protected，default的，但是不能是private的，因为这个访问修饰符会是子类无法重写父类方法。<br>抽象类是单继承的，而接口是多实现的。<br>抽象类是对根源的抽象，描述一个事物是什么。而接口是对行为的抽象，描述一个事物可以干什么。例如人要吃饭喝水，那么人就是一种抽象，吃饭喝水的行为可以是一种接口。</p></blockquote></details><ol start="23"><li><h3 id="成员变量和局部变量的区别是什么？"><a href="#成员变量和局部变量的区别是什么？" class="headerlink" title="成员变量和局部变量的区别是什么？"></a><font color=red>成员变量和局部变量的区别是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>成员变量属于类，而局部变量属于方法。<br>成员变量可以被public，private，static修饰，而局部变量不可被这些修饰。<br>成员变量和局部变量都可以被final修饰。<br>如果成员变量被static修饰，就属于类。如果没有被static修饰就属于实例（类对象），对象存储于堆内存中。而局部变量存储于栈内存中。<br>成员变量属于类对象的一部分，随着类对象的创建而存在，局部变量随着方法的调用而存在和消失。<br>成员变量如果没有被赋予初值，就会自动以类型的默认值赋值（除了final修饰的变量外），而局部变量不会自动赋值。</p></blockquote></details><ol start="24"><li><h3 id="创建一个对象使用什么关键字？对象实例和对象引用有什么不同？"><a href="#创建一个对象使用什么关键字？对象实例和对象引用有什么不同？" class="headerlink" title="创建一个对象使用什么关键字？对象实例和对象引用有什么不同？"></a>创建一个对象使用什么关键字？对象实例和对象引用有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>创建一个对象使用new关键字，可以用于创建对象实例。<br>对象的实例处于堆内存，而对象的引用指向对象的实例，被存处于栈内存上。<br>一个对象引用可以指向0个或者1个对象实例，而一个对象实例可以被多个对象引用指向。</p></blockquote></details><ol start="25"><li><h3 id="什么是方法的返回值？返回值在类的方法里的作用是什么？"><a href="#什么是方法的返回值？返回值在类的方法里的作用是什么？" class="headerlink" title="什么是方法的返回值？返回值在类的方法里的作用是什么？"></a>什么是方法的返回值？返回值在类的方法里的作用是什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>方法的返回值就是一个方法执行完成后的结果。返回值会被输出到调用这个方法的方法中被赋予给一个变量，进行进一步的运算。</p><p>标答: 获取到的某个方法体中的代码执行后产生的结果(如果该方法可以产生结果). 作用是可以输出结果, 使其可以用于其他操作.</p></blockquote></details><ol start="26"><li><h3 id="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？"><a href="#一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？" class="headerlink" title="一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？"></a>一个类的构造方法的作用是什么？如果一个类没有声明构造方法，这个程序可以正确执行吗？为什么？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>构造方法的作用就是初始化一些变量，如果没有构造方法是可以执行的，比如像是无参构造方法类似于没有构造方法。</p></blockquote></details><ol start="27"><li><h3 id="构造方法中有哪些特性？"><a href="#构造方法中有哪些特性？" class="headerlink" title="构造方法中有哪些特性？"></a>构造方法中有哪些特性？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>构造方法的名字与类名相同。<br>无返回值也不能声明返回值。<br>在类实例化时自动调用。</p></blockquote></details><ol start="28"><li><h3 id="静态方法和实例方法有什么不同？"><a href="#静态方法和实例方法有什么不同？" class="headerlink" title="静态方法和实例方法有什么不同？"></a>静态方法和实例方法有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>静态方法被static修饰，属于整个类，而不属于某个对象，可以直接通过类名进行调用，而不需要等待类被初始化后调用。静态方法可以调用静态成员变量和方法，但是不能调用非静态的成员变量和方法。<br>实例方法需要等待类被实例化后才可以被调用，需要通过实例化后的对象名去调用它。实例对象可以调用类中所有成员变量和方法。</p></blockquote></details><ol start="29"><li><h3 id="对象的相等与执行他们的引用相等有什么不同？"><a href="#对象的相等与执行他们的引用相等有什么不同？" class="headerlink" title="对象的相等与执行他们的引用相等有什么不同？"></a>对象的相等与执行他们的引用相等有什么不同？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>对象的相等是指对象的类型和内容相等，而引用的相等是指内存地址相等。</p></blockquote></details><ol start="30"><li><h3 id="在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？"><a href="#在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？" class="headerlink" title="在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？"></a>在调用子类的构造方法前会先调用父类没有参数的构造方法，其目的是？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>利用父类的构造方法来协助子类进行初始化工作。</p></blockquote></details><ol start="31"><li><h3 id="与equals的区别？"><a href="#与equals的区别？" class="headerlink" title="==与equals的区别？"></a><font color=red>==与equals的区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>==用于对比两个对象的引用是否相等。基本数据类型比较的是值是否相等，而引用类型比较的是内存地址是否相等。<br>equals()默认（Object中）也是用于对比两个对象的引用是否相等，但是一些类中重写了equals()使其变为比较两个对象的内容，比如String类。</p><p>延申，创建String对象时，虚拟机会先去常量池中查找是否有已存在的值与将要创建的String的内容相等的对象，如果存在就直接将其赋给新的String对象，不存在则在常量池中创建一个String对象。</p></blockquote></details><ol start="32"><li><h3 id="hashCode与equals的作用？"><a href="#hashCode与equals的作用？" class="headerlink" title="hashCode与equals的作用？"></a><font color=red>hashCode与equals的作用？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>hashCode()的作用是计算对象的散列值，并根据这个散列值得到索引。而equals()用于在HashMap中找到一个桶内的某个具体值。<br>hashCode()是Object中的一个方法，这意味着任何类都拥有这个方法，但是这个方法大部分情况下并不会起作用，正常使用时，equals()和hashCode()之间没有任何关系。<br>但是在使用哈希表结构的对象时，这两个方法才会互相产生作用。并且有几个特性：</p><ol><li>equals()相等时，hashCode()肯定相等。</li><li>equals()不等时，hashCode()可能相等，也可能不等。</li><li>hashCode()相等时，equals()不一定相等。此时就会发生哈希冲突。<br>所以一个哈希表中，如果equals()被重写了，那么hashCode()也需要被重写。如果没有重写，那么hashCode()会使用引用地址产生哈希码，因为hashCode()的目的就是产生独一无二的哈希值，这会导致两个对象比较的结果不等，即使他们本来是相等的。</li></ol></blockquote></details><ol start="33"><li><h3 id="为什么Java中只有值传递？"><a href="#为什么Java中只有值传递？" class="headerlink" title="为什么Java中只有值传递？"></a><font color=red>为什么Java中只有值传递？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>首先理解什么是值传递，什么是引用传递。<br>值传递就是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。<br>引用传递是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改将会影响到实际参数。</p><p>而Java中不管是值对象还是引用对象都是值传递·，在其他方法里面改变引用类型的值肯定是通过引用改变的·，当传递引用对象的时候传递的是复制过的对象句柄(引用)，注意这个引用是复制过的，也就是说又在内存中复制了一份句柄，这时候有两个句柄是指向同一个对象的，所以你改变这个句柄对应空间的数据会影响外部的变量的，虽然是复制的但是引用指向的是同一个地址，当你把这个句柄指向其他对象的引用时并不会改变原对象，因为你拿到的句柄是复制过的引用。总结Java中的句柄(引用)是复制过的，所以说Java只有值传递。</p></blockquote></details><ol start="34"><li><h3 id="简述线程，程序，进程的基本概念。它们之间的关系是什么？"><a href="#简述线程，程序，进程的基本概念。它们之间的关系是什么？" class="headerlink" title="简述线程，程序，进程的基本概念。它们之间的关系是什么？"></a><font color=red>简述线程，程序，进程的基本概念。它们之间的关系是什么？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>线程，可以被视为轻量级进程，是一个比进程更小的执行单位，一个进程可以拥有多个线程，线程拥有线程私有的程序计数器，虚拟机栈，本地方法栈，同一进程下的线程共享Java堆和方法区资源。这就让线程切换的开销小于进程。所以可以使用线程来提高并发效率并且降低并发执行过程中的开销。</p><p>程序，有指令和数据的代码，被存在磁盘或者其他数据存储设备上，即程序就是静态的代码。</p><p>进程，程序执行一次的过程，是系统执行程序的基本单位，系统执行一个程序就是进程从创建，执行到销毁的过程。简单来说，一个进程就是一个运行中的程序，进程占有一些系统资源并且相互间独立。引入进程可以让多个程序并发执行，提高系统的资源利用率和吞吐量。</p></blockquote></details><ol start="34"><li><h3 id="线程有哪些基本状态？"><a href="#线程有哪些基本状态？" class="headerlink" title="线程有哪些基本状态？"></a><font color=red>线程有哪些基本状态？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>初始 new，线程被构建，但是还未调用start()方法。<br>运行 runnable，分为就绪ready和运行中running两个状态。<br>阻塞 blocked，线程被锁阻塞。<br>等待 waiting，线程调用了wait()进入等待状态，等待其他线程的通知或者中断。<br>超时等待 time waiting，线程调用了wait(long millis)或者sleep(long millis)，等待状态加上一个时间限制，超时自动返回。<br>终止 terminated，线程执行完毕。</p><p>流程，线程被创建后处于初始 new 状态，调用start()方法后开始执行，此时处于runnable状态的ready状态。获得时间片后进入runnable的running状态。如果线程调用同步方法，想要获取锁又无法获取时，会进入阻塞 blocked状态，获取锁后返回运行状态。如果线程执行了wait()方法，线程进入等待waiting状态，等待其他线程的通知才可以返回到运行状态。如果线程执行了wait(long millis)或者sleep(long millis)，则进入有时间限制的等待状态time waiting，获得通知或者超过时间就会返回运行状态。线程执行完运行状态的run()方法后会进入终止 terminated状态。</p></blockquote></details><ol start="35"><li><h3 id="关于final关键字的一些总结？"><a href="#关于final关键字的一些总结？" class="headerlink" title="关于final关键字的一些总结？"></a><font color=red>关于final关键字的一些总结？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>final关键字修饰变量时，变量不可被更改。基本数据类型的变量赋值后无法更改值，引用类型的变量初始化后不可用指向另一个对象。</p><p>final关键字修饰方法时，方法不可以被重写。</p><p>final关键字修饰类时，类不可以被继承。</p></blockquote></details><ol start="36"><li><h3 id="Java中的异常处理？"><a href="#Java中的异常处理？" class="headerlink" title="Java中的异常处理？"></a><font color=red>Java中的异常处理？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java中所有异常的父类是Throwable，其下分为Error和Exception两个部分。</p><p>Error，指程序自身无法解决的错误，一般是资源不足或者虚拟机出现错误等原因导致的。比如OutOfMemoryError与虚拟机错误。这种错误是不可查的，超出了程序控制和处理能力，并且大多数都是程序运行时不允许出现的状况。</p><p>Exception，是程序本身可以解决的异常，可以分为Runtime Exception和其他Exception。</p><p>Runtime Exception是指运行时异常，是运行时才会被检测出的异常，事前不会主动检查它，所以即使有问题也可以通过编译。有一些运算异常就属于运行时异常。通常可以通过try catch或者throws进行捕获，可以通过修改使其恢复正常。</p><p>其他Exception是指除运行时异常外的异常，这种异常又被称为被检查异常，在编译阶段会被主动检查，如果出现问题无法通过编译。</p></blockquote></details><ol start="37"><li><h3 id="Throwable类的常用方法？"><a href="#Throwable类的常用方法？" class="headerlink" title="Throwable类的常用方法？"></a>Throwable类的常用方法？</h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>getMessage() 返回异常发生时的简要描述。</p><p>toString() 返回异常发生时的详细信息。</p><p>getLocalizedMessage() 返回异常对象的本地化信息，使用Throwable子类覆盖这个方法，可以生成本地化信息。如果子类未覆盖这个方法，那么这个方法返回的信息和getMessage()返回的相同。</p><p>printStackTrace() 在控制台打印Throwable对象封装的异常信息。</p></blockquote></details><ol start="38"><li><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a><font color=red>异常处理总结</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>使用try catch来捕获和处理异常，try后面可以接多个catch，如果没有catch，则一定存在一个finally。</p><p>finally，不论是否捕获或者处理异常，finally都会被执行。如果 try / catch中存在return，那么 finally 会在执行 return 后，返回结果前执行。如果 try / catch和 finally 中都存在 return，则 try / catch返回值前会先执行 finally，finally的return返回值会覆盖掉try / catch的返回值。</p><p>有四种情况 finally 不会被执行，</p><ol><li>finally的第一行执行出现了问题，如果出现在其他行，则 finally 依然可以被执行。</li><li>使用了 System.exit(0) 来退出程序。</li><li>程序所在的线程死亡了。</li><li>关闭了CPU。</li></ol></blockquote></details><ol start="39"><li><h3 id="Java序列化中如果有字段不想要序列化怎么办？"><a href="#Java序列化中如果有字段不想要序列化怎么办？" class="headerlink" title="Java序列化中如果有字段不想要序列化怎么办？"></a><font color=red>Java序列化中如果有字段不想要序列化怎么办？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>Java序列化一般使用Serializable进行序列化，如果遇到不想序列化的字段，则可以使用Transient来阻止对这个字段的序列化。<br>Transient与Serializable配套使用，只能用于修饰变量，而不能修饰方法和类。</p></blockquote></details><ol start="40"><li><h3 id="获取键盘输入的两种方法？"><a href="#获取键盘输入的两种方法？" class="headerlink" title="获取键盘输入的两种方法？"></a><font color=red>获取键盘输入的两种方法？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>通过 Scanner 获取键盘输入。<br>通过 BufferReader 获取键盘输入。</p></blockquote></details><ol start="41"><li><h3 id="Java中IO流可被分为几种？"><a href="#Java中IO流可被分为几种？" class="headerlink" title="Java中IO流可被分为几种？"></a><font color=red>Java中IO流可被分为几种？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>按流向分，可以分为输入流和输出流。<br>按操作单元分，可以分为字节流和字符流。字节流可以处理任何类型的对象，而字符流只可以处理字符类型的对象。字符流存在的意义在于字符处理比较麻烦，使用自带的字符流去处理可以更加高效和统一。<br>按功能角色分，可以分为节点流和处理流，节点流就是指从/向一个IO设备中读取/写入数据的流，而处理流是对一个已存在的流进行一个封装，通过封装后的流实现数据读写的功能，好处是只要是相同的处理流，程序可以采用相同的输入输出代码来访问不同的数据源。</p><p>Java IO流有四大基类<br>用于字节流输入的 InputStream。<br>用于字节流输出的 OutputStream。<br>用于字符流输入的 Reader。<br>用于字符流输出的 Writer。<br>所有 Java IO 流都是从这四个基类派生出的。</p></blockquote></details><ol start="42"><li><h3 id="既然有了字节流，为什么还需要字符流呢？"><a href="#既然有了字节流，为什么还需要字符流呢？" class="headerlink" title="既然有了字节流，为什么还需要字符流呢？"></a><font color=red>既然有了字节流，为什么还需要字符流呢？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>因为字符流这个过程比较耗时，而且如果没有处理好就会导致乱码，所以 IO 流提供了一个直接操作的接口，可以更方便的对字符进行流操作。<br>如果是音视频等媒体文件（不涉及字符的文件）最好使用字节流，而涉及到字符的文件就最好使用字符流。</p></blockquote></details><ol start="43"><li><h3 id="BIO，NIO，AIO有什么区别？"><a href="#BIO，NIO，AIO有什么区别？" class="headerlink" title="BIO，NIO，AIO有什么区别？"></a><font color=red>BIO，NIO，AIO有什么区别？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>BIO 就是 Blocking IO，即同步阻塞IO模式，数据的读写都必须阻塞在一个线程内等待完成，在活动连接数不高的情况下，这种模式表现的很不错，可以让每个连接专注于自己的IO，并且编程简单，不需要考虑其他的问题。但是面对大量的连接时，这种IO就会显得无能为力了。</p><p>NIO 即 Non-Blocking IO，即同步非阻塞IO模式，提供了Channel，Buffer，Selector的抽象，支持面向缓冲的基于通道的IO操作方法。支持阻塞和非阻塞模式，阻塞模式的使用和传统的BIO一样，简单，但是性能和可靠性较差。非阻塞模式则相反。所以对于低负载低并发的情况可以使用同步阻塞IO，对于高负载，高并发的（网络）情况则使用非阻塞模式。</p><p>AIO即Asynchronous IO，即异步非阻塞IO模式，基于事件和回调机制实现的。应用在操作后会直接返回，而不会阻塞在那里。后台任务完成后，操作系统会通知相应的线程进行后续操作。虽然  NIO 提供了非阻塞方法，但是 IO 行为依然是同步的。其业务线程依然在  IO 操作准备好时才得到通知，然后由这个线程自行进行 IO 操作，IO操作本身是同步的。</p></blockquote></details><ol start="44"><li><h3 id="常见关键字有哪些？"><a href="#常见关键字有哪些？" class="headerlink" title="常见关键字有哪些？"></a><font color=red>常见关键字有哪些？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>final<br>修饰变量时，如果变量类型是基本数据类型，则不可更改值。如果变量类型是引用类型，则初始化后不可以指向另一个对象。<br>修饰方法时，方法不可以被重写。<br>修饰类时，类不可以被继承。</p><p>static<br>修饰成员变量和成员方法时（静态变量与静态方法），这些成员变量和方法会属于类，而不再属于某个对象，被整个类的所有对象共享。可以通过类名调用。注意，被static修饰的成员变量属于静态成员变量，静态变量会被存放在 Java 内存区域的方法区。而未被修饰的成员变量原本应该放在堆上。<br>修饰代码块时（静态代码块），静态代码块定义在类中方法外，静态代码块在非静态代码块之前执行，执行顺序是 静态代码块 -&gt;非静态代码块 -&gt; 构造方法。这个类不论创建多少对象，静态代码块都只执行一次。<br>修饰内部类（静态内部类），静态内部类和非静态内部类之间存在一个最大的区别。非静态内部类在编译完成后会隐含的保存一个执行外部类的引用，但是静态内部类却没有。没有这个引用就意味着：它的创建不需要依赖外部类的创建。它不能使用任何外部类的非static成员变量和方法。(可以达到延迟加载和线程安全的效果)<br>静态导包（导入类中的静态资源，是1.5后的新特性）， 格式是import static，可以指定导入某个类中的指定静态资源，而且不需要使用类名调用类中的静态成员，可以直接使用类中静态成员变量和静态成员方法。</p><p>有一个原则，方法体中的引用变量和基本类型的变量都在栈上，其他都在堆上。类的成员变量自然就在堆上，而方法的基本类型变量和引用类型的对象在堆中，而指针在栈上。</p><p>this<br>用于引用类的当前实例，使不使用这个关键字并不影响，但是可以使代码变得更加易读易懂。</p><p>super<br>子类访问父类的变量和方法。</p><p>延申</p><p>构造器中使用super()调用父类中其他构造方法时，语句必须处于构造器首行，否则报错。this调用本类中其他构造方法时也放在首行。</p><p>this，super不能用在 static 方法中，这是因为被 static 修饰的成员就属于类了，被类中所有对象共享。而 this 代表对本类对象的引用，指向本类对象，而 super 代表对父类对象的引用，指向父类对象，所以 this 和 super 都属于对象的范畴，而 static 属于类的范畴。</p><p>方法区如 Java堆一样，是各线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。方法区常被称为永久代，本质上并不等价，HotSpot使用永久代实现方法区，让垃圾收集器可以像管理 Java堆一样管理这部分内存。</p><p>如果方法执行的操作不依赖其类的各个变量和方法，则可将其设为静态，这会使程序占用的空间更小。否则, 应设为非静态的。</p></blockquote></details><ol start="45"><li><h3 id="静态方法和非静态方法（实例方法）的对比？"><a href="#静态方法和非静态方法（实例方法）的对比？" class="headerlink" title="静态方法和非静态方法（实例方法）的对比？"></a><font color=red>静态方法和非静态方法（实例方法）的对比？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>静态方法不需要实例化类对象就可以通过类名调用，而非静态方法必须实例化类对象，在通过类对象调用。</p><p>静态方法访问本类的成员时，只能访问静态成员（静态成员变量和静态成员方法），而无法访问非静态成员。非静态方法就没有这个限制。</p></blockquote></details><ol start="46"><li><h3 id="静态代码块和非静态代码块的对比？"><a href="#静态代码块和非静态代码块的对比？" class="headerlink" title="静态代码块和非静态代码块的对比？"></a><font color=red>静态代码块和非静态代码块的对比？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>都在 JVM 加载类时执行，并且都在构造方法前执行，都可以在类中定义多个，按顺序执行。一般会在代码块中对 static 变量进行赋值。</p><p>静态代码块在非静态代码块前执行，静态代码块只执行一次，之后不会再次执行（但是通过反射创建class对象会导致再次执行），非静态代码块每new一次类对象就会执行一次。</p><p>非静态代码块可以在普通方法中定义，而静态代码块不可以。</p><p>如果一些变量或者对象想要在项目启动时得到执行，那么就需要使用静态代码块，这种代码块属于主动执行。而非静态代码块需要被调用才会被执行。</p><p>非静态代码块是对所有对象进行统一的初始化，而构造函数是给对应的对象进行初始化，构造函数可以是多个，运行不同的构造函数建立不同的类对象。</p></blockquote></details><ol start="47"><li><h3 id="深拷贝与浅拷贝的对比？"><a href="#深拷贝与浅拷贝的对比？" class="headerlink" title="深拷贝与浅拷贝的对比？"></a><font color=red>深拷贝与浅拷贝的对比？</font></h3></li></ol><details>  <summary>显示答案</summary><blockquote><p>浅拷贝就是只对对象的引用进行拷贝，即创建一个新的对象指向被拷贝对象所指向的地址。如果新对象改变地址的内容，不会改变基本数据类型的值，但是会改变引用类型的内容。</p><p>深拷贝就是完全的拷贝，即开辟了新的内存空间，即同时拷贝了引用和被指向的对象。对被拷贝的对象进行了完全的拷贝操作，修改内容对原来的对象没有任何影响。</p><p>标答：<br>浅拷贝，对基本数据类型进行值传递，对引用数据类型的变量进行引用传递的拷贝。<br>深拷贝，对基本数据类型进行值传递，对引用数据类型的变量则创建一个新的对象，复制其内容。</p></blockquote></details><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[JavaGuide]<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a></p><p>[为什么说Java中只有值传递]<a href="https://blog.csdn.net/bjweimengshu/article/details/79799485" target="_blank" rel="noopener">https://blog.csdn.net/bjweimengshu/article/details/79799485</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(11 - 15)</title>
      <link href="/2020/06/08/%E5%89%91%E6%8C%87offerPart3/"/>
      <url>/2020/06/08/%E5%89%91%E6%8C%87offerPart3/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第十一至第十五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a><a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二进制中1的个数</a></h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><p>方法一，暴力法。</p><p>直接将整型 n 的二进制串保存为一个字符串 String，然后统计这个 String 中 1 的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String str=Integer.toBinaryString(n); </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">'1'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，向右移位。<br>上一方法的基础上，很容易想到每一位都向右移位并补 0，通过统计每次 n 的值与 1 进行 &amp; 与运算时的结果是否为 1 来统计 1 的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，位运算的规律。</p><p>事实上，统计 1 的个数可以利用一个规律，即 n &amp; (n - 1) 可以消除 n 的二进制的最后一个 1，利用这个规律，每次消去一个最尾端的 1，并进行统计，直到 n = 0 时结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">数值的整数次方</a></h2><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><p>保证base和exponent不同时为0</p><p>方法一，暴力法。</p><p>因为 base<sup>exponent</sup> 实际上就是 exponent 个 base 相乘，所以可以根据这个规律得到解决方法。注意需要考虑 exponent 为负数的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(base == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// exponent 为负数时的情况需要被考虑</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            base = <span class="number">1</span> / base;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="comment">// 计算结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= exponent; i++)&#123;</span><br><span class="line">            res = res * base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><p>将 exponent 每次除以 2，达到减少计算量的目的。</p><p>在方法一中，很明显出现了大量的重复计算。</p><p>例如：$2^4$ = $(2^2)^2$，所以可见 $x^n = (x^{n/2})^2$，那么可以将指数通过递归的方式从 4 逐渐到 1，再将结果逐层计算返回到顶层。</p><p>当 exponent 为奇数时，有额外的一次相乘所以需要进行判断。</p><p>exponent 为奇数时，$x^n = (x^{n/2})^2 * x$。</p><p>exponent 为偶数时，$x^n = (x^{n/2})^2$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(base == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// exponent 为负数时的情况需要被考虑</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            base = <span class="number">1</span> / base;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pow(base, exponent);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">double</span> res = pow(base, exponent / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>((exponent &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res * res * base;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> res * res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，非递归的快速幂。</p><p>如果想要求 $x^6$，6 的二进制数是 110。</p><p>则可以表示为 $6 = 0 * 2^0 + 1 * 2^1 + 1 * 2^2$，所以 $x^6$可以被表示为</p><p>$x^6 = x^{0<em>2^0+1</em>2^1+1<em>2^2} = x^0 * x^{1</em>2^1} * x^{1*2^2}$，所以对于二进制数，如果通过移位得到的 exponent 的位数是1就将结果乘入答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(base == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// exponent 为负数时的情况需要被考虑</span></span><br><span class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            base = <span class="number">1</span> / base;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> x = base;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(exponent != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((exponent &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                res = res * x; <span class="comment">// 乘入答案</span></span><br><span class="line">            &#125;</span><br><span class="line">            x *= x; <span class="comment">// 计算每次的base值</span></span><br><span class="line">            exponent = exponent &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// exponent移位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a><a href="https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&tqId=11166&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">调整数组顺序使奇数位于偶数前面</a></h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><p>方法一，辅助数组。</p><p>利用一个辅助数组，先读取所有的奇数，按照顺序保存至结果数组，然后再遍历一遍将所有的偶数保存到辅助数组奇数后。最后将值赋给原数组。</p><p>也可以利用两个辅助数组，一次循环就得到奇数组和偶数组，然后将值赋给原数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                res[index++] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                res[index++] = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            array[i] = res[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，插入排序。</p><p>由于插入排序的特性，很适合在此处使用。找到一个奇数后，将这个奇数暂存，从当前位向前搜索，其前方的偶数全部后移，直到找到第一个奇数，将暂存的奇数插入至找到的奇数后方即可。</p><p>也可以利用一个整型保存已排序的奇数的位置，找到新的奇数后，将中间的偶数范围整体后移一位，插入到记录的奇数后方，然后更新奇数的位置。实际原理与插入排序一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((array[i] &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[i];</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(j = i; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((array[j - <span class="number">1</span>] &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                        array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表中倒数第K个结点"><a href="#链表中倒数第K个结点" class="headerlink" title="链表中倒数第K个结点"></a><a href="https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">链表中倒数第K个结点</a></h2><p>输入一个链表，输出该链表中倒数第 K 个结点。</p><p>方法一，暴力法。</p><p>首先确定链表的长度，然后根据链表长度和 K 值来得到目标结点的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">FindKthToTail</span><span class="params">(ListNode head,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">    <span class="comment">// 确定链表长度</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &lt; k) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 链表长度小于K，不存在目标结点。</span></span><br><span class="line">        <span class="keyword">if</span>(count == k) <span class="keyword">return</span> head; <span class="comment">// 链表长度等于K，首节点就是目标结点。</span></span><br><span class="line">    <span class="comment">// 链表长度大于K</span></span><br><span class="line">        <span class="keyword">int</span> dis = count - k; <span class="comment">// 得到目标结点的正向位置</span></span><br><span class="line">        ListNode res = head;</span><br><span class="line">        <span class="keyword">while</span>(dis != <span class="number">0</span>)&#123;</span><br><span class="line">            res = res.next;</span><br><span class="line">            dis--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，快慢指针法。</p><p>由于目标结点距离链表末端有K的距离，所以可以利用两个相距K个距离的指针来协助完成找到目标的任务。</p><p>定义快慢指针，快指针先走K步，然后快慢指针一起行动，当快指针抵达终点时，慢指针刚好到达目标结点的位置。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode FindKthToTail(ListNode head,<span class="built_in">int</span> k) &#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 快指针先走K步</span></span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果快指针抵达终点还需要继续向后，代表K的值大于了链表长度，这个目标结点不存在。</span></span><br><span class="line">            fast = fast.next;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当快指针抵达终点，慢指针正好指向倒数第K个结点</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">反转链表</a></h2><p>输入一个链表，反转链表后，输出新链表的表头。</p><p>方法一，辅助栈。</p><p>使用栈这种特殊的数据结构存储链表的所有数据。因为栈是后入先出的，所以从栈中输出时正好可以构成反转的链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode newHead = stack.pop();</span><br><span class="line">        ListNode newCur = newHead;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            newCur.next = stack.pop();</span><br><span class="line">            newCur = newCur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newCur.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，逐步交换。</p><p>设置三个指针，从前向后依次进行交换。</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> ListNode ReverseList(ListNode head) &#123;</span><br><span class="line">        ListNode pre = <span class="literal">null</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode <span class="keyword">next</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">next</span> = cur.<span class="keyword">next</span>;</span><br><span class="line">            cur.<span class="keyword">next</span> = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="gt-gt-与-gt-gt-gt-运算符的区别"><a href="#gt-gt-与-gt-gt-gt-运算符的区别" class="headerlink" title="$&gt;&gt;$与 $&gt;&gt;&gt;$ 运算符的区别"></a>$&gt;&gt;$与 $&gt;&gt;&gt;$ 运算符的区别</h3><ol><li>$&gt;&gt;$ 是右移运算符，num &gt;&gt; 1，相当于 num / 2。按二进制形式把所有的数字向右移动对应位数，低位移出（舍弃），高位的空位补符号位，即正数补 0，负数补 1。符号位不变。如：-1在32位二进制中表示为：11111111 11111111 11111111 11111111，-1 &gt;&gt; 1：按位右移，符号位不变，仍旧得到11111111 11111111 11111111 11111111，因此值仍为 -1。</li><li>$&gt;&gt;&gt;$ 是二进制右移补零操作符，左操作数的值按右操作数指定的位数右移，移动得到的空位以 0 填充，如 value &gt;&gt;&gt; num 中，num 指定要移位值 value 移动的位数。</li></ol><p><img src="%E5%89%91%E6%8C%87offerPart3.assets/5edd879ac2a9a83be5a8e3a9.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(16 - 20)</title>
      <link href="/2020/06/08/%E5%89%91%E6%8C%87offerPart4/"/>
      <url>/2020/06/08/%E5%89%91%E6%8C%87offerPart4/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第十六至第二十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a><a href="https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&&tqId=11169&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">合并两个排序的链表</a></h2><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><p>方法一，迭代法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">        ListNode cur1 = list1;</span><br><span class="line">        ListNode cur2 = list2;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode newCur = newHead;</span><br><span class="line">        <span class="keyword">while</span>(cur1 != <span class="keyword">null</span> &amp;&amp; cur2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur1.val &lt; cur2.val)&#123;</span><br><span class="line">                newCur.next = cur1;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                newCur.next = cur2;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            newCur = newCur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newCur.next = cur1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newCur.next = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="keyword">null</span>) <span class="keyword">return</span> list1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(list1.val &lt; list2.val)&#123;</span><br><span class="line">            list1.next = Merge(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            list2.next = Merge(list1,list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a><a href="https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88?tpId=13&tqId=11170&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">树的子结构</a></h2><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">HasSubtree</span><span class="params">(TreeNode root1,TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span> || root2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 采用了先序遍历的方式对比两个树状结构</span></span><br><span class="line">        <span class="keyword">return</span> dfs(root1, root2) || HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode root1,TreeNode root2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 如果root2是空,则不管root1是空还是非空,都是正确的.</span></span><br><span class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 如果root2不是空,而root1是空,则不是子结构.</span></span><br><span class="line">        <span class="comment">// 先比较当前节点是否相等,然后比较两者左节点,再比较两者右节点.</span></span><br><span class="line">        <span class="keyword">return</span> (root1.val == root2.val) &amp;&amp; dfs(root1.left, root2.left) &amp;&amp; dfs(root1.right, root2.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a><a href="https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二叉树的镜像</a></h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">二叉树的镜像定义：源二叉树 </span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       /  \</span><br><span class="line">      <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">     / \  / \</span><br><span class="line">    <span class="number">5</span>  <span class="number">7</span> <span class="number">9</span> <span class="number">11</span></span><br><span class="line">    镜像二叉树</span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       /  \</span><br><span class="line">      <span class="number">10</span>   <span class="number">6</span></span><br><span class="line">     / \  / \</span><br><span class="line">    <span class="number">11</span> <span class="number">9</span> <span class="number">7</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 左右子树交换</span></span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        <span class="comment">// 分别处理左右子树中的镜像</span></span><br><span class="line">        Mirror(root.left);</span><br><span class="line">        Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，非递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="comment">// 广度遍历</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode cur = queue.poll();</span><br><span class="line">            TreeNode temp = cur.left;</span><br><span class="line">            cur.left = cur.right;</span><br><span class="line">            cur.right = temp;</span><br><span class="line">            <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>) queue.offer(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>) queue.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a><a href="https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a?tpId=13&tqId=11172&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">顺时针打印矩阵</a></h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><p>方法一，按要求逐层读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 特殊情况直接退出</span></span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> high = <span class="number">0</span>; <span class="comment">// 最上行</span></span><br><span class="line">        <span class="keyword">int</span> low = matrix.length - <span class="number">1</span>; <span class="comment">// 最下行</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>; <span class="comment">// 最左列</span></span><br><span class="line">        <span class="keyword">int</span> right = matrix[<span class="number">0</span>].length - <span class="number">1</span>; <span class="comment">// 最右列</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 遍历当前最上行，从左到右</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = left; col &lt;= right; col++)&#123;</span><br><span class="line">                arr.add(matrix[high][col]);</span><br><span class="line">            &#125;</span><br><span class="line">            high++; <span class="comment">// 最上行更新</span></span><br><span class="line">            <span class="keyword">if</span>(high &gt; low) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">            <span class="comment">// 遍历当前最右列，从上到下</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> row = high; row &lt;= low; row++)&#123;</span><br><span class="line">                arr.add(matrix[row][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            right--; <span class="comment">// 最右列更新</span></span><br><span class="line">            <span class="keyword">if</span>(left &gt; right) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">            <span class="comment">// 遍历当前最下行，从右到左</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = right; col &gt;= left; col--)&#123;</span><br><span class="line">                arr.add(matrix[low][col]);</span><br><span class="line">            &#125;</span><br><span class="line">            low--; <span class="comment">// 最下行更新</span></span><br><span class="line">            <span class="keyword">if</span>(high &gt; low) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">            <span class="comment">// 遍历当前最左列，从下到上</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> row = low; row &gt;= high; row--)&#123;</span><br><span class="line">                arr.add(matrix[row][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            left++; <span class="comment">// 最左列更新</span></span><br><span class="line">            <span class="keyword">if</span>(left &gt; right) <span class="keyword">break</span>; <span class="comment">// 判断是否超出范围</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">包含min函数的栈</a></h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><p>注意：保证测试中不会当栈为空的时候，对栈调用pop()或者min()或者top()方法。</p><p>方法一，利用辅助栈。</p><p>入栈时，每次比较辅助栈顶和入栈值中最小的一个入辅助栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 数据栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 辅助栈（最小值栈）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node); <span class="comment">// 数据栈直接入栈</span></span><br><span class="line">        <span class="comment">// 辅助栈比较后入栈</span></span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            stack2.push(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> min = Math.min(stack2.peek(), node);</span><br><span class="line">            stack2.push(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 出栈时两者都出栈</span></span><br><span class="line">        stack1.pop();</span><br><span class="line">        stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack1.peek(); <span class="comment">// 当前数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack2.peek(); <span class="comment">// 当前最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，辅助栈优化。</p><p>在数据有限制的情况下适用，否则差值会溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果栈内为空，则最小值就是其本身，推入元素和当前最小值的差值 0。</span></span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">            stack.push(<span class="number">0</span>);</span><br><span class="line">            min = node;</span><br><span class="line">        <span class="comment">// 如果栈内不为空</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> reduce = node - min; <span class="comment">// 计算当前元素和当前最小值的差值</span></span><br><span class="line">            stack.push(reduce); <span class="comment">// 差值入栈</span></span><br><span class="line">            <span class="comment">// 差值小于 0，代表node小于最小值，更新最小值</span></span><br><span class="line">            <span class="keyword">if</span>(reduce &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                min = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果栈顶小于0，代表如果当前栈顶出栈会导致最小值更新为上一个最小值。</span></span><br><span class="line">        <span class="keyword">if</span>(stack.peek() &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            min = min - stack.peek(); <span class="comment">// 计算出之前的最小值, min(老min) = node(当前min) - reduce</span></span><br><span class="line">        &#125;</span><br><span class="line">        stack.pop(); <span class="comment">// 出栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果栈顶小于0，代表当前栈顶元素就是最小元素。</span></span><br><span class="line">        <span class="keyword">if</span>(stack.peek() &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">        <span class="comment">// 否则，用当前最小值 + 栈顶元素可以得到对应的node值。</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> min + stack.peek(); <span class="comment">// node = reduce + min</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min; <span class="comment">// 返回当前最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(6 - 10)</title>
      <link href="/2020/06/07/%E5%89%91%E6%8C%87offerPart2/"/>
      <url>/2020/06/07/%E5%89%91%E6%8C%87offerPart2/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第六至第十题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a><a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&tqId=11159&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">旋转数组的最小数字</a></h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><p>方法一，暴力法。</p><p>由于这个题目仅想要求得最小值，那么直接遍历求得最小值是最简单的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            min = Math.min(min, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，二分查找。</p><p>众所周知，二分查找的前提条件就是数组有序排列。但是在这个问题中依然可以使用二分查找，只要明确了二分查找时答案可以明确的在中间元素的某一侧就一样可以使用二分查找。</p><p>二分查找的比较原则是：</p><ol><li>如果存在目标值，则 mid 与目标值比较。</li><li>如果不存在目标值，则 mid 与端点进行比较。</li></ol><p>本题就利用端点来快速求得结果，利用 end 端点进行对比，共有三种情况。</p><ol><li>mid 元素小于 end 元素，此时可知最小值肯定不处于 [mid + 1, end] 这个区间中，所以可以将 end 移至 mid 处。</li><li>mid 元素大于 end 元素，此时可知最小值肯定不处于 [start, mid] 这个区间中，所以可以将 start移至 mid + 1 处。</li><li>而题干中指明未旋转时，这个数组是一个非递减排序的数组，所以有可能出现相等的情况，而在相等的情况出现时，无法确定最小值处于哪一边，所以就将 end 向前移动一位，逐渐缩小范围来得到答案。</li></ol><p>注意，在这一道题中并不可以使用 start 端点来进行对比，因为旋转后的数组无法利用这个端点准确知道结果处于哪一边。如：1，2，3，4，5 和 3，4，5，1，2，它们的 mid 元素都大于 start 元素，而最小值却没有规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = array.length;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[start] &lt; array[end])&#123;</span><br><span class="line">                <span class="keyword">return</span> array[start];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid = start + ((end - start) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(array[mid] &lt; array[end])&#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid] &gt; array[end])&#123;</span><br><span class="line">                start = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&rp=1&ru=%2Factivity%2Foj&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=1" target="_blank" rel="noopener">斐波那契数列</a></h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。<br>n&lt;=39</p><p>斐波那契数列是一道非常经典的递归和动态规划题目。斐波那契数列简单来说就是：</p><p>第 N 项的值 = 第 N-1 项的值+第 N-2 项的值</p><p>方法一，递归法。</p><p>很容易想到使用递归来解决问题，因为通过递归可以从 N 到 0 逐层深入，然后再逐层返回，直到最外层即可得到结果。整个过程是自上而下，再逐层返回计算的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><p>递归可以用两行代码优雅的解决问题，但是中间出现了重复计算。比如 N = 3 时，N - 1 会计算 2，1。而 N - 2 也会计算 1。这样 1 就会被计算 2 次。如果在更大的 N 上就会出现更多重复的计算，所以就出现了可以保存计算过程中的各个状态的动态规划。而且与递归执行过程相反，动态规划的执行过程是自下而上的</p><p>使用了一个一维数组 dp 来保存每次计算的状态，后续就不再需要计算了，可以直接获取数组中已计算的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，计算过程中，每一位的计算都仅使用了前两位，而其他位被使用后就没有作用了，浪费了空间，所以可以进一步优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> dp0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp = dp0 + dp1; <span class="comment">// 计算新元素的值</span></span><br><span class="line">            <span class="comment">// 移除不再有效的 dp0 的值</span></span><br><span class="line">            dp0 = dp1; <span class="comment">// 后移一位</span></span><br><span class="line">            dp1 = dp; <span class="comment">// 后移一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a><a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">跳台阶</a></h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>实际上依然是一个斐波那契数列，只不过在外面套了一层皮。列举一些例子就可以很容易找到规律。比如：target = 1，1种走法。target = 2，2种走法，target = 3，3种走法，target = 4，5种走法。很明显就可以看出来这是一个斐波那契数列。</p><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">return</span> JumpFloor(target - <span class="number">1</span>) + JumpFloor(target - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp = dp1 + dp2;</span><br><span class="line">            dp1 = dp2;</span><br><span class="line">            dp2 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">变态跳台阶</a></h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>在上一题的基础上，步数变得更多了，那么最简单的方法就是将这些增加的可能性写入到对应位置。</p><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            count += JumpFloorII(target - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> || target == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                dp[i] += dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，优化方法二。</p><p>根据方法二中的规律，<br>$$<br>dp[target] = dp[target - 1] + dp[target - 2] + … + dp[0]<br>$$</p><p>$$<br>dp[target - 1] = dp[target - 2] + dp[target - 3] + … + dp[0]<br>$$</p><p>两者合并可得，<br>$$<br>dp[target] = 2 * dp[target - 1]<br>$$<br>故可利用这个规律进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> || target == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp0 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp = <span class="number">2</span> * dp0; <span class="comment">// 亦可使用位运算 dp0 &lt;&lt; 1</span></span><br><span class="line">            dp0 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法四，找规律。</p><p>通过列举，可以发现一个规律：<br>$$<br>dp[0] = dp[1] = 1，dp[2] = 2 = 2^1，dp[3] = 4 = 2^2，dp[4] = 8 = 2^3。<br>$$<br>所以可得 $dp[target] = 2^{target - 1}$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> || target == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">2</span>, target - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">矩形覆盖</a></h2><p>我们可以用 2 * 1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2 * 1 的小矩形无重叠地覆盖一个 2 * n 的大矩形，总共有多少种方法？</p><p>比如 n = 3 时，2 * 3 的矩形块有 3 种覆盖方法：</p><p><img src="https://pic.downk.cc/item/5edd0a04c2a9a83be5ea3c66.png" alt=""></p><p>这道题依然是斐波那契数列的变形。因为小矩形可以有两种形态 2 * 1 或者 1 * 2，而目标是 2 * n。忽略掉高，只关注宽，因为高度在这道题中并没有什么作用，那么实际上就等价于可以爬一阶楼梯或者两阶楼梯爬到 n 的方法数量。</p><p>方法一，递归法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">return</span> RectCover(target - <span class="number">1</span>) + RectCover(target - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，动态规划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">3</span>) <span class="keyword">return</span> target;</span><br><span class="line">        <span class="keyword">int</span> dp1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dp2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= target; i++)&#123;</span><br><span class="line">            dp = dp1 + dp2;</span><br><span class="line">            dp1 = dp2;</span><br><span class="line">            dp2 = dp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-动态规划简单题型</title>
      <link href="/2020/06/06/LeetCode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%80%E5%8D%95%E9%A2%98%E5%9E%8B/"/>
      <url>/2020/06/06/LeetCode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%80%E5%8D%95%E9%A2%98%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>暂无</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小红书2020校招Android方向笔试题卷三</title>
      <link href="/2020/06/06/%E5%B0%8F%E7%BA%A2%E4%B9%A62020%E5%8D%B7%E4%B8%89/"/>
      <url>/2020/06/06/%E5%B0%8F%E7%BA%A2%E4%B9%A62020%E5%8D%B7%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/test/23567675/summary" target="_blank" rel="noopener">牛客网小红书2020校招Android方向笔试题卷三</a><br>记录了一些解题思路及实现代码。<br>整体难度偏易。</p><a id="more"></a><h2 id="笔记草稿"><a href="#笔记草稿" class="headerlink" title="笔记草稿"></a>笔记草稿</h2><p>薯队长写了一篇笔记草稿，请你帮忙输出最后内容。<br>1.输入字符包括，”(“  ,  “)”  和  “&lt;”和其他字符。<br>2.其他字符表示笔记内容。<br>3.()之间表示注释内容，任何字符都无效。  括号保证成对出现。<br>4.”&lt;”表示退格,  删去前面一个笔记内容字符。括号不受”&lt;”影响  。 </p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一行字符串。长度&lt;=<span class="number">10000.</span></span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行字符串，表示最终的笔记内容。</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Corona</span><span class="params">(Trump)</span><span class="title">USA</span></span>&lt;&lt;&lt;Virus</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CoronaVirus</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题很简单的根据读取不同的元素内容执行不同操作即可。由于括号成对出现，可以用一个整型值代表是否出现括号，当没有括号时才向StringBuilder中增加字符，有括号时略过，遇到一个’&lt;’就删去StringBuilder最后一位即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String input = sc.nextLine();</span><br><span class="line">        <span class="keyword">char</span>[] arr = input.toCharArray();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> i : arr)&#123;.</span><br><span class="line">            <span class="comment">// 遇到正括号，flag++代表遇到括号了</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'('</span>)&#123;</span><br><span class="line">                flag++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遇到反括号，flag--代表结束了一个括号</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">')'</span>)&#123;</span><br><span class="line">                flag--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果flag不是0则代表依然处于括号内</span></span><br><span class="line">            <span class="keyword">if</span>(flag != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 遇到&lt;符号，代表需要移除前一位</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">                sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上述情况都不满足代表是一个正常字符，可以插入</span></span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="笔记精选"><a href="#笔记精选" class="headerlink" title="笔记精选"></a>笔记精选</h2><p>薯队长写了n篇笔记，编号从1~n,每篇笔记都获得了不少点赞数。<br>薯队长想从中选出一些笔记，作一个精选集合。挑选的时候有两个规则：<br>1.不能出现连续编号的笔记。<br>2.总点赞总数最多<br>如果满足1，2条件有多种方案，挑选笔记总数最少的那种</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包含两行。第一行整数n表示多少篇笔记。 第二行n个整数分别表示n篇笔记的获得的点赞数。   </span><br><span class="line"> （<span class="number">0</span>&lt;n&lt;=<span class="number">1000</span>,    <span class="number">0</span>&lt;=点赞数&lt;=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出两个整数<span class="symbol">x</span>,<span class="symbol">y</span>。空格分割。</span><br><span class="line"> <span class="symbol">x</span>表示总点赞数，<span class="symbol">y</span>表示挑选的笔记总数。</span><br></pre></td></tr></table></figure><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>实际上这道题与LeetCode上打家劫舍最简单的那一版是一样的。多了一个记录挑选笔记总数的部分。</p><p>本题利用动态规划思想，根据动态规划的三大要素，</p><p>第一步需要确定数组元素的含义，这个题中数组元素的含义就是点赞数达到最大。</p><p>第二步找出数组元素之间的关系式。易知，对于当前元素，要么选择它，则dp[i] = arr[i] + dp[i-2]，不能与相邻的一起选择，又想要达到最大点赞数，就只能与上上个的最大值相加。要么不选择它，则dp[i] = dp[i-1]，不选择它，那么当前元素上的最大点赞数应该与上一位的最大点赞数相同。那么找到两者结果最大的那一个作为当前元素的结果即可为最大点赞数。</p><p>第三步找出初始值，很容易知道，dp[1]的初始值就是它本身，因为没有前缀笔记本，可以作为初始值。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> nums = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] flag = <span class="keyword">new</span> <span class="keyword">int</span>[nums+<span class="number">1</span>]; <span class="comment">// 记录选择笔记本的数量</span></span><br><span class="line">        dp[<span class="number">1</span>] = sc.nextInt();</span><br><span class="line">        flag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nums; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> in = sc.nextInt();</span><br><span class="line">            dp[i] = Math.max(in + dp[i-<span class="number">2</span>], dp[i-<span class="number">1</span>]); <span class="comment">// 动态规划表达式，最大点赞数</span></span><br><span class="line">            <span class="comment">// 如果不选择当前笔记本</span></span><br><span class="line">            <span class="keyword">if</span>(dp[i] == dp[i-<span class="number">1</span>])&#123;</span><br><span class="line">                flag[i] = flag[i-<span class="number">1</span>]; <span class="comment">// 等于之前选择的笔记本数量</span></span><br><span class="line">            <span class="comment">// 如果选择了当前笔记本</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                flag[i] = flag[i-<span class="number">2</span>]+<span class="number">1</span>; <span class="comment">// 在之前基础上加一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[nums] + <span class="string">" "</span> + flag[nums]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="倒卖战利品"><a href="#倒卖战利品" class="headerlink" title="倒卖战利品"></a>倒卖战利品</h2><p>在游戏中，击败魔物后，薯队长获得了N件宝物，接下来得把这些宝物卖给宝物回收员来赚点小钱。这个回收员有个坏毛病，每次卖给他一件宝 物后，之后他就看不上比这件宝物差的宝物了。在这个世界中，衡量宝物的好坏有两个维度，稀有度X和实用度H，回收员在回收一个宝物A 后，下一个宝物的稀有度和实用度都不能低于宝物A。那么薯队长如何制定售卖顺序，才能卖给回收员宝物总个数最多。</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第一行一个正整数N。 接下来N行。每行两个整数分别表示X和H </span><br><span class="line">X1 H1 X2 H2 … XN HN</span><br><span class="line">输入限制： 对于<span class="number">70</span>%的数据： </span><br><span class="line"><span class="number">0</span>&lt;N&lt;<span class="number">10</span>^<span class="number">4</span> </span><br><span class="line"><span class="number">0</span>&lt;Xi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">0</span>&lt;Hi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">100</span>%的数据：</span><br><span class="line"><span class="number">0</span>&lt;N&lt;<span class="number">10</span>^<span class="number">6</span></span><br><span class="line"><span class="number">0</span>&lt;Xi&lt;<span class="number">10</span>^<span class="number">6</span> </span><br><span class="line"><span class="number">0</span>&lt;Hi&lt;<span class="number">10</span>^<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数，表示最多可以卖出的宝物数</span><br></pre></td></tr></table></figure><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这道题利用了单调栈的思想，首先将所有数据读取到一个二维整型数组中，然后对整型数组进行排序，依次对第一列X和第二列H进行排序，此时X列应为有序递增的，那么就只需要确定H列即可。首先从小到大输入H，直到新的H比最大的那一位小，这证明这一位需要取代之前的某一位才可以继续向后取值。通过二分查找找到已读取H数组中第一位大于新H值的那一位，将这一位的值替换为新值，然后继续向后输入新H值。反复这个过程，直到所有H都被插入过。此时H结果数组的长度就是最终的结果。</p><p>例子</p><p>(3,2), (1,1), (1,3), (1,2)</p><p>排序</p><p>(1,1), (1,2), (1,3), (3,2)</p><p>忽略X位，仅看H位，依次输入结果数组</p><p>1，2，3</p><p>最后一个2小于数组中最后一位3，则找到第一个不大于新H值的值，即数组中的第一位2，用新H替换掉这一位就可以继续输入后续的新H。</p><p>全部输入完成后结果数组的长度就是最终结果。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> nums = sc.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 读取数据，保存至二维数组</span></span><br><span class="line">            <span class="keyword">int</span>[][] baobei = <span class="keyword">new</span> <span class="keyword">int</span>[nums][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">                <span class="keyword">int</span> h = sc.nextInt();</span><br><span class="line">                baobei[i][<span class="number">0</span>] = x;</span><br><span class="line">                baobei[i][<span class="number">1</span>] = h;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 自定义排序，排序第一列，并根据第一列排序第二列</span></span><br><span class="line">            Arrays.sort(baobei, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span></span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 结果List集合</span></span><br><span class="line">            <span class="comment">// 将所有H值依次处理到List集合中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)&#123;</span><br><span class="line">                <span class="comment">// 如果单调栈上是空的，或者新的H值大于最后一位（最大的）H值，直接插入到栈的尾端</span></span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty() || baobei[i][<span class="number">1</span>] &gt; stack.get(stack.size()-<span class="number">1</span>))&#123;</span><br><span class="line">                    stack.add(baobei[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 如果新的H值小于等于最后一位（最大的）H值，则需要找到第一个大于等于新H的位</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 二分查找，找到第一个大于等于新H的位</span></span><br><span class="line">                    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> r = stack.size();</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                        <span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span>(stack.get(m) &gt;= baobei[i][<span class="number">1</span>]) r = m;</span><br><span class="line">                        <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.set(l, baobei[i][<span class="number">1</span>]); <span class="comment">// 将找到的这一位替换为新H值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(stack.size()); <span class="comment">// 打印结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="动态规划三大要素"><a href="#动态规划三大要素" class="headerlink" title="动态规划三大要素"></a>动态规划三大要素</h3><ol><li>定义数组元素的含义. 由于会使用一个数组来保存历史数据, 假设使用一个一维数组dp[], 有一个很重要的点就是规定这个数组元素的含义, 例如dp[i]是什么意思.</li><li>找出数组元素之间的关系式, 动态规划类似归纳法, 计算dp[n]时可以利用dp[n-1], dp[n-2], …, dp[1]来推出dp[n]的, 即利用历史数据来推断出新的元素值, 所以需要找到数组元素之间的关心式, 例如dp[n] = dp[n-1] + dp[n-2], 就是一种关系式. 这一步也是最难的一步.</li><li>找出初始值. 如同数学归纳法, 虽然知道了数组元素间的关系式, 如 dp[n] = dp[n-1] + dp[n-2], 则可以通过dp[n-1] 和 dp[n-2]计算dp[n], 但是需要知道初始值, 否则就会一直推下去. 例如dp[3] = dp[2] + dp[1]. 而dp[2] 和 dp[1]无法继续分解, 所以必须可以直接获取dp[2]和dp[1]的值, 这就是初始值.</li></ol><p>获得了初始值, 并且拥有了数组元素之间的关系式, 就可以得到dp[n]的值了. dp[n]的含义由自己定义, 想要求什么就可以定义成什么.</p><p>需要注意对初始值的严谨设置, 需要根据经验去进行判断.</p><p>90%的字符串问题可以使用动态规划解决, 且90%为二维数组.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[单调栈解题三]<a href="https://blog.csdn.net/Cyan1956/article/details/106577339/" target="_blank" rel="noopener">https://blog.csdn.net/Cyan1956/article/details/106577339/</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法之冒泡排序，选择排序，插入排序</title>
      <link href="/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part1/"/>
      <url>/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part1/</url>
      
        <content type="html"><![CDATA[<p>排序算法是面试中最常见的题目之一了, 目前网络上已经有很多博客写了相当不错的对于十大排序算法的解释和总结，而这篇文章仅仅作为自己复习排序算法这个部分使用。</p><p>这一篇首先解释和总结一下排序算法中最基础的三大算法</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是最简单的排序方式，也是最易理解的排序算法。冒泡的意思就是最大或最小值一个个冒出来最终形成有序数组。</p><p>概述：通过不断对相邻两个元素的比较和交换，达到排序的目的。</p><p>具体流程是，从前向后依次对每一对相邻的元素进行比较和交互，直到最后一位，此时最后一位上的值就会是最大值。那么再次对除最后一位的剩余所有位执行相同的操作。直到排序完成。</p><p>冒泡排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b3f7.gif" alt="冒泡排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">// 比较</span></span><br><span class="line">                <span class="keyword">if</span>(input[j] &gt; input[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = input[j];</span><br><span class="line">                    input[j] = input[j+<span class="number">1</span>];</span><br><span class="line">                    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序还可以进一步优化，如果在中间某一次循环时发现这一次循环没有进行任何交换，那么可以代表这一次循环以及实现了整个数组有序，则可以放弃剩余未执行的循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 检查是否提前完成排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">                <span class="comment">// 比较</span></span><br><span class="line">                <span class="keyword">if</span>(input[j] &gt; input[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>; <span class="comment">// 执行了交换操作, 不能提前终止排序算法</span></span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = input[j];</span><br><span class="line">                    input[j] = input[j+<span class="number">1</span>];</span><br><span class="line">                    input[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果未发生交换, 则提取终止排序算法</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O（N<sup>2</sup>)，空间复杂度：O(1)，稳定排序，原地排序。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序也非常容易理解，选择的意思就是通过不断的从已有数组中进行选择最小/最大值并与第一位/最后一位进行交换，从而达到使数组有序的目的。</p><p>概述：不断在数组中寻找当前最小值。</p><p>具体流程是，找到当前数组中最小值，将其与第一位交换位置。然后从第二位开始的数组寻找最小值，将其与第二位交换位置。依次循环直到数组有序。</p><p>选择排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b404.gif" alt="选择排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="comment">// 找到最小值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(input[min] &gt; input[j])&#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最小值与当前子数组第一位进行交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = input[min];</span><br><span class="line">            input[min] = input[i];</span><br><span class="line">            input[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N<sup>2</sup>)，空间复杂度：O(1)，非稳定排序，原地排序。</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序作为三大基本排序之一，同样十分容易理解。插入可以看作是斗地主整理手牌的过程，从第二张开始向前比较，找到合适的位置插入。</p><p>概述：从第二个元素开始至最后一个元素结束，每个元素不断向前比较以找到小于当前元素的第一个值后的位置。</p><p>具体流程是，第一个元素不需要比较，第二个元素向前比较，小于第一个元素，则第一个元素的值向后移动，原第二元素继续向前比较，此时前方没有值则结束比较并插入。第三个元素采用同样的方式，找到第一个小于自己的元素或向前已经没有元素时可插入其后的位置。依次处理每一位，直至所有位处理完毕即为有序数组。</p><p>插入排序动态图示：<br><img src="https://pic.downk.cc/item/5ed7d056c2a9a83be501b3fe.gif" alt="插入排序动态图示"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = input[i]; <span class="comment">// 取出需排序的元素</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = i; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp &lt; input[j - <span class="number">1</span>])&#123;</span><br><span class="line">                    input[j] = input[j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            input[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N<sup>2</sup>)，空间复杂度：O(1)，稳定排序，原地排序。</p><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><p>稳定排序</p><p>简单来说稳定排序就是指两个或多个相同的值在排序后，它们的相对位置依然保持不变。</p><p>原地排序</p><p>不使用任何辅助数据结构，仅在原数据结构上完成了排序操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[流程图示]<a href="https://blog.csdn.net/m0_37907797/article/details/102835456" target="_blank" rel="noopener">https://blog.csdn.net/m0_37907797/article/details/102835456</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法之希尔排序，堆排序，快速排序，归并排序</title>
      <link href="/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part2/"/>
      <url>/2020/06/03/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Part2/</url>
      
        <content type="html"><![CDATA[<p>这一部分排序代码在基础三大排序算法的基础上进行了优化和更新，性能大大提升，其中堆排序，快速排序和归并排序都是面试中的常客。</p><p>PS：我的第一次面试快排就写错了…，还是练习的太少了。</p><a id="more"></a><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是插入排序的一种优化。</p><p>在插入排序的基础上增加了一个控制比较步长的循环，内部与步长相关的也需要进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] input) &#123;</span><br><span class="line"><span class="keyword">int</span> len = input.length;</span><br><span class="line"><span class="comment">// 获得不同的比较步长</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> inc = len/<span class="number">2</span>; inc &gt; <span class="number">0</span>; inc = inc / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 插入排序，将所有与步长相关的改成新的步长，而不是普通插入排序的1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = inc; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = input[i];</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = i; j &gt;= inc; j = j - inc) &#123;</span><br><span class="line"><span class="comment">// j - 1位的元素与temp进行比较</span></span><br><span class="line"><span class="keyword">if</span>(temp &lt; input[j - inc]) &#123;</span><br><span class="line">input[j] = input[j - inc];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">input[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] input) &#123;</span><br><span class="line"><span class="keyword">int</span> len = input.length;</span><br><span class="line"><span class="comment">// 从最后一个父节点开始，依次下沉建大顶堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = (len - <span class="number">2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">input = heap(input, i, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 交换堆顶元素（最大元素）与最后一位元素</span></span><br><span class="line"><span class="keyword">int</span> temp = input[i];</span><br><span class="line">input[i] = input[<span class="number">0</span>];</span><br><span class="line">input[<span class="number">0</span>] = temp;</span><br><span class="line">input = heap(input, <span class="number">0</span>, i); <span class="comment">// 从根下沉，重构大顶堆，最后一位不算在内。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heap(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> parent, <span class="keyword">int</span> len) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[parent]; <span class="comment">// 保存父结点值</span></span><br><span class="line"><span class="keyword">int</span> child = <span class="number">2</span> * parent + <span class="number">1</span>; <span class="comment">// 父节点的左子节点</span></span><br><span class="line"><span class="comment">// 左子节点处于数组范围内</span></span><br><span class="line"><span class="keyword">while</span>(child &lt; len) &#123;</span><br><span class="line"><span class="comment">// 右子节点处于范围内，且大于左子节点，则取出右子节点去对比</span></span><br><span class="line"><span class="keyword">if</span>(child + <span class="number">1</span> &lt; len &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>]) &#123;</span><br><span class="line">child++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父节点大于最大子节点，当前位置就是正确位置，结束循环</span></span><br><span class="line"><span class="keyword">if</span>(temp &gt; arr[child]) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 否则，父节点处应该是最大子节点的位置</span></span><br><span class="line">arr[parent] = arr[child];</span><br><span class="line"><span class="comment">// 父节点下沉继续对比</span></span><br><span class="line">parent = child;</span><br><span class="line"><span class="comment">// 子节点下沉继续对比</span></span><br><span class="line">child = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当抵达最底层或者找到父节点正确的位置时</span></span><br><span class="line">arr[parent] = temp; <span class="comment">// 父节点被放置在新的位置</span></span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>利用了二分的思想，每次取一个值作为分割点，将所有比它小的放在左边，所有比他大的放在右边，此时这个点就已经是有序的了，不会再发生改变。然后再处理其它的点直到所有的点被处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] input) &#123;</span><br><span class="line"><span class="keyword">if</span>(input.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span>[] res = quick(input, <span class="number">0</span>, input.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quick(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span> arr; <span class="comment">// 递归结束条件</span></span><br><span class="line"><span class="keyword">int</span> mid = sort(arr, left, right); <span class="comment">// 获得已确定的值</span></span><br><span class="line"><span class="comment">// 递归处理左右两个部分</span></span><br><span class="line">quick(arr, left, mid - <span class="number">1</span>);</span><br><span class="line">quick(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[left]; <span class="comment">// 设第一位为分割点，也可以写成随机选择，避免特殊情况导致的效率降低。</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= temp) right--; <span class="comment">// 右侧大于分割点的跳过</span></span><br><span class="line">arr[left] = arr[right]; <span class="comment">// 将发现的值赋给当前left下标的元素</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt;= temp) left++; <span class="comment">// 左侧小于分割点的跳过</span></span><br><span class="line">arr[right] = arr[left]; <span class="comment">// 将发现的值赋给当前right下标的元素</span></span><br><span class="line">&#125;</span><br><span class="line">arr[left] = temp; <span class="comment">// left所处的位置就是分割点应在的位置</span></span><br><span class="line"><span class="keyword">return</span> left; <span class="comment">// 返回分割点坐标，以便处理左右两侧元素。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] input)&#123;</span><br><span class="line"><span class="keyword">int</span> len = input.length;</span><br><span class="line"><span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span> input;</span><br><span class="line">input = sort(input, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分治</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] input, <span class="keyword">int</span> left, <span class="keyword">int</span> right)&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">sort(input, left, mid); <span class="comment">// 左侧分治</span></span><br><span class="line">sort(input, mid + <span class="number">1</span>, right); <span class="comment">// 右侧分治</span></span><br><span class="line"></span><br><span class="line">merge(input, left, mid, right); <span class="comment">// 左右归并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> left; <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>]; <span class="comment">// 辅助数组</span></span><br><span class="line"><span class="keyword">int</span> i = left;</span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="keyword">if</span>(input[i] &lt; input[j])&#123;</span><br><span class="line">temp[index++] = input[i++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp[index++] = input[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) temp[index++] = input[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= right) temp[index++] = input[j++];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将辅助数组中的值放回原数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> cur = <span class="number">0</span>; cur &lt; index; cur++)&#123;</span><br><span class="line">input[left++] = temp[cur];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关资源整合</title>
      <link href="/2020/06/01/%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/"/>
      <url>/2020/06/01/%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>各种书籍资源以及网络资源，备份用。</p><a id="more"></a><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="https://pan.baidu.com/s/1zKmakqZa_AMG_xpx8QkzeA" target="_blank" rel="noopener">Java编程思想</a>，提取码：8l7w</p><p><a href="https://pan.baidu.com/s/1kR6uhMeZl-HWL0BIKmkBig" target="_blank" rel="noopener">深入浅出Java多线程</a>，提取码：12da</p><p><a href="https://pan.baidu.com/s/19Hn1N2i-0Os8KX9pAIPTMg" target="_blank" rel="noopener">Java并发编程的艺术</a>，提取码：ye6e</p><p><a href="https://pan.baidu.com/s/1P_cuQWrL0_7t7Grp3lPZsA" target="_blank" rel="noopener">深入理解Java虚拟机</a>，提取码：ewzh</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><a href="https://pan.baidu.com/s/1Wm4eE-81sRl52R0cA3djMA" target="_blank" rel="noopener">AndroidStudio从入门到精通</a>，提取码：f2w2</p><p><a href="https://pan.baidu.com/s/1wsQUONF6ofEgTUP71rcevQ" target="_blank" rel="noopener">Android开发艺术探索</a>，提取码：73xa</p><p><a href="https://pan.baidu.com/s/1ajpuuz0HwbBhQE7KpoY1WQ" target="_blank" rel="noopener">阿里巴巴-Java开发手册</a>，提取码：hwrd</p><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p><a href="https://pan.baidu.com/s/11tUrG8pd9VvYD2YUddHl_g" target="_blank" rel="noopener">算法书籍合集</a>，提取码：e66p</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p><a href="https://pan.baidu.com/s/1OLjm0S8YOy-8JhhFT6FajQ" target="_blank" rel="noopener">程序是怎样跑起来的</a>，提取码：aprn</p><p><a href="https://pan.baidu.com/s/1Gk0UJj04Xd4ttWlDDhdv7w" target="_blank" rel="noopener">计算机程序设计艺术</a>，提取码：9039</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><a href="https://pan.baidu.com/s/1Wc0RsSTexdtcPMXs7SUVjQ" target="_blank" rel="noopener">图解HTTP</a>，提取码：0bx5</p><p><a href="https://pan.baidu.com/s/1DPK4Wern4HUYAa_b2gRJzQ" target="_blank" rel="noopener">计算机网络-自顶向下方法</a>，提取码：la3q</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="https://pan.baidu.com/s/1_DBixi7j_up1nW53Dyg48A" target="_blank" rel="noopener">MySQL实战45讲</a>，提取码：3n9x</p><h2 id="面试突击"><a href="#面试突击" class="headerlink" title="面试突击"></a>面试突击</h2><p><a href="https://pan.baidu.com/s/166kEwVh8YT_hsu67s97xSg" target="_blank" rel="noopener">程序员内功修炼</a>，提取码：80f5</p><p><a href="https://pan.baidu.com/s/1V6Esp0ZnFm9OJPTU-Fm88A" target="_blank" rel="noopener">JavaGuide面试突击</a>，提取码：z6q2</p><p><a href="https://pan.baidu.com/s/1mS5QpOVat-XCLTfU4fmDjQ" target="_blank" rel="noopener">程序员代码面试指南：IT 名企算法与数据结构题目最优解</a>，提取码：idl6</p><h2 id="网络资源-博客"><a href="#网络资源-博客" class="headerlink" title="网络资源/博客"></a>网络资源/博客</h2><p><a href="https://blog.csdn.net/qq_19431333/category_6671933.html" target="_blank" rel="noopener">源码解析</a>：一个对各种Java源码解析的博客。</p><p><a href="https://www.jianshu.com/u/203b606b956c" target="_blank" rel="noopener">面试问题</a>：一个整合Android校招面试问题的博客。</p><p><a href="https://leetcode.jp/problems.php?keyword=" target="_blank" rel="noopener">LeetCode大全</a>：一个整合所有LeetCode的博客。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer(1 - 5)</title>
      <link href="/2020/05/31/%E5%89%91%E6%8C%87offerPart1/"/>
      <url>/2020/05/31/%E5%89%91%E6%8C%87offerPart1/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用于总结剑指offer中第一至第五题的解答。每道题都会给出多种比较容易想到的解答方法，作为自己准备笔试面试的一部分。</p><a id="more"></a><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a><a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二维数组中的查找</a></h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>方法一，暴力解法。</p><p>对每一行从前向后依次查找，没有利用到题目中给出的规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = array.length;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，二分查找。</p><p>对每一行执行二分查找，利用了每行递增的规律。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = array.length;</span><br><span class="line">        <span class="keyword">int</span> col = array[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = col - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>); <span class="comment">//防止溢出, 使用位运算</span></span><br><span class="line">                <span class="comment">// 二分查找</span></span><br><span class="line">                <span class="keyword">if</span>(array[i][mid] &lt; target)&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid] &gt; target)&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，二分法优化。</p><p>根据规律可知，数组每列从上到下递增，每行从左到右递增，则可以从左下角或者右上角开始寻找，当当前指大于目标值时横向向右移动，当前值小于目标值时纵向向上移动，最终可以对目标值进行定位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左下角坐标</span></span><br><span class="line">        <span class="keyword">int</span> row = array.length - <span class="number">1</span>; <span class="comment">// row = 0;右上角坐标</span></span><br><span class="line">        <span class="keyword">int</span> col = <span class="number">0</span>; <span class="comment">// col = array[0].length - 1;右上角坐标</span></span><br><span class="line">        <span class="keyword">while</span>(row &gt;= <span class="number">0</span> &amp;&amp; col &lt;= array[<span class="number">0</span>].length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 当前位正好就是目标</span></span><br><span class="line">            <span class="keyword">if</span>(array[row][col] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 当前位大于目标值, 则目标值应在当前位上方</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[row][col] &gt; target)&#123;</span><br><span class="line">                row--;</span><br><span class="line">            <span class="comment">// 当前位小于目标值, 则目标值应在当前位右方</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[row][col] &lt; target)&#123;</span><br><span class="line">                col++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a><a href="https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">替换空格</a></h2><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p>方法一，调用内部函数。</p><p>通过调用内部方法直接进行替换操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toString().replace(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，使用一个新的StringBuffer保存结果。</p><p>创建一个新的StringBuffer，将原有的每一位复制到新的StringBuffer上，如果遇到空格，则追加“%20”。需要使用额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="comment">// 判断当前位是否是空格</span></span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != <span class="string">' '</span>)&#123;</span><br><span class="line">                sb.append(str.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(<span class="string">"%20"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，双指针法，从后向前搜素空格并替换。</p><p>从前向后搜素替换会导致后方元素被覆盖，而从后向前搜素替换可以避免这种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = str.length() - <span class="number">1</span>; <span class="comment">// 原长度</span></span><br><span class="line">        <span class="keyword">int</span> newLength = length; <span class="comment">// 新的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">' '</span>)&#123;</span><br><span class="line">                newLength += <span class="number">2</span>; <span class="comment">// %20是三位, 比空格多两位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str.setLength(newLength+<span class="number">1</span>); <span class="comment">// 扩展StringBuffer的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = length; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            <span class="comment">// 找到空格</span></span><br><span class="line">            <span class="keyword">if</span>(str.charAt(j) == <span class="string">' '</span>)&#123;</span><br><span class="line">                <span class="comment">// 依次加入StringBuffer的尾端</span></span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(newLength--, <span class="string">'%'</span>);</span><br><span class="line">            <span class="comment">// 不是空格则直接加入尾端</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                str.setCharAt(newLength--, str.charAt(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a><a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">从尾到头打印链表</a></h2><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><p>方法一，使用辅助栈。</p><p>栈的特性是后入先出，所以根据这个特性可以先将所有链表元素压入栈，再依次取出即可得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(listNode == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 辅助栈</span></span><br><span class="line">        ListNode newHead = listNode;</span><br><span class="line">        <span class="comment">// 将链表中节点的元素值依次插入栈</span></span><br><span class="line">        <span class="keyword">while</span>(newHead != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(newHead.val);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从栈中依次取出, 并存入ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二，递归法。</p><p>递归的特性是一层层深入，抵达最底层后再逐层返回，正好与题目的要求一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(listNode == <span class="keyword">null</span>) <span class="keyword">return</span> res; <span class="comment">// 递归终止条件</span></span><br><span class="line">        res = printListFromTailToHead(listNode.next); <span class="comment">// 深入</span></span><br><span class="line">        res.add(listNode.val); <span class="comment">// 返回途中将当前节点值添加到ArrayList</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法三，多指针反转链表。</p><p>利用多个指针从前到后依次进行反转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        ListNode pre = <span class="keyword">null</span>; <span class="comment">// 前缀节点指针</span></span><br><span class="line">        ListNode cur = listNode; <span class="comment">// 当前节点指针</span></span><br><span class="line">        ListNode next = listNode; <span class="comment">// 保存当前节点的下一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = cur.next; <span class="comment">// 保存下一个节点</span></span><br><span class="line">            cur.next = pre; <span class="comment">// 反转，指向前缀节点</span></span><br><span class="line">            pre = cur; <span class="comment">// 向后移动</span></span><br><span class="line">            cur = next; <span class="comment">// 向后移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        listNode = pre; <span class="comment">// 最终前缀节点处为头节点</span></span><br><span class="line">        <span class="comment">// 依次输出至ArrayList</span></span><br><span class="line">        <span class="keyword">while</span>(listNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.add(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&tqId=11157&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">重建二叉树</a></h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p>方法一，</p><p>由于输入了前序遍历序列和中序遍历序列，根据前序遍历的规律可得根节点位置。可知1是整棵树的根节点的值。在中序遍历中找到1，则1左边的4，7，2是左子树，1右边的5，3，8，6是右子树。再对左子树和右子树进行相同的操作即可得到最终的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用HashMap将所有中序遍历的结果保存，方便后续查询</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= in.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            map.put(in[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = getTree(pre, <span class="number">0</span>, pre.length - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> inLeft)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[left]); <span class="comment">// 前序遍历中根节点永远是最左边的元素</span></span><br><span class="line">        <span class="keyword">int</span> index = map.get(root.val); <span class="comment">// 中序遍历中根节点所处的位置</span></span><br><span class="line">        <span class="keyword">int</span> leftLen = index - inLeft; <span class="comment">// 左子树节点数量</span></span><br><span class="line">        root.left = getTree(pre, left + <span class="number">1</span>, left + leftLen, inLeft); <span class="comment">// 左子树</span></span><br><span class="line">        root.right = getTree(pre, left + leftLen + <span class="number">1</span>, right, index + <span class="number">1</span>); <span class="comment">// 右子树</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">用两个栈实现队列</a></h2><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p>方法一，两栈分工。</p><p>栈一负责接收输入数据，栈二负责输出。</p><p>栈的特性是先入后出，队列的特性是先入先出。所以可以使用两个栈的特性，第一个栈接收数据后，在第二个栈中转手，使其顺序变为正常顺序，然后再输出。</p><ol><li><p>接收数据时，直接压入栈一。</p><p> 栈一：{A,B,C}，栈二：{}</p></li><li><p>想要弹出数据时，如果栈二是空的，则将栈一内数据全部推出压入栈二。再从栈二推出一个数据。</p><p> 栈一：{}，栈二：{C,B,A} -&gt; 栈一：{}，栈二：{C,B}</p></li><li><p>继续弹出数据，栈二非空，直接弹出栈二顶端数据。</p><p> 栈一：{}，栈二：{C}</p></li><li><p>再压入一个数据，直接压入栈一。</p><p> 栈一：{D}，栈二：{C}</p></li><li><p>弹出数据，栈二非空，弹出C，继续弹出数据，栈二为空，则将栈一数据压入栈二，然后弹出。这样就可以实现一个队列。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><h3 id="递归的三大要素"><a href="#递归的三大要素" class="headerlink" title="递归的三大要素"></a>递归的三大要素</h3><ol><li>明确递归的函数想要干什么？（函数的功能是什么）</li><li>寻找递归的结束条件，即参数是什么的时候递归结束，并将结果返回。此时应该可以根据这个参数的值知道函数的结果是什么。</li><li>找到函数的等价关系式，不断缩小参数的范围，缩小后，可以通过一些辅助的变量或操作使原函数的结果不变。</li></ol><p>每次第三步完成后都应该返回第二步检查是否出现了遗漏的条件。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/29/hello-world/"/>
      <url>/2020/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2020/05/29/Hexo/"/>
      <url>/2020/05/29/Hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2020/05/29/problems/"/>
      <url>/2020/05/29/problems/</url>
      
        <content type="html"><![CDATA[<p>第一篇文章测试</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
